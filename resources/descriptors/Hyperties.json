{
  "HypertyChat": {
    "sourcePackage": {
      "sourceCode": "(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.activate = f().default}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

// shim for using process in browser

var process = module.exports = {};
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = setTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while (len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    clearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        setTimeout(drainQueue, 0);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () {
    return '/';
};
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function () {
    return 0;
};

},{}],2:[function(require,module,exports){
(function (global){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/

// Distribution file for HypertyDiscovery.js
// version: 0.2.0

!function (e) {
  if ("object" == (typeof exports === "undefined" ? "undefined" : _typeof(exports)) && "undefined" != typeof module) module.exports = e();else if ("function" == typeof define && define.amd) define([], e);else {
    var t;t = "undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : this, t.HypertyDiscovery = e();
  }
}(function () {
  return function e(t, r, n) {
    function o(c, s) {
      if (!r[c]) {
        if (!t[c]) {
          var u = "function" == typeof require && require;if (!s && u) return u(c, !0);if (i) return i(c, !0);var a = new Error("Cannot find module '" + c + "'");throw a.code = "MODULE_NOT_FOUND", a;
        }var f = r[c] = { exports: {} };t[c][0].call(f.exports, function (e) {
          var r = t[c][1][e];return o(r ? r : e);
        }, f, f.exports, e, t, r, n);
      }return r[c].exports;
    }for (var i = "function" == typeof require && require, c = 0; c < n.length; c++) {
      o(n[c]);
    }return o;
  }({ 1: [function (e, t, r) {
      t.exports = { "default": e("core-js/library/fn/json/stringify"), __esModule: !0 };
    }, { "core-js/library/fn/json/stringify": 6 }], 2: [function (e, t, r) {
      t.exports = { "default": e("core-js/library/fn/object/define-property"), __esModule: !0 };
    }, { "core-js/library/fn/object/define-property": 7 }], 3: [function (e, t, r) {
      t.exports = { "default": e("core-js/library/fn/promise"), __esModule: !0 };
    }, { "core-js/library/fn/promise": 8 }], 4: [function (e, t, r) {
      "use strict";
      r.__esModule = !0, r["default"] = function (e, t) {
        if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
      };
    }, {}], 5: [function (e, t, r) {
      "use strict";
      function n(e) {
        return e && e.__esModule ? e : { "default": e };
      }r.__esModule = !0;var o = e("babel-runtime/core-js/object/define-property"),
          i = n(o);r["default"] = function () {
        function e(e, t) {
          for (var r = 0; r < t.length; r++) {
            var n = t[r];n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), (0, i["default"])(e, n.key, n);
          }
        }return function (t, r, n) {
          return r && e(t.prototype, r), n && e(t, n), t;
        };
      }();
    }, { "babel-runtime/core-js/object/define-property": 2 }], 6: [function (e, t, r) {
      var n = e("../../modules/_core"),
          o = n.JSON || (n.JSON = { stringify: JSON.stringify });t.exports = function (e) {
        return o.stringify.apply(o, arguments);
      };
    }, { "../../modules/_core": 16 }], 7: [function (e, t, r) {
      e("../../modules/es6.object.define-property");var n = e("../../modules/_core").Object;t.exports = function (e, t, r) {
        return n.defineProperty(e, t, r);
      };
    }, { "../../modules/_core": 16, "../../modules/es6.object.define-property": 71 }], 8: [function (e, t, r) {
      e("../modules/es6.object.to-string"), e("../modules/es6.string.iterator"), e("../modules/web.dom.iterable"), e("../modules/es6.promise"), t.exports = e("../modules/_core").Promise;
    }, { "../modules/_core": 16, "../modules/es6.object.to-string": 72, "../modules/es6.promise": 73, "../modules/es6.string.iterator": 74, "../modules/web.dom.iterable": 75 }], 9: [function (e, t, r) {
      t.exports = function (e) {
        if ("function" != typeof e) throw TypeError(e + " is not a function!");return e;
      };
    }, {}], 10: [function (e, t, r) {
      t.exports = function () {};
    }, {}], 11: [function (e, t, r) {
      t.exports = function (e, t, r, n) {
        if (!(e instanceof t) || void 0 !== n && n in e) throw TypeError(r + ": incorrect invocation!");return e;
      };
    }, {}], 12: [function (e, t, r) {
      var n = e("./_is-object");t.exports = function (e) {
        if (!n(e)) throw TypeError(e + " is not an object!");return e;
      };
    }, { "./_is-object": 33 }], 13: [function (e, t, r) {
      var n = e("./_to-iobject"),
          o = e("./_to-length"),
          i = e("./_to-index");t.exports = function (e) {
        return function (t, r, c) {
          var s,
              u = n(t),
              a = o(u.length),
              f = i(c, a);if (e && r != r) {
            for (; a > f;) {
              if (s = u[f++], s != s) return !0;
            }
          } else for (; a > f; f++) {
            if ((e || f in u) && u[f] === r) return e || f || 0;
          }return !e && -1;
        };
      };
    }, { "./_to-index": 61, "./_to-iobject": 63, "./_to-length": 64 }], 14: [function (e, t, r) {
      var n = e("./_cof"),
          o = e("./_wks")("toStringTag"),
          i = "Arguments" == n(function () {
        return arguments;
      }()),
          c = function c(e, t) {
        try {
          return e[t];
        } catch (r) {}
      };t.exports = function (e) {
        var t, r, s;return void 0 === e ? "Undefined" : null === e ? "Null" : "string" == typeof (r = c(t = Object(e), o)) ? r : i ? n(t) : "Object" == (s = n(t)) && "function" == typeof t.callee ? "Arguments" : s;
      };
    }, { "./_cof": 15, "./_wks": 68 }], 15: [function (e, t, r) {
      var n = {}.toString;t.exports = function (e) {
        return n.call(e).slice(8, -1);
      };
    }, {}], 16: [function (e, t, r) {
      var n = t.exports = { version: "2.4.0" };"number" == typeof __e && (__e = n);
    }, {}], 17: [function (e, t, r) {
      var n = e("./_a-function");t.exports = function (e, t, r) {
        if (n(e), void 0 === t) return e;switch (r) {case 1:
            return function (r) {
              return e.call(t, r);
            };case 2:
            return function (r, n) {
              return e.call(t, r, n);
            };case 3:
            return function (r, n, o) {
              return e.call(t, r, n, o);
            };}return function () {
          return e.apply(t, arguments);
        };
      };
    }, { "./_a-function": 9 }], 18: [function (e, t, r) {
      t.exports = function (e) {
        if (void 0 == e) throw TypeError("Can't call method on  " + e);return e;
      };
    }, {}], 19: [function (e, t, r) {
      t.exports = !e("./_fails")(function () {
        return 7 != Object.defineProperty({}, "a", { get: function get() {
            return 7;
          } }).a;
      });
    }, { "./_fails": 23 }], 20: [function (e, t, r) {
      var n = e("./_is-object"),
          o = e("./_global").document,
          i = n(o) && n(o.createElement);t.exports = function (e) {
        return i ? o.createElement(e) : {};
      };
    }, { "./_global": 25, "./_is-object": 33 }], 21: [function (e, t, r) {
      t.exports = "constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",");
    }, {}], 22: [function (e, t, r) {
      var n = e("./_global"),
          o = e("./_core"),
          i = e("./_ctx"),
          c = e("./_hide"),
          s = "prototype",
          u = function u(e, t, r) {
        var a,
            f,
            _,
            l = e & u.F,
            d = e & u.G,
            p = e & u.S,
            v = e & u.P,
            y = e & u.B,
            h = e & u.W,
            b = d ? o : o[t] || (o[t] = {}),
            m = b[s],
            g = d ? n : p ? n[t] : (n[t] || {})[s];d && (r = t);for (a in r) {
          f = !l && g && void 0 !== g[a], f && a in b || (_ = f ? g[a] : r[a], b[a] = d && "function" != typeof g[a] ? r[a] : y && f ? i(_, n) : h && g[a] == _ ? function (e) {
            var t = function t(_t, r, n) {
              if (this instanceof e) {
                switch (arguments.length) {case 0:
                    return new e();case 1:
                    return new e(_t);case 2:
                    return new e(_t, r);}return new e(_t, r, n);
              }return e.apply(this, arguments);
            };return t[s] = e[s], t;
          }(_) : v && "function" == typeof _ ? i(Function.call, _) : _, v && ((b.virtual || (b.virtual = {}))[a] = _, e & u.R && m && !m[a] && c(m, a, _)));
        }
      };u.F = 1, u.G = 2, u.S = 4, u.P = 8, u.B = 16, u.W = 32, u.U = 64, u.R = 128, t.exports = u;
    }, { "./_core": 16, "./_ctx": 17, "./_global": 25, "./_hide": 27 }], 23: [function (e, t, r) {
      t.exports = function (e) {
        try {
          return !!e();
        } catch (t) {
          return !0;
        }
      };
    }, {}], 24: [function (e, t, r) {
      var n = e("./_ctx"),
          o = e("./_iter-call"),
          i = e("./_is-array-iter"),
          c = e("./_an-object"),
          s = e("./_to-length"),
          u = e("./core.get-iterator-method"),
          a = {},
          f = {},
          r = t.exports = function (e, t, r, _, l) {
        var d,
            p,
            v,
            y,
            h = l ? function () {
          return e;
        } : u(e),
            b = n(r, _, t ? 2 : 1),
            m = 0;if ("function" != typeof h) throw TypeError(e + " is not iterable!");if (i(h)) {
          for (d = s(e.length); d > m; m++) {
            if (y = t ? b(c(p = e[m])[0], p[1]) : b(e[m]), y === a || y === f) return y;
          }
        } else for (v = h.call(e); !(p = v.next()).done;) {
          if (y = o(v, b, p.value, t), y === a || y === f) return y;
        }
      };r.BREAK = a, r.RETURN = f;
    }, { "./_an-object": 12, "./_ctx": 17, "./_is-array-iter": 32, "./_iter-call": 34, "./_to-length": 64, "./core.get-iterator-method": 69 }], 25: [function (e, t, r) {
      var n = t.exports = "undefined" != typeof window && window.Math == Math ? window : "undefined" != typeof self && self.Math == Math ? self : Function("return this")();"number" == typeof __g && (__g = n);
    }, {}], 26: [function (e, t, r) {
      var n = {}.hasOwnProperty;t.exports = function (e, t) {
        return n.call(e, t);
      };
    }, {}], 27: [function (e, t, r) {
      var n = e("./_object-dp"),
          o = e("./_property-desc");t.exports = e("./_descriptors") ? function (e, t, r) {
        return n.f(e, t, o(1, r));
      } : function (e, t, r) {
        return e[t] = r, e;
      };
    }, { "./_descriptors": 19, "./_object-dp": 43, "./_property-desc": 50 }], 28: [function (e, t, r) {
      t.exports = e("./_global").document && document.documentElement;
    }, { "./_global": 25 }], 29: [function (e, t, r) {
      t.exports = !e("./_descriptors") && !e("./_fails")(function () {
        return 7 != Object.defineProperty(e("./_dom-create")("div"), "a", { get: function get() {
            return 7;
          } }).a;
      });
    }, { "./_descriptors": 19, "./_dom-create": 20, "./_fails": 23 }], 30: [function (e, t, r) {
      t.exports = function (e, t, r) {
        var n = void 0 === r;switch (t.length) {case 0:
            return n ? e() : e.call(r);case 1:
            return n ? e(t[0]) : e.call(r, t[0]);case 2:
            return n ? e(t[0], t[1]) : e.call(r, t[0], t[1]);case 3:
            return n ? e(t[0], t[1], t[2]) : e.call(r, t[0], t[1], t[2]);case 4:
            return n ? e(t[0], t[1], t[2], t[3]) : e.call(r, t[0], t[1], t[2], t[3]);}return e.apply(r, t);
      };
    }, {}], 31: [function (e, t, r) {
      var n = e("./_cof");t.exports = Object("z").propertyIsEnumerable(0) ? Object : function (e) {
        return "String" == n(e) ? e.split("") : Object(e);
      };
    }, { "./_cof": 15 }], 32: [function (e, t, r) {
      var n = e("./_iterators"),
          o = e("./_wks")("iterator"),
          i = Array.prototype;t.exports = function (e) {
        return void 0 !== e && (n.Array === e || i[o] === e);
      };
    }, { "./_iterators": 39, "./_wks": 68 }], 33: [function (e, t, r) {
      t.exports = function (e) {
        return "object" == (typeof e === "undefined" ? "undefined" : _typeof(e)) ? null !== e : "function" == typeof e;
      };
    }, {}], 34: [function (e, t, r) {
      var n = e("./_an-object");t.exports = function (e, t, r, o) {
        try {
          return o ? t(n(r)[0], r[1]) : t(r);
        } catch (i) {
          var c = e["return"];throw void 0 !== c && n(c.call(e)), i;
        }
      };
    }, { "./_an-object": 12 }], 35: [function (e, t, r) {
      "use strict";
      var n = e("./_object-create"),
          o = e("./_property-desc"),
          i = e("./_set-to-string-tag"),
          c = {};e("./_hide")(c, e("./_wks")("iterator"), function () {
        return this;
      }), t.exports = function (e, t, r) {
        e.prototype = n(c, { next: o(1, r) }), i(e, t + " Iterator");
      };
    }, { "./_hide": 27, "./_object-create": 42, "./_property-desc": 50, "./_set-to-string-tag": 55, "./_wks": 68 }], 36: [function (e, t, r) {
      "use strict";
      var n = e("./_library"),
          o = e("./_export"),
          i = e("./_redefine"),
          c = e("./_hide"),
          s = e("./_has"),
          u = e("./_iterators"),
          a = e("./_iter-create"),
          f = e("./_set-to-string-tag"),
          _ = e("./_object-gpo"),
          l = e("./_wks")("iterator"),
          d = !([].keys && "next" in [].keys()),
          p = "@@iterator",
          v = "keys",
          y = "values",
          h = function h() {
        return this;
      };t.exports = function (e, t, r, b, m, g, j) {
        a(r, t, b);var x,
            w,
            k,
            O = function O(e) {
          if (!d && e in E) return E[e];switch (e) {case v:
              return function () {
                return new r(this, e);
              };case y:
              return function () {
                return new r(this, e);
              };}return function () {
            return new r(this, e);
          };
        },
            M = t + " Iterator",
            P = m == y,
            S = !1,
            E = e.prototype,
            T = E[l] || E[p] || m && E[m],
            A = T || O(m),
            U = m ? P ? O("entries") : A : void 0,
            C = "Array" == t ? E.entries || T : T;if (C && (k = _(C.call(new e())), k !== Object.prototype && (f(k, M, !0), n || s(k, l) || c(k, l, h))), P && T && T.name !== y && (S = !0, A = function A() {
          return T.call(this);
        }), n && !j || !d && !S && E[l] || c(E, l, A), u[t] = A, u[M] = h, m) if (x = { values: P ? A : O(y), keys: g ? A : O(v), entries: U }, j) for (w in x) {
          w in E || i(E, w, x[w]);
        } else o(o.P + o.F * (d || S), t, x);return x;
      };
    }, { "./_export": 22, "./_has": 26, "./_hide": 27, "./_iter-create": 35, "./_iterators": 39, "./_library": 40, "./_object-gpo": 46, "./_redefine": 52, "./_set-to-string-tag": 55, "./_wks": 68 }], 37: [function (e, t, r) {
      var n = e("./_wks")("iterator"),
          o = !1;try {
        var i = [7][n]();i["return"] = function () {
          o = !0;
        }, Array.from(i, function () {
          throw 2;
        });
      } catch (c) {}t.exports = function (e, t) {
        if (!t && !o) return !1;var r = !1;try {
          var i = [7],
              c = i[n]();c.next = function () {
            return { done: r = !0 };
          }, i[n] = function () {
            return c;
          }, e(i);
        } catch (s) {}return r;
      };
    }, { "./_wks": 68 }], 38: [function (e, t, r) {
      t.exports = function (e, t) {
        return { value: t, done: !!e };
      };
    }, {}], 39: [function (e, t, r) {
      t.exports = {};
    }, {}], 40: [function (e, t, r) {
      t.exports = !0;
    }, {}], 41: [function (e, t, r) {
      var n = e("./_global"),
          o = e("./_task").set,
          i = n.MutationObserver || n.WebKitMutationObserver,
          c = n.process,
          s = n.Promise,
          u = "process" == e("./_cof")(c);t.exports = function () {
        var e,
            t,
            r,
            a = function a() {
          var n, o;for (u && (n = c.domain) && n.exit(); e;) {
            o = e.fn, e = e.next;try {
              o();
            } catch (i) {
              throw e ? r() : t = void 0, i;
            }
          }t = void 0, n && n.enter();
        };if (u) r = function r() {
          c.nextTick(a);
        };else if (i) {
          var f = !0,
              _ = document.createTextNode("");new i(a).observe(_, { characterData: !0 }), r = function r() {
            _.data = f = !f;
          };
        } else if (s && s.resolve) {
          var l = s.resolve();r = function r() {
            l.then(a);
          };
        } else r = function r() {
          o.call(n, a);
        };return function (n) {
          var o = { fn: n, next: void 0 };t && (t.next = o), e || (e = o, r()), t = o;
        };
      };
    }, { "./_cof": 15, "./_global": 25, "./_task": 60 }], 42: [function (e, t, r) {
      var n = e("./_an-object"),
          o = e("./_object-dps"),
          i = e("./_enum-bug-keys"),
          c = e("./_shared-key")("IE_PROTO"),
          s = function s() {},
          u = "prototype",
          _a = function a() {
        var t,
            r = e("./_dom-create")("iframe"),
            n = i.length,
            o = ">";for (r.style.display = "none", e("./_html").appendChild(r), r.src = "javascript:", t = r.contentWindow.document, t.open(), t.write("<script>document.F=Object</script" + o), t.close(), _a = t.F; n--;) {
          delete _a[u][i[n]];
        }return _a();
      };t.exports = Object.create || function (e, t) {
        var r;return null !== e ? (s[u] = n(e), r = new s(), s[u] = null, r[c] = e) : r = _a(), void 0 === t ? r : o(r, t);
      };
    }, { "./_an-object": 12, "./_dom-create": 20, "./_enum-bug-keys": 21, "./_html": 28, "./_object-dps": 44, "./_shared-key": 56 }], 43: [function (e, t, r) {
      var n = e("./_an-object"),
          o = e("./_ie8-dom-define"),
          i = e("./_to-primitive"),
          c = Object.defineProperty;r.f = e("./_descriptors") ? Object.defineProperty : function (e, t, r) {
        if (n(e), t = i(t, !0), n(r), o) try {
          return c(e, t, r);
        } catch (s) {}if ("get" in r || "set" in r) throw TypeError("Accessors not supported!");return "value" in r && (e[t] = r.value), e;
      };
    }, { "./_an-object": 12, "./_descriptors": 19, "./_ie8-dom-define": 29, "./_to-primitive": 66 }], 44: [function (e, t, r) {
      var n = e("./_object-dp"),
          o = e("./_an-object"),
          i = e("./_object-keys");t.exports = e("./_descriptors") ? Object.defineProperties : function (e, t) {
        o(e);for (var r, c = i(t), s = c.length, u = 0; s > u;) {
          n.f(e, r = c[u++], t[r]);
        }return e;
      };
    }, { "./_an-object": 12, "./_descriptors": 19, "./_object-dp": 43, "./_object-keys": 48 }], 45: [function (e, t, r) {
      var n = e("./_object-pie"),
          o = e("./_property-desc"),
          i = e("./_to-iobject"),
          c = e("./_to-primitive"),
          s = e("./_has"),
          u = e("./_ie8-dom-define"),
          a = Object.getOwnPropertyDescriptor;r.f = e("./_descriptors") ? a : function (e, t) {
        if (e = i(e), t = c(t, !0), u) try {
          return a(e, t);
        } catch (r) {}return s(e, t) ? o(!n.f.call(e, t), e[t]) : void 0;
      };
    }, { "./_descriptors": 19, "./_has": 26, "./_ie8-dom-define": 29, "./_object-pie": 49, "./_property-desc": 50, "./_to-iobject": 63, "./_to-primitive": 66 }], 46: [function (e, t, r) {
      var n = e("./_has"),
          o = e("./_to-object"),
          i = e("./_shared-key")("IE_PROTO"),
          c = Object.prototype;t.exports = Object.getPrototypeOf || function (e) {
        return e = o(e), n(e, i) ? e[i] : "function" == typeof e.constructor && e instanceof e.constructor ? e.constructor.prototype : e instanceof Object ? c : null;
      };
    }, { "./_has": 26, "./_shared-key": 56, "./_to-object": 65 }], 47: [function (e, t, r) {
      var n = e("./_has"),
          o = e("./_to-iobject"),
          i = e("./_array-includes")(!1),
          c = e("./_shared-key")("IE_PROTO");t.exports = function (e, t) {
        var r,
            s = o(e),
            u = 0,
            a = [];for (r in s) {
          r != c && n(s, r) && a.push(r);
        }for (; t.length > u;) {
          n(s, r = t[u++]) && (~i(a, r) || a.push(r));
        }return a;
      };
    }, { "./_array-includes": 13, "./_has": 26, "./_shared-key": 56, "./_to-iobject": 63 }], 48: [function (e, t, r) {
      var n = e("./_object-keys-internal"),
          o = e("./_enum-bug-keys");t.exports = Object.keys || function (e) {
        return n(e, o);
      };
    }, { "./_enum-bug-keys": 21, "./_object-keys-internal": 47 }], 49: [function (e, t, r) {
      r.f = {}.propertyIsEnumerable;
    }, {}], 50: [function (e, t, r) {
      t.exports = function (e, t) {
        return { enumerable: !(1 & e), configurable: !(2 & e), writable: !(4 & e), value: t };
      };
    }, {}], 51: [function (e, t, r) {
      var n = e("./_hide");t.exports = function (e, t, r) {
        for (var o in t) {
          r && e[o] ? e[o] = t[o] : n(e, o, t[o]);
        }return e;
      };
    }, { "./_hide": 27 }], 52: [function (e, t, r) {
      t.exports = e("./_hide");
    }, { "./_hide": 27 }], 53: [function (e, t, r) {
      var n = e("./_is-object"),
          o = e("./_an-object"),
          i = function i(e, t) {
        if (o(e), !n(t) && null !== t) throw TypeError(t + ": can't set as prototype!");
      };t.exports = { set: Object.setPrototypeOf || ("__proto__" in {} ? function (t, r, n) {
          try {
            n = e("./_ctx")(Function.call, e("./_object-gopd").f(Object.prototype, "__proto__").set, 2), n(t, []), r = !(t instanceof Array);
          } catch (o) {
            r = !0;
          }return function (e, t) {
            return i(e, t), r ? e.__proto__ = t : n(e, t), e;
          };
        }({}, !1) : void 0), check: i };
    }, { "./_an-object": 12, "./_ctx": 17, "./_is-object": 33, "./_object-gopd": 45 }], 54: [function (e, t, r) {
      "use strict";
      var n = e("./_global"),
          o = e("./_core"),
          i = e("./_object-dp"),
          c = e("./_descriptors"),
          s = e("./_wks")("species");t.exports = function (e) {
        var t = "function" == typeof o[e] ? o[e] : n[e];c && t && !t[s] && i.f(t, s, { configurable: !0, get: function get() {
            return this;
          } });
      };
    }, { "./_core": 16, "./_descriptors": 19, "./_global": 25, "./_object-dp": 43, "./_wks": 68 }], 55: [function (e, t, r) {
      var n = e("./_object-dp").f,
          o = e("./_has"),
          i = e("./_wks")("toStringTag");t.exports = function (e, t, r) {
        e && !o(e = r ? e : e.prototype, i) && n(e, i, { configurable: !0, value: t });
      };
    }, { "./_has": 26, "./_object-dp": 43, "./_wks": 68 }], 56: [function (e, t, r) {
      var n = e("./_shared")("keys"),
          o = e("./_uid");t.exports = function (e) {
        return n[e] || (n[e] = o(e));
      };
    }, { "./_shared": 57, "./_uid": 67 }], 57: [function (e, t, r) {
      var n = e("./_global"),
          o = "__core-js_shared__",
          i = n[o] || (n[o] = {});t.exports = function (e) {
        return i[e] || (i[e] = {});
      };
    }, { "./_global": 25 }], 58: [function (e, t, r) {
      var n = e("./_an-object"),
          o = e("./_a-function"),
          i = e("./_wks")("species");t.exports = function (e, t) {
        var r,
            c = n(e).constructor;return void 0 === c || void 0 == (r = n(c)[i]) ? t : o(r);
      };
    }, { "./_a-function": 9, "./_an-object": 12, "./_wks": 68 }], 59: [function (e, t, r) {
      var n = e("./_to-integer"),
          o = e("./_defined");t.exports = function (e) {
        return function (t, r) {
          var i,
              c,
              s = String(o(t)),
              u = n(r),
              a = s.length;return 0 > u || u >= a ? e ? "" : void 0 : (i = s.charCodeAt(u), 55296 > i || i > 56319 || u + 1 === a || (c = s.charCodeAt(u + 1)) < 56320 || c > 57343 ? e ? s.charAt(u) : i : e ? s.slice(u, u + 2) : (i - 55296 << 10) + (c - 56320) + 65536);
        };
      };
    }, { "./_defined": 18, "./_to-integer": 62 }], 60: [function (e, t, r) {
      var n,
          o,
          i,
          c = e("./_ctx"),
          s = e("./_invoke"),
          u = e("./_html"),
          a = e("./_dom-create"),
          f = e("./_global"),
          _ = f.process,
          l = f.setImmediate,
          d = f.clearImmediate,
          p = f.MessageChannel,
          v = 0,
          y = {},
          h = "onreadystatechange",
          b = function b() {
        var e = +this;if (y.hasOwnProperty(e)) {
          var t = y[e];delete y[e], t();
        }
      },
          m = function m(e) {
        b.call(e.data);
      };l && d || (l = function l(e) {
        for (var t = [], r = 1; arguments.length > r;) {
          t.push(arguments[r++]);
        }return y[++v] = function () {
          s("function" == typeof e ? e : Function(e), t);
        }, n(v), v;
      }, d = function d(e) {
        delete y[e];
      }, "process" == e("./_cof")(_) ? n = function n(e) {
        _.nextTick(c(b, e, 1));
      } : p ? (o = new p(), i = o.port2, o.port1.onmessage = m, n = c(i.postMessage, i, 1)) : f.addEventListener && "function" == typeof postMessage && !f.importScripts ? (n = function n(e) {
        f.postMessage(e + "", "*");
      }, f.addEventListener("message", m, !1)) : n = h in a("script") ? function (e) {
        u.appendChild(a("script"))[h] = function () {
          u.removeChild(this), b.call(e);
        };
      } : function (e) {
        setTimeout(c(b, e, 1), 0);
      }), t.exports = { set: l, clear: d };
    }, { "./_cof": 15, "./_ctx": 17, "./_dom-create": 20, "./_global": 25, "./_html": 28, "./_invoke": 30 }], 61: [function (e, t, r) {
      var n = e("./_to-integer"),
          o = Math.max,
          i = Math.min;t.exports = function (e, t) {
        return e = n(e), 0 > e ? o(e + t, 0) : i(e, t);
      };
    }, { "./_to-integer": 62 }], 62: [function (e, t, r) {
      var n = Math.ceil,
          o = Math.floor;t.exports = function (e) {
        return isNaN(e = +e) ? 0 : (e > 0 ? o : n)(e);
      };
    }, {}], 63: [function (e, t, r) {
      var n = e("./_iobject"),
          o = e("./_defined");t.exports = function (e) {
        return n(o(e));
      };
    }, { "./_defined": 18, "./_iobject": 31 }], 64: [function (e, t, r) {
      var n = e("./_to-integer"),
          o = Math.min;t.exports = function (e) {
        return e > 0 ? o(n(e), 9007199254740991) : 0;
      };
    }, { "./_to-integer": 62 }], 65: [function (e, t, r) {
      var n = e("./_defined");t.exports = function (e) {
        return Object(n(e));
      };
    }, { "./_defined": 18 }], 66: [function (e, t, r) {
      var n = e("./_is-object");t.exports = function (e, t) {
        if (!n(e)) return e;var r, o;if (t && "function" == typeof (r = e.toString) && !n(o = r.call(e))) return o;if ("function" == typeof (r = e.valueOf) && !n(o = r.call(e))) return o;if (!t && "function" == typeof (r = e.toString) && !n(o = r.call(e))) return o;throw TypeError("Can't convert object to primitive value");
      };
    }, { "./_is-object": 33 }], 67: [function (e, t, r) {
      var n = 0,
          o = Math.random();t.exports = function (e) {
        return "Symbol(".concat(void 0 === e ? "" : e, ")_", (++n + o).toString(36));
      };
    }, {}], 68: [function (e, t, r) {
      var n = e("./_shared")("wks"),
          o = e("./_uid"),
          i = e("./_global").Symbol,
          c = "function" == typeof i,
          s = t.exports = function (e) {
        return n[e] || (n[e] = c && i[e] || (c ? i : o)("Symbol." + e));
      };s.store = n;
    }, { "./_global": 25, "./_shared": 57, "./_uid": 67 }], 69: [function (e, t, r) {
      var n = e("./_classof"),
          o = e("./_wks")("iterator"),
          i = e("./_iterators");t.exports = e("./_core").getIteratorMethod = function (e) {
        return void 0 != e ? e[o] || e["@@iterator"] || i[n(e)] : void 0;
      };
    }, { "./_classof": 14, "./_core": 16, "./_iterators": 39, "./_wks": 68 }], 70: [function (e, t, r) {
      "use strict";
      var n = e("./_add-to-unscopables"),
          o = e("./_iter-step"),
          i = e("./_iterators"),
          c = e("./_to-iobject");t.exports = e("./_iter-define")(Array, "Array", function (e, t) {
        this._t = c(e), this._i = 0, this._k = t;
      }, function () {
        var e = this._t,
            t = this._k,
            r = this._i++;return !e || r >= e.length ? (this._t = void 0, o(1)) : "keys" == t ? o(0, r) : "values" == t ? o(0, e[r]) : o(0, [r, e[r]]);
      }, "values"), i.Arguments = i.Array, n("keys"), n("values"), n("entries");
    }, { "./_add-to-unscopables": 10, "./_iter-define": 36, "./_iter-step": 38, "./_iterators": 39, "./_to-iobject": 63 }], 71: [function (e, t, r) {
      var n = e("./_export");n(n.S + n.F * !e("./_descriptors"), "Object", { defineProperty: e("./_object-dp").f });
    }, { "./_descriptors": 19, "./_export": 22, "./_object-dp": 43 }], 72: [function (e, t, r) {}, {}], 73: [function (e, t, r) {
      "use strict";
      var n,
          o,
          i,
          c = e("./_library"),
          s = e("./_global"),
          u = e("./_ctx"),
          a = e("./_classof"),
          f = e("./_export"),
          _ = e("./_is-object"),
          l = (e("./_an-object"), e("./_a-function")),
          d = e("./_an-instance"),
          p = e("./_for-of"),
          v = (e("./_set-proto").set, e("./_species-constructor")),
          y = e("./_task").set,
          h = e("./_microtask")(),
          b = "Promise",
          m = s.TypeError,
          g = s.process,
          _j = s[b],
          g = s.process,
          x = "process" == a(g),
          w = function w() {},
          k = !!function () {
        try {
          var t = _j.resolve(1),
              r = (t.constructor = {})[e("./_wks")("species")] = function (e) {
            e(w, w);
          };return (x || "function" == typeof PromiseRejectionEvent) && t.then(w) instanceof r;
        } catch (n) {}
      }(),
          O = function O(e, t) {
        return e === t || e === _j && t === i;
      },
          M = function M(e) {
        var t;return _(e) && "function" == typeof (t = e.then) ? t : !1;
      },
          P = function P(e) {
        return O(_j, e) ? new S(e) : new o(e);
      },
          S = o = function o(e) {
        var t, r;this.promise = new e(function (e, n) {
          if (void 0 !== t || void 0 !== r) throw m("Bad Promise constructor");t = e, r = n;
        }), this.resolve = l(t), this.reject = l(r);
      },
          E = function E(e) {
        try {
          e();
        } catch (t) {
          return { error: t };
        }
      },
          T = function T(e, t) {
        if (!e._n) {
          e._n = !0;var r = e._c;h(function () {
            for (var n = e._v, o = 1 == e._s, i = 0, c = function c(t) {
              var r,
                  i,
                  c = o ? t.ok : t.fail,
                  s = t.resolve,
                  u = t.reject,
                  a = t.domain;try {
                c ? (o || (2 == e._h && C(e), e._h = 1), c === !0 ? r = n : (a && a.enter(), r = c(n), a && a.exit()), r === t.promise ? u(m("Promise-chain cycle")) : (i = M(r)) ? i.call(r, s, u) : s(r)) : u(n);
              } catch (f) {
                u(f);
              }
            }; r.length > i;) {
              c(r[i++]);
            }e._c = [], e._n = !1, t && !e._h && A(e);
          });
        }
      },
          A = function A(e) {
        y.call(s, function () {
          var t,
              r,
              n,
              o = e._v;if (U(e) && (t = E(function () {
            x ? g.emit("unhandledRejection", o, e) : (r = s.onunhandledrejection) ? r({ promise: e, reason: o }) : (n = s.console) && n.error && n.error("Unhandled promise rejection", o);
          }), e._h = x || U(e) ? 2 : 1), e._a = void 0, t) throw t.error;
        });
      },
          U = function U(e) {
        if (1 == e._h) return !1;for (var t, r = e._a || e._c, n = 0; r.length > n;) {
          if (t = r[n++], t.fail || !U(t.promise)) return !1;
        }return !0;
      },
          C = function C(e) {
        y.call(s, function () {
          var t;x ? g.emit("rejectionHandled", e) : (t = s.onrejectionhandled) && t({ promise: e, reason: e._v });
        });
      },
          R = function R(e) {
        var t = this;t._d || (t._d = !0, t = t._w || t, t._v = e, t._s = 2, t._a || (t._a = t._c.slice()), T(t, !0));
      },
          L = function L(e) {
        var t,
            r = this;if (!r._d) {
          r._d = !0, r = r._w || r;try {
            if (r === e) throw m("Promise can't be resolved itself");(t = M(e)) ? h(function () {
              var n = { _w: r, _d: !1 };try {
                t.call(e, u(L, n, 1), u(R, n, 1));
              } catch (o) {
                R.call(n, o);
              }
            }) : (r._v = e, r._s = 1, T(r, !1));
          } catch (n) {
            R.call({ _w: r, _d: !1 }, n);
          }
        }
      };k || (_j = function j(e) {
        d(this, _j, b, "_h"), l(e), n.call(this);try {
          e(u(L, this, 1), u(R, this, 1));
        } catch (t) {
          R.call(this, t);
        }
      }, n = function n(e) {
        this._c = [], this._a = void 0, this._s = 0, this._d = !1, this._v = void 0, this._h = 0, this._n = !1;
      }, n.prototype = e("./_redefine-all")(_j.prototype, { then: function then(e, t) {
          var r = P(v(this, _j));return r.ok = "function" == typeof e ? e : !0, r.fail = "function" == typeof t && t, r.domain = x ? g.domain : void 0, this._c.push(r), this._a && this._a.push(r), this._s && T(this, !1), r.promise;
        }, "catch": function _catch(e) {
          return this.then(void 0, e);
        } }), S = function S() {
        var e = new n();this.promise = e, this.resolve = u(L, e, 1), this.reject = u(R, e, 1);
      }), f(f.G + f.W + f.F * !k, { Promise: _j }), e("./_set-to-string-tag")(_j, b), e("./_set-species")(b), i = e("./_core")[b], f(f.S + f.F * !k, b, { reject: function reject(e) {
          var t = P(this),
              r = t.reject;return r(e), t.promise;
        } }), f(f.S + f.F * (c || !k), b, { resolve: function resolve(e) {
          if (e instanceof _j && O(e.constructor, this)) return e;var t = P(this),
              r = t.resolve;return r(e), t.promise;
        } }), f(f.S + f.F * !(k && e("./_iter-detect")(function (e) {
        _j.all(e)["catch"](w);
      })), b, { all: function all(e) {
          var t = this,
              r = P(t),
              n = r.resolve,
              o = r.reject,
              i = E(function () {
            var r = [],
                i = 0,
                c = 1;p(e, !1, function (e) {
              var s = i++,
                  u = !1;r.push(void 0), c++, t.resolve(e).then(function (e) {
                u || (u = !0, r[s] = e, --c || n(r));
              }, o);
            }), --c || n(r);
          });return i && o(i.error), r.promise;
        }, race: function race(e) {
          var t = this,
              r = P(t),
              n = r.reject,
              o = E(function () {
            p(e, !1, function (e) {
              t.resolve(e).then(r.resolve, n);
            });
          });return o && n(o.error), r.promise;
        } });
    }, { "./_a-function": 9, "./_an-instance": 11, "./_an-object": 12, "./_classof": 14, "./_core": 16, "./_ctx": 17, "./_export": 22, "./_for-of": 24, "./_global": 25, "./_is-object": 33, "./_iter-detect": 37, "./_library": 40, "./_microtask": 41, "./_redefine-all": 51, "./_set-proto": 53, "./_set-species": 54, "./_set-to-string-tag": 55, "./_species-constructor": 58, "./_task": 60, "./_wks": 68 }], 74: [function (e, t, r) {
      "use strict";
      var n = e("./_string-at")(!0);e("./_iter-define")(String, "String", function (e) {
        this._t = String(e), this._i = 0;
      }, function () {
        var e,
            t = this._t,
            r = this._i;return r >= t.length ? { value: void 0, done: !0 } : (e = n(t, r), this._i += e.length, { value: e, done: !1 });
      });
    }, { "./_iter-define": 36, "./_string-at": 59 }], 75: [function (e, t, r) {
      e("./es6.array.iterator");for (var n = e("./_global"), o = e("./_hide"), i = e("./_iterators"), c = e("./_wks")("toStringTag"), s = ["NodeList", "DOMTokenList", "MediaList", "StyleSheetList", "CSSRuleList"], u = 0; 5 > u; u++) {
        var a = s[u],
            f = n[a],
            _ = f && f.prototype;_ && !_[c] && o(_, c, a), i[a] = i.Array;
      }
    }, { "./_global": 25, "./_hide": 27, "./_iterators": 39, "./_wks": 68, "./es6.array.iterator": 70 }], 76: [function (e, t, r) {
      "use strict";
      function n(e) {
        return e && e.__esModule ? e : { "default": e };
      }Object.defineProperty(r, "__esModule", { value: !0 });var o = e("./hyperty-discovery/HypertyDiscovery"),
          i = n(o);r["default"] = i["default"], t.exports = r["default"];
    }, { "./hyperty-discovery/HypertyDiscovery": 77 }], 77: [function (e, t, r) {
      "use strict";
      function n(e) {
        return e && e.__esModule ? e : { "default": e };
      }Object.defineProperty(r, "__esModule", { value: !0 });var o = e("babel-runtime/core-js/promise"),
          i = n(o),
          c = e("babel-runtime/helpers/classCallCheck"),
          s = n(c),
          u = e("babel-runtime/helpers/createClass"),
          a = n(u),
          f = e("../utils/utils"),
          _ = function () {
        function e(t, r) {
          (0, s["default"])(this, e);var n = this;n.messageBus = r, n.domain = (0, f.divideURL)(t).domain, n.discoveryURL = t;
        }return (0, a["default"])(e, [{ key: "discoverDataObjectPerName", value: function value(e, t) {
            var r = this,
                n = void 0;n = t ? t : r.domain;var o = { type: "read", from: r.discoveryURL, to: "domain://registry." + n + "/", body: { resource: "dataObject://" + e } };return new i["default"](function (e, t) {
              r.messageBus.postMessage(o, function (r) {
                var n = r.body.value.url;n ? e(n) : t("DataObject name does not exist");
              });
            });
          } }, { key: "discoverHypertyPerUser", value: function value(e, t) {
            var r = this,
                n = void 0;n = t ? t : r.domain;var o = "user://" + e.substring(e.indexOf("@") + 1, e.length) + "/" + e.substring(0, e.indexOf("@")),
                c = { type: "read", from: r.discoveryURL, to: "domain://registry." + n + "/", body: { resource: o } };return console.log("Message: ", c, n, o), new i["default"](function (t, n) {
              r.messageBus.postMessage(c, function (r) {
                console.log("message reply", r);var o = void 0,
                    i = void 0,
                    c = void 0,
                    s = r.body.value;for (o in s) {
                  if (void 0 !== s[o].lastModified) if (void 0 === i) i = new Date(s[o].lastModified), c = o;else {
                    var u = new Date(s[o].lastModified);i.getTime() < u.getTime() && (i = u, c = o);
                  }
                }console.log("Last Hyperty: ", c, i);var a = c;if (void 0 === a) return n("User Hyperty not found");var f = { id: e, descriptor: s[a].descriptor, hypertyURL: a };console.log("===> hypertyDiscovery messageBundle: ", f), t(f);
              });
            });
          } }, { key: "discoverHypertiesPerUser", value: function value(e, t) {
            var r = this,
                n = void 0;n = t ? t : r.domain;var o = "user://" + e.substring(e.indexOf("@") + 1, e.length) + "/" + e.substring(0, e.indexOf("@")),
                c = { type: "read", from: r.discoveryURL, to: "domain://registry." + n + "/", body: { resource: o } };return console.log("Message discoverHypertiesPerUser: ", c, n, o), new i["default"](function (e, t) {
              r.messageBus.postMessage(c, function (r) {
                console.log("discoverHypertiesPerUser reply", r);var n = r.body.value;return n ? void e(n) : t("User Hyperty not found");
              });
            });
          } }]), e;
      }();r["default"] = _, t.exports = r["default"];
    }, { "../utils/utils": 78, "babel-runtime/core-js/promise": 3, "babel-runtime/helpers/classCallCheck": 4, "babel-runtime/helpers/createClass": 5 }], 78: [function (e, t, r) {
      "use strict";
      function n(e) {
        return e && e.__esModule ? e : { "default": e };
      }function o(e) {
        var t = /([a-zA-Z-]*):\/\/(?:\.)?([-a-zA-Z0-9@:%._\+~#=]{2,256})([-a-zA-Z0-9@:%._\+~#=\/]*)/gi,
            r = "$1,$2,$3",
            n = e.replace(t, r).split(",");n[0] === e && (n[0] = "https", n[1] = e);var o = { type: n[0], domain: n[1], identity: n[2] };return o;
      }function i(e) {
        return e ? JSON.parse((0, s["default"])(e)) : void 0;
      }Object.defineProperty(r, "__esModule", { value: !0 });var c = e("babel-runtime/core-js/json/stringify"),
          s = n(c);r.divideURL = o, r.deepClone = i;
    }, { "babel-runtime/core-js/json/stringify": 1 }] }, {}, [76])(76);
});

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],3:[function(require,module,exports){
(function (global){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/

// Distribution file for Syncher.js
// version: 0.2.0

!function (e) {
  if ("object" == (typeof exports === "undefined" ? "undefined" : _typeof(exports)) && "undefined" != typeof module) module.exports = e();else if ("function" == typeof define && define.amd) define([], e);else {
    var t;t = "undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : this, t.Syncher = e();
  }
}(function () {
  return function e(t, r, n) {
    function o(s, a) {
      if (!r[s]) {
        if (!t[s]) {
          var c = "function" == typeof require && require;if (!a && c) return c(s, !0);if (i) return i(s, !0);var u = new Error("Cannot find module '" + s + "'");throw u.code = "MODULE_NOT_FOUND", u;
        }var l = r[s] = { exports: {} };t[s][0].call(l.exports, function (e) {
          var r = t[s][1][e];return o(r ? r : e);
        }, l, l.exports, e, t, r, n);
      }return r[s].exports;
    }for (var i = "function" == typeof require && require, s = 0; s < n.length; s++) {
      o(n[s]);
    }return o;
  }({ 1: [function (e, t, r) {
      Object.observe && !Array.observe && function (e, t) {
        "use strict";
        var r = e.getNotifier,
            n = "performChange",
            o = "_original",
            i = "splice",
            s = { push: function c(e) {
            var t = arguments,
                s = c[o].apply(this, t);return r(this)[n](i, function () {
              return { index: s - t.length, addedCount: t.length, removed: [] };
            }), s;
          }, unshift: function u(e) {
            var t = arguments,
                s = u[o].apply(this, t);return r(this)[n](i, function () {
              return { index: 0, addedCount: t.length, removed: [] };
            }), s;
          }, pop: function l() {
            var e = this.length,
                t = l[o].call(this);return this.length !== e && r(this)[n](i, function () {
              return { index: this.length, addedCount: 0, removed: [t] };
            }, this), t;
          }, shift: function f() {
            var e = this.length,
                t = f[o].call(this);return this.length !== e && r(this)[n](i, function () {
              return { index: 0, addedCount: 0, removed: [t] };
            }, this), t;
          }, splice: function d(e, t) {
            var s = arguments,
                a = d[o].apply(this, s);return (a.length || s.length > 2) && r(this)[n](i, function () {
              return { index: e, addedCount: s.length - 2, removed: a };
            }, this), a;
          } };for (var a in s) {
          s[a][o] = t.prototype[a], t.prototype[a] = s[a];
        }t.observe = function (t, r) {
          return e.observe(t, r, ["add", "update", "delete", i]);
        }, t.unobserve = e.unobserve;
      }(Object, Array);
    }, {}], 2: [function (e, t, r) {
      t.exports = { "default": e("core-js/library/fn/json/stringify"), __esModule: !0 };
    }, { "core-js/library/fn/json/stringify": 17 }], 3: [function (e, t, r) {
      t.exports = { "default": e("core-js/library/fn/object/create"), __esModule: !0 };
    }, { "core-js/library/fn/object/create": 18 }], 4: [function (e, t, r) {
      t.exports = { "default": e("core-js/library/fn/object/define-property"), __esModule: !0 };
    }, { "core-js/library/fn/object/define-property": 19 }], 5: [function (e, t, r) {
      t.exports = { "default": e("core-js/library/fn/object/get-own-property-descriptor"), __esModule: !0 };
    }, { "core-js/library/fn/object/get-own-property-descriptor": 20 }], 6: [function (e, t, r) {
      t.exports = { "default": e("core-js/library/fn/object/get-prototype-of"), __esModule: !0 };
    }, { "core-js/library/fn/object/get-prototype-of": 21 }], 7: [function (e, t, r) {
      t.exports = { "default": e("core-js/library/fn/object/keys"), __esModule: !0 };
    }, { "core-js/library/fn/object/keys": 22 }], 8: [function (e, t, r) {
      t.exports = { "default": e("core-js/library/fn/object/set-prototype-of"), __esModule: !0 };
    }, { "core-js/library/fn/object/set-prototype-of": 23 }], 9: [function (e, t, r) {
      t.exports = { "default": e("core-js/library/fn/promise"), __esModule: !0 };
    }, { "core-js/library/fn/promise": 24 }], 10: [function (e, t, r) {
      t.exports = { "default": e("core-js/library/fn/symbol"), __esModule: !0 };
    }, { "core-js/library/fn/symbol": 25 }], 11: [function (e, t, r) {
      "use strict";
      r.__esModule = !0, r["default"] = function (e, t) {
        if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
      };
    }, {}], 12: [function (e, t, r) {
      "use strict";
      function n(e) {
        return e && e.__esModule ? e : { "default": e };
      }r.__esModule = !0;var o = e("../core-js/object/define-property"),
          i = n(o);r["default"] = function () {
        function e(e, t) {
          for (var r = 0; r < t.length; r++) {
            var n = t[r];n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), (0, i["default"])(e, n.key, n);
          }
        }return function (t, r, n) {
          return r && e(t.prototype, r), n && e(t, n), t;
        };
      }();
    }, { "../core-js/object/define-property": 4 }], 13: [function (e, t, r) {
      "use strict";
      var n = e("babel-runtime/core-js/object/get-own-property-descriptor")["default"];r["default"] = function (e, t, r) {
        for (var o = !0; o;) {
          var i = e,
              s = t,
              a = r;o = !1, null === i && (i = Function.prototype);var c = n(i, s);if (void 0 !== c) {
            if ("value" in c) return c.value;var u = c.get;if (void 0 === u) return;return u.call(a);
          }var l = Object.getPrototypeOf(i);if (null === l) return;e = l, t = s, r = a, o = !0, c = l = void 0;
        }
      }, r.__esModule = !0;
    }, { "babel-runtime/core-js/object/get-own-property-descriptor": 5 }], 14: [function (e, t, r) {
      "use strict";
      var n = e("babel-runtime/core-js/object/create")["default"],
          o = e("babel-runtime/core-js/object/set-prototype-of")["default"];r["default"] = function (e, t) {
        if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function, not " + (typeof t === "undefined" ? "undefined" : _typeof(t)));e.prototype = n(t && t.prototype, { constructor: { value: e, enumerable: !1, writable: !0, configurable: !0 } }), t && (o ? o(e, t) : e.__proto__ = t);
      }, r.__esModule = !0;
    }, { "babel-runtime/core-js/object/create": 3, "babel-runtime/core-js/object/set-prototype-of": 8 }], 15: [function (e, t, r) {
      "use strict";
      function n(e) {
        return e && e.__esModule ? e : { "default": e };
      }r.__esModule = !0;var o = e("../helpers/typeof"),
          i = n(o);r["default"] = function (e, t) {
        if (!e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return !t || "object" !== ("undefined" == typeof t ? "undefined" : (0, i["default"])(t)) && "function" != typeof t ? e : t;
      };
    }, { "../helpers/typeof": 16 }], 16: [function (e, t, r) {
      "use strict";
      var n = e("babel-runtime/core-js/symbol")["default"];r["default"] = function (e) {
        return e && e.constructor === n ? "symbol" : typeof e === "undefined" ? "undefined" : _typeof(e);
      }, r.__esModule = !0;
    }, { "babel-runtime/core-js/symbol": 10 }], 17: [function (e, t, r) {
      var n = e("../../modules/$.core");t.exports = function (e) {
        return (n.JSON && n.JSON.stringify || JSON.stringify).apply(JSON, arguments);
      };
    }, { "../../modules/$.core": 31 }], 18: [function (e, t, r) {
      var n = e("../../modules/$");t.exports = function (e, t) {
        return n.create(e, t);
      };
    }, { "../../modules/$": 56 }], 19: [function (e, t, r) {
      var n = e("../../modules/$");t.exports = function (e, t, r) {
        return n.setDesc(e, t, r);
      };
    }, { "../../modules/$": 56 }], 20: [function (e, t, r) {
      var n = e("../../modules/$");e("../../modules/es6.object.get-own-property-descriptor"), t.exports = function (e, t) {
        return n.getDesc(e, t);
      };
    }, { "../../modules/$": 56, "../../modules/es6.object.get-own-property-descriptor": 81 }], 21: [function (e, t, r) {
      e("../../modules/es6.object.get-prototype-of"), t.exports = e("../../modules/$.core").Object.getPrototypeOf;
    }, { "../../modules/$.core": 31, "../../modules/es6.object.get-prototype-of": 82 }], 22: [function (e, t, r) {
      e("../../modules/es6.object.keys"), t.exports = e("../../modules/$.core").Object.keys;
    }, { "../../modules/$.core": 31, "../../modules/es6.object.keys": 83 }], 23: [function (e, t, r) {
      e("../../modules/es6.object.set-prototype-of"), t.exports = e("../../modules/$.core").Object.setPrototypeOf;
    }, { "../../modules/$.core": 31, "../../modules/es6.object.set-prototype-of": 84 }], 24: [function (e, t, r) {
      e("../modules/es6.object.to-string"), e("../modules/es6.string.iterator"), e("../modules/web.dom.iterable"), e("../modules/es6.promise"), t.exports = e("../modules/$.core").Promise;
    }, { "../modules/$.core": 31, "../modules/es6.object.to-string": 85, "../modules/es6.promise": 86, "../modules/es6.string.iterator": 87, "../modules/web.dom.iterable": 89 }], 25: [function (e, t, r) {
      e("../../modules/es6.symbol"), e("../../modules/es6.object.to-string"), t.exports = e("../../modules/$.core").Symbol;
    }, { "../../modules/$.core": 31, "../../modules/es6.object.to-string": 85, "../../modules/es6.symbol": 88 }], 26: [function (e, t, r) {
      t.exports = function (e) {
        if ("function" != typeof e) throw TypeError(e + " is not a function!");return e;
      };
    }, {}], 27: [function (e, t, r) {
      t.exports = function () {};
    }, {}], 28: [function (e, t, r) {
      var n = e("./$.is-object");t.exports = function (e) {
        if (!n(e)) throw TypeError(e + " is not an object!");return e;
      };
    }, { "./$.is-object": 49 }], 29: [function (e, t, r) {
      var n = e("./$.cof"),
          o = e("./$.wks")("toStringTag"),
          i = "Arguments" == n(function () {
        return arguments;
      }());t.exports = function (e) {
        var t, r, s;return void 0 === e ? "Undefined" : null === e ? "Null" : "string" == typeof (r = (t = Object(e))[o]) ? r : i ? n(t) : "Object" == (s = n(t)) && "function" == typeof t.callee ? "Arguments" : s;
      };
    }, { "./$.cof": 30, "./$.wks": 78 }], 30: [function (e, t, r) {
      var n = {}.toString;t.exports = function (e) {
        return n.call(e).slice(8, -1);
      };
    }, {}], 31: [function (e, t, r) {
      var n = t.exports = { version: "1.2.6" };"number" == typeof __e && (__e = n);
    }, {}], 32: [function (e, t, r) {
      var n = e("./$.a-function");t.exports = function (e, t, r) {
        if (n(e), void 0 === t) return e;switch (r) {case 1:
            return function (r) {
              return e.call(t, r);
            };case 2:
            return function (r, n) {
              return e.call(t, r, n);
            };case 3:
            return function (r, n, o) {
              return e.call(t, r, n, o);
            };}return function () {
          return e.apply(t, arguments);
        };
      };
    }, { "./$.a-function": 26 }], 33: [function (e, t, r) {
      t.exports = function (e) {
        if (void 0 == e) throw TypeError("Can't call method on  " + e);return e;
      };
    }, {}], 34: [function (e, t, r) {
      t.exports = !e("./$.fails")(function () {
        return 7 != Object.defineProperty({}, "a", { get: function get() {
            return 7;
          } }).a;
      });
    }, { "./$.fails": 38 }], 35: [function (e, t, r) {
      var n = e("./$.is-object"),
          o = e("./$.global").document,
          i = n(o) && n(o.createElement);t.exports = function (e) {
        return i ? o.createElement(e) : {};
      };
    }, { "./$.global": 41, "./$.is-object": 49 }], 36: [function (e, t, r) {
      var n = e("./$");t.exports = function (e) {
        var t = n.getKeys(e),
            r = n.getSymbols;if (r) for (var o, i = r(e), s = n.isEnum, a = 0; i.length > a;) {
          s.call(e, o = i[a++]) && t.push(o);
        }return t;
      };
    }, { "./$": 56 }], 37: [function (e, t, r) {
      var n = e("./$.global"),
          o = e("./$.core"),
          i = e("./$.ctx"),
          s = "prototype",
          a = function a(e, t, r) {
        var c,
            u,
            l,
            f = e & a.F,
            d = e & a.G,
            p = e & a.S,
            b = e & a.P,
            h = e & a.B,
            v = e & a.W,
            y = d ? o : o[t] || (o[t] = {}),
            _ = d ? n : p ? n[t] : (n[t] || {})[s];d && (r = t);for (c in r) {
          u = !f && _ && c in _, u && c in y || (l = u ? _[c] : r[c], y[c] = d && "function" != typeof _[c] ? r[c] : h && u ? i(l, n) : v && _[c] == l ? function (e) {
            var t = function t(_t) {
              return this instanceof e ? new e(_t) : e(_t);
            };return t[s] = e[s], t;
          }(l) : b && "function" == typeof l ? i(Function.call, l) : l, b && ((y[s] || (y[s] = {}))[c] = l));
        }
      };a.F = 1, a.G = 2, a.S = 4, a.P = 8, a.B = 16, a.W = 32, t.exports = a;
    }, { "./$.core": 31, "./$.ctx": 32, "./$.global": 41 }], 38: [function (e, t, r) {
      t.exports = function (e) {
        try {
          return !!e();
        } catch (t) {
          return !0;
        }
      };
    }, {}], 39: [function (e, t, r) {
      var n = e("./$.ctx"),
          o = e("./$.iter-call"),
          i = e("./$.is-array-iter"),
          s = e("./$.an-object"),
          a = e("./$.to-length"),
          c = e("./core.get-iterator-method");t.exports = function (e, t, r, u) {
        var l,
            f,
            d,
            p = c(e),
            b = n(r, u, t ? 2 : 1),
            h = 0;if ("function" != typeof p) throw TypeError(e + " is not iterable!");if (i(p)) for (l = a(e.length); l > h; h++) {
          t ? b(s(f = e[h])[0], f[1]) : b(e[h]);
        } else for (d = p.call(e); !(f = d.next()).done;) {
          o(d, b, f.value, t);
        }
      };
    }, { "./$.an-object": 28, "./$.ctx": 32, "./$.is-array-iter": 47, "./$.iter-call": 50, "./$.to-length": 75, "./core.get-iterator-method": 79 }], 40: [function (e, t, r) {
      var n = e("./$.to-iobject"),
          o = e("./$").getNames,
          i = {}.toString,
          s = "object" == (typeof window === "undefined" ? "undefined" : _typeof(window)) && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [],
          a = function a(e) {
        try {
          return o(e);
        } catch (t) {
          return s.slice();
        }
      };t.exports.get = function (e) {
        return s && "[object Window]" == i.call(e) ? a(e) : o(n(e));
      };
    }, { "./$": 56, "./$.to-iobject": 74 }], 41: [function (e, t, r) {
      var n = t.exports = "undefined" != typeof window && window.Math == Math ? window : "undefined" != typeof self && self.Math == Math ? self : Function("return this")();"number" == typeof __g && (__g = n);
    }, {}], 42: [function (e, t, r) {
      var n = {}.hasOwnProperty;t.exports = function (e, t) {
        return n.call(e, t);
      };
    }, {}], 43: [function (e, t, r) {
      var n = e("./$"),
          o = e("./$.property-desc");t.exports = e("./$.descriptors") ? function (e, t, r) {
        return n.setDesc(e, t, o(1, r));
      } : function (e, t, r) {
        return e[t] = r, e;
      };
    }, { "./$": 56, "./$.descriptors": 34, "./$.property-desc": 61 }], 44: [function (e, t, r) {
      t.exports = e("./$.global").document && document.documentElement;
    }, { "./$.global": 41 }], 45: [function (e, t, r) {
      t.exports = function (e, t, r) {
        var n = void 0 === r;switch (t.length) {case 0:
            return n ? e() : e.call(r);case 1:
            return n ? e(t[0]) : e.call(r, t[0]);case 2:
            return n ? e(t[0], t[1]) : e.call(r, t[0], t[1]);case 3:
            return n ? e(t[0], t[1], t[2]) : e.call(r, t[0], t[1], t[2]);case 4:
            return n ? e(t[0], t[1], t[2], t[3]) : e.call(r, t[0], t[1], t[2], t[3]);}return e.apply(r, t);
      };
    }, {}], 46: [function (e, t, r) {
      var n = e("./$.cof");t.exports = Object("z").propertyIsEnumerable(0) ? Object : function (e) {
        return "String" == n(e) ? e.split("") : Object(e);
      };
    }, { "./$.cof": 30 }], 47: [function (e, t, r) {
      var n = e("./$.iterators"),
          o = e("./$.wks")("iterator"),
          i = Array.prototype;t.exports = function (e) {
        return void 0 !== e && (n.Array === e || i[o] === e);
      };
    }, { "./$.iterators": 55, "./$.wks": 78 }], 48: [function (e, t, r) {
      var n = e("./$.cof");t.exports = Array.isArray || function (e) {
        return "Array" == n(e);
      };
    }, { "./$.cof": 30 }], 49: [function (e, t, r) {
      t.exports = function (e) {
        return "object" == (typeof e === "undefined" ? "undefined" : _typeof(e)) ? null !== e : "function" == typeof e;
      };
    }, {}], 50: [function (e, t, r) {
      var n = e("./$.an-object");t.exports = function (e, t, r, o) {
        try {
          return o ? t(n(r)[0], r[1]) : t(r);
        } catch (i) {
          var s = e["return"];throw void 0 !== s && n(s.call(e)), i;
        }
      };
    }, { "./$.an-object": 28 }], 51: [function (e, t, r) {
      "use strict";
      var n = e("./$"),
          o = e("./$.property-desc"),
          i = e("./$.set-to-string-tag"),
          s = {};e("./$.hide")(s, e("./$.wks")("iterator"), function () {
        return this;
      }), t.exports = function (e, t, r) {
        e.prototype = n.create(s, { next: o(1, r) }), i(e, t + " Iterator");
      };
    }, { "./$": 56, "./$.hide": 43, "./$.property-desc": 61, "./$.set-to-string-tag": 67, "./$.wks": 78 }], 52: [function (e, t, r) {
      "use strict";
      var n = e("./$.library"),
          o = e("./$.export"),
          i = e("./$.redefine"),
          s = e("./$.hide"),
          a = e("./$.has"),
          c = e("./$.iterators"),
          u = e("./$.iter-create"),
          l = e("./$.set-to-string-tag"),
          f = e("./$").getProto,
          d = e("./$.wks")("iterator"),
          p = !([].keys && "next" in [].keys()),
          b = "@@iterator",
          h = "keys",
          v = "values",
          y = function y() {
        return this;
      };t.exports = function (e, t, r, _, g, m, j) {
        u(r, t, _);var $,
            O,
            w = function w(e) {
          if (!p && e in E) return E[e];switch (e) {case h:
              return function () {
                return new r(this, e);
              };case v:
              return function () {
                return new r(this, e);
              };}return function () {
            return new r(this, e);
          };
        },
            k = t + " Iterator",
            x = g == v,
            C = !1,
            E = e.prototype,
            S = E[d] || E[b] || g && E[g],
            T = S || w(g);if (S) {
          var M = f(T.call(new e()));l(M, k, !0), !n && a(E, b) && s(M, d, y), x && S.name !== v && (C = !0, T = function T() {
            return S.call(this);
          });
        }if (n && !j || !p && !C && E[d] || s(E, d, T), c[t] = T, c[k] = y, g) if ($ = { values: x ? T : w(v), keys: m ? T : w(h), entries: x ? w("entries") : T }, j) for (O in $) {
          O in E || i(E, O, $[O]);
        } else o(o.P + o.F * (p || C), t, $);return $;
      };
    }, { "./$": 56, "./$.export": 37, "./$.has": 42, "./$.hide": 43, "./$.iter-create": 51, "./$.iterators": 55, "./$.library": 58, "./$.redefine": 63, "./$.set-to-string-tag": 67, "./$.wks": 78 }], 53: [function (e, t, r) {
      var n = e("./$.wks")("iterator"),
          o = !1;try {
        var i = [7][n]();i["return"] = function () {
          o = !0;
        }, Array.from(i, function () {
          throw 2;
        });
      } catch (s) {}t.exports = function (e, t) {
        if (!t && !o) return !1;var r = !1;try {
          var i = [7],
              s = i[n]();s.next = function () {
            r = !0;
          }, i[n] = function () {
            return s;
          }, e(i);
        } catch (a) {}return r;
      };
    }, { "./$.wks": 78 }], 54: [function (e, t, r) {
      t.exports = function (e, t) {
        return { value: t, done: !!e };
      };
    }, {}], 55: [function (e, t, r) {
      t.exports = {};
    }, {}], 56: [function (e, t, r) {
      var n = Object;t.exports = { create: n.create, getProto: n.getPrototypeOf, isEnum: {}.propertyIsEnumerable, getDesc: n.getOwnPropertyDescriptor, setDesc: n.defineProperty, setDescs: n.defineProperties, getKeys: n.keys, getNames: n.getOwnPropertyNames, getSymbols: n.getOwnPropertySymbols, each: [].forEach };
    }, {}], 57: [function (e, t, r) {
      var n = e("./$"),
          o = e("./$.to-iobject");t.exports = function (e, t) {
        for (var r, i = o(e), s = n.getKeys(i), a = s.length, c = 0; a > c;) {
          if (i[r = s[c++]] === t) return r;
        }
      };
    }, { "./$": 56, "./$.to-iobject": 74 }], 58: [function (e, t, r) {
      t.exports = !0;
    }, {}], 59: [function (e, t, r) {
      var n,
          o,
          i,
          s = e("./$.global"),
          a = e("./$.task").set,
          c = s.MutationObserver || s.WebKitMutationObserver,
          u = s.process,
          l = s.Promise,
          f = "process" == e("./$.cof")(u),
          d = function d() {
        var e, t, r;for (f && (e = u.domain) && (u.domain = null, e.exit()); n;) {
          t = n.domain, r = n.fn, t && t.enter(), r(), t && t.exit(), n = n.next;
        }o = void 0, e && e.enter();
      };if (f) i = function i() {
        u.nextTick(d);
      };else if (c) {
        var p = 1,
            b = document.createTextNode("");new c(d).observe(b, { characterData: !0 }), i = function i() {
          b.data = p = -p;
        };
      } else i = l && l.resolve ? function () {
        l.resolve().then(d);
      } : function () {
        a.call(s, d);
      };t.exports = function (e) {
        var t = { fn: e, next: void 0, domain: f && u.domain };o && (o.next = t), n || (n = t, i()), o = t;
      };
    }, { "./$.cof": 30, "./$.global": 41, "./$.task": 72 }], 60: [function (e, t, r) {
      var n = e("./$.export"),
          o = e("./$.core"),
          i = e("./$.fails");t.exports = function (e, t) {
        var r = (o.Object || {})[e] || Object[e],
            s = {};s[e] = t(r), n(n.S + n.F * i(function () {
          r(1);
        }), "Object", s);
      };
    }, { "./$.core": 31, "./$.export": 37, "./$.fails": 38 }], 61: [function (e, t, r) {
      t.exports = function (e, t) {
        return { enumerable: !(1 & e), configurable: !(2 & e), writable: !(4 & e), value: t };
      };
    }, {}], 62: [function (e, t, r) {
      var n = e("./$.redefine");t.exports = function (e, t) {
        for (var r in t) {
          n(e, r, t[r]);
        }return e;
      };
    }, { "./$.redefine": 63 }], 63: [function (e, t, r) {
      t.exports = e("./$.hide");
    }, { "./$.hide": 43 }], 64: [function (e, t, r) {
      t.exports = Object.is || function (e, t) {
        return e === t ? 0 !== e || 1 / e === 1 / t : e != e && t != t;
      };
    }, {}], 65: [function (e, t, r) {
      var n = e("./$").getDesc,
          o = e("./$.is-object"),
          i = e("./$.an-object"),
          s = function s(e, t) {
        if (i(e), !o(t) && null !== t) throw TypeError(t + ": can't set as prototype!");
      };t.exports = { set: Object.setPrototypeOf || ("__proto__" in {} ? function (t, r, o) {
          try {
            o = e("./$.ctx")(Function.call, n(Object.prototype, "__proto__").set, 2), o(t, []), r = !(t instanceof Array);
          } catch (i) {
            r = !0;
          }return function (e, t) {
            return s(e, t), r ? e.__proto__ = t : o(e, t), e;
          };
        }({}, !1) : void 0), check: s };
    }, { "./$": 56, "./$.an-object": 28, "./$.ctx": 32, "./$.is-object": 49 }], 66: [function (e, t, r) {
      "use strict";
      var n = e("./$.core"),
          o = e("./$"),
          i = e("./$.descriptors"),
          s = e("./$.wks")("species");t.exports = function (e) {
        var t = n[e];i && t && !t[s] && o.setDesc(t, s, { configurable: !0, get: function get() {
            return this;
          } });
      };
    }, { "./$": 56, "./$.core": 31, "./$.descriptors": 34, "./$.wks": 78 }], 67: [function (e, t, r) {
      var n = e("./$").setDesc,
          o = e("./$.has"),
          i = e("./$.wks")("toStringTag");t.exports = function (e, t, r) {
        e && !o(e = r ? e : e.prototype, i) && n(e, i, { configurable: !0, value: t });
      };
    }, { "./$": 56, "./$.has": 42, "./$.wks": 78 }], 68: [function (e, t, r) {
      var n = e("./$.global"),
          o = "__core-js_shared__",
          i = n[o] || (n[o] = {});t.exports = function (e) {
        return i[e] || (i[e] = {});
      };
    }, { "./$.global": 41 }], 69: [function (e, t, r) {
      var n = e("./$.an-object"),
          o = e("./$.a-function"),
          i = e("./$.wks")("species");t.exports = function (e, t) {
        var r,
            s = n(e).constructor;return void 0 === s || void 0 == (r = n(s)[i]) ? t : o(r);
      };
    }, { "./$.a-function": 26, "./$.an-object": 28, "./$.wks": 78 }], 70: [function (e, t, r) {
      t.exports = function (e, t, r) {
        if (!(e instanceof t)) throw TypeError(r + ": use the 'new' operator!");return e;
      };
    }, {}], 71: [function (e, t, r) {
      var n = e("./$.to-integer"),
          o = e("./$.defined");t.exports = function (e) {
        return function (t, r) {
          var i,
              s,
              a = String(o(t)),
              c = n(r),
              u = a.length;return 0 > c || c >= u ? e ? "" : void 0 : (i = a.charCodeAt(c), 55296 > i || i > 56319 || c + 1 === u || (s = a.charCodeAt(c + 1)) < 56320 || s > 57343 ? e ? a.charAt(c) : i : e ? a.slice(c, c + 2) : (i - 55296 << 10) + (s - 56320) + 65536);
        };
      };
    }, { "./$.defined": 33, "./$.to-integer": 73 }], 72: [function (e, t, r) {
      var n,
          o,
          i,
          s = e("./$.ctx"),
          a = e("./$.invoke"),
          c = e("./$.html"),
          u = e("./$.dom-create"),
          l = e("./$.global"),
          f = l.process,
          d = l.setImmediate,
          p = l.clearImmediate,
          b = l.MessageChannel,
          h = 0,
          v = {},
          y = "onreadystatechange",
          _ = function _() {
        var e = +this;if (v.hasOwnProperty(e)) {
          var t = v[e];delete v[e], t();
        }
      },
          g = function g(e) {
        _.call(e.data);
      };d && p || (d = function d(e) {
        for (var t = [], r = 1; arguments.length > r;) {
          t.push(arguments[r++]);
        }return v[++h] = function () {
          a("function" == typeof e ? e : Function(e), t);
        }, n(h), h;
      }, p = function p(e) {
        delete v[e];
      }, "process" == e("./$.cof")(f) ? n = function n(e) {
        f.nextTick(s(_, e, 1));
      } : b ? (o = new b(), i = o.port2, o.port1.onmessage = g, n = s(i.postMessage, i, 1)) : l.addEventListener && "function" == typeof postMessage && !l.importScripts ? (n = function n(e) {
        l.postMessage(e + "", "*");
      }, l.addEventListener("message", g, !1)) : n = y in u("script") ? function (e) {
        c.appendChild(u("script"))[y] = function () {
          c.removeChild(this), _.call(e);
        };
      } : function (e) {
        setTimeout(s(_, e, 1), 0);
      }), t.exports = { set: d, clear: p };
    }, { "./$.cof": 30, "./$.ctx": 32, "./$.dom-create": 35, "./$.global": 41, "./$.html": 44, "./$.invoke": 45 }], 73: [function (e, t, r) {
      var n = Math.ceil,
          o = Math.floor;t.exports = function (e) {
        return isNaN(e = +e) ? 0 : (e > 0 ? o : n)(e);
      };
    }, {}], 74: [function (e, t, r) {
      var n = e("./$.iobject"),
          o = e("./$.defined");t.exports = function (e) {
        return n(o(e));
      };
    }, { "./$.defined": 33, "./$.iobject": 46 }], 75: [function (e, t, r) {
      var n = e("./$.to-integer"),
          o = Math.min;t.exports = function (e) {
        return e > 0 ? o(n(e), 9007199254740991) : 0;
      };
    }, { "./$.to-integer": 73 }], 76: [function (e, t, r) {
      var n = e("./$.defined");t.exports = function (e) {
        return Object(n(e));
      };
    }, { "./$.defined": 33 }], 77: [function (e, t, r) {
      var n = 0,
          o = Math.random();t.exports = function (e) {
        return "Symbol(".concat(void 0 === e ? "" : e, ")_", (++n + o).toString(36));
      };
    }, {}], 78: [function (e, t, r) {
      var n = e("./$.shared")("wks"),
          o = e("./$.uid"),
          i = e("./$.global").Symbol;t.exports = function (e) {
        return n[e] || (n[e] = i && i[e] || (i || o)("Symbol." + e));
      };
    }, { "./$.global": 41, "./$.shared": 68, "./$.uid": 77 }], 79: [function (e, t, r) {
      var n = e("./$.classof"),
          o = e("./$.wks")("iterator"),
          i = e("./$.iterators");t.exports = e("./$.core").getIteratorMethod = function (e) {
        return void 0 != e ? e[o] || e["@@iterator"] || i[n(e)] : void 0;
      };
    }, { "./$.classof": 29, "./$.core": 31, "./$.iterators": 55, "./$.wks": 78 }], 80: [function (e, t, r) {
      "use strict";
      var n = e("./$.add-to-unscopables"),
          o = e("./$.iter-step"),
          i = e("./$.iterators"),
          s = e("./$.to-iobject");t.exports = e("./$.iter-define")(Array, "Array", function (e, t) {
        this._t = s(e), this._i = 0, this._k = t;
      }, function () {
        var e = this._t,
            t = this._k,
            r = this._i++;return !e || r >= e.length ? (this._t = void 0, o(1)) : "keys" == t ? o(0, r) : "values" == t ? o(0, e[r]) : o(0, [r, e[r]]);
      }, "values"), i.Arguments = i.Array, n("keys"), n("values"), n("entries");
    }, { "./$.add-to-unscopables": 27, "./$.iter-define": 52, "./$.iter-step": 54, "./$.iterators": 55, "./$.to-iobject": 74 }], 81: [function (e, t, r) {
      var n = e("./$.to-iobject");e("./$.object-sap")("getOwnPropertyDescriptor", function (e) {
        return function (t, r) {
          return e(n(t), r);
        };
      });
    }, { "./$.object-sap": 60, "./$.to-iobject": 74 }], 82: [function (e, t, r) {
      var n = e("./$.to-object");e("./$.object-sap")("getPrototypeOf", function (e) {
        return function (t) {
          return e(n(t));
        };
      });
    }, { "./$.object-sap": 60, "./$.to-object": 76 }], 83: [function (e, t, r) {
      var n = e("./$.to-object");e("./$.object-sap")("keys", function (e) {
        return function (t) {
          return e(n(t));
        };
      });
    }, { "./$.object-sap": 60, "./$.to-object": 76 }], 84: [function (e, t, r) {
      var n = e("./$.export");n(n.S, "Object", { setPrototypeOf: e("./$.set-proto").set });
    }, { "./$.export": 37, "./$.set-proto": 65 }], 85: [function (e, t, r) {}, {}], 86: [function (e, t, r) {
      "use strict";
      var n,
          o = e("./$"),
          i = e("./$.library"),
          s = e("./$.global"),
          a = e("./$.ctx"),
          c = e("./$.classof"),
          u = e("./$.export"),
          l = e("./$.is-object"),
          f = e("./$.an-object"),
          d = e("./$.a-function"),
          p = e("./$.strict-new"),
          b = e("./$.for-of"),
          h = e("./$.set-proto").set,
          v = e("./$.same-value"),
          y = e("./$.wks")("species"),
          _ = e("./$.species-constructor"),
          g = e("./$.microtask"),
          m = "Promise",
          j = s.process,
          $ = "process" == c(j),
          _O = s[m],
          w = function w(e) {
        var t = new _O(function () {});return e && (t.constructor = Object), _O.resolve(t) === t;
      },
          k = function () {
        function t(e) {
          var r = new _O(e);return h(r, t.prototype), r;
        }var r = !1;try {
          if (r = _O && _O.resolve && w(), h(t, _O), t.prototype = o.create(_O.prototype, { constructor: { value: t } }), t.resolve(5).then(function () {}) instanceof t || (r = !1), r && e("./$.descriptors")) {
            var n = !1;_O.resolve(o.setDesc({}, "then", { get: function get() {
                n = !0;
              } })), r = n;
          }
        } catch (i) {
          r = !1;
        }return r;
      }(),
          x = function x(e, t) {
        return i && e === _O && t === n ? !0 : v(e, t);
      },
          C = function C(e) {
        var t = f(e)[y];return void 0 != t ? t : e;
      },
          E = function E(e) {
        var t;return l(e) && "function" == typeof (t = e.then) ? t : !1;
      },
          S = function S(e) {
        var t, r;this.promise = new e(function (e, n) {
          if (void 0 !== t || void 0 !== r) throw TypeError("Bad Promise constructor");t = e, r = n;
        }), this.resolve = d(t), this.reject = d(r);
      },
          T = function T(e) {
        try {
          e();
        } catch (t) {
          return { error: t };
        }
      },
          M = function M(e, t) {
        if (!e.n) {
          e.n = !0;var r = e.c;g(function () {
            for (var n = e.v, o = 1 == e.s, i = 0, a = function a(t) {
              var r,
                  i,
                  s = o ? t.ok : t.fail,
                  a = t.resolve,
                  c = t.reject;try {
                s ? (o || (e.h = !0), r = s === !0 ? n : s(n), r === t.promise ? c(TypeError("Promise-chain cycle")) : (i = E(r)) ? i.call(r, a, c) : a(r)) : c(n);
              } catch (u) {
                c(u);
              }
            }; r.length > i;) {
              a(r[i++]);
            }r.length = 0, e.n = !1, t && setTimeout(function () {
              var t,
                  r,
                  o = e.p;N(o) && ($ ? j.emit("unhandledRejection", n, o) : (t = s.onunhandledrejection) ? t({ promise: o, reason: n }) : (r = s.console) && r.error && r.error("Unhandled promise rejection", n)), e.a = void 0;
            }, 1);
          });
        }
      },
          N = function N(e) {
        var t,
            r = e._d,
            n = r.a || r.c,
            o = 0;if (r.h) return !1;for (; n.length > o;) {
          if (t = n[o++], t.fail || !N(t.promise)) return !1;
        }return !0;
      },
          R = function R(e) {
        var t = this;t.d || (t.d = !0, t = t.r || t, t.v = e, t.s = 2, t.a = t.c.slice(), M(t, !0));
      },
          D = function D(e) {
        var t,
            r = this;if (!r.d) {
          r.d = !0, r = r.r || r;try {
            if (r.p === e) throw TypeError("Promise can't be resolved itself");(t = E(e)) ? g(function () {
              var n = { r: r, d: !1 };try {
                t.call(e, a(D, n, 1), a(R, n, 1));
              } catch (o) {
                R.call(n, o);
              }
            }) : (r.v = e, r.s = 1, M(r, !1));
          } catch (n) {
            R.call({ r: r, d: !1 }, n);
          }
        }
      };k || (_O = function O(e) {
        d(e);var t = this._d = { p: p(this, _O, m), c: [], a: void 0, s: 0, d: !1, v: void 0, h: !1, n: !1 };try {
          e(a(D, t, 1), a(R, t, 1));
        } catch (r) {
          R.call(t, r);
        }
      }, e("./$.redefine-all")(_O.prototype, { then: function then(e, t) {
          var r = new S(_(this, _O)),
              n = r.promise,
              o = this._d;return r.ok = "function" == typeof e ? e : !0, r.fail = "function" == typeof t && t, o.c.push(r), o.a && o.a.push(r), o.s && M(o, !1), n;
        }, "catch": function _catch(e) {
          return this.then(void 0, e);
        } })), u(u.G + u.W + u.F * !k, { Promise: _O }), e("./$.set-to-string-tag")(_O, m), e("./$.set-species")(m), n = e("./$.core")[m], u(u.S + u.F * !k, m, { reject: function reject(e) {
          var t = new S(this),
              r = t.reject;return r(e), t.promise;
        } }), u(u.S + u.F * (!k || w(!0)), m, { resolve: function resolve(e) {
          if (e instanceof _O && x(e.constructor, this)) return e;var t = new S(this),
              r = t.resolve;return r(e), t.promise;
        } }), u(u.S + u.F * !(k && e("./$.iter-detect")(function (e) {
        _O.all(e)["catch"](function () {});
      })), m, { all: function all(e) {
          var t = C(this),
              r = new S(t),
              n = r.resolve,
              i = r.reject,
              s = [],
              a = T(function () {
            b(e, !1, s.push, s);var r = s.length,
                a = Array(r);r ? o.each.call(s, function (e, o) {
              var s = !1;t.resolve(e).then(function (e) {
                s || (s = !0, a[o] = e, --r || n(a));
              }, i);
            }) : n(a);
          });return a && i(a.error), r.promise;
        }, race: function race(e) {
          var t = C(this),
              r = new S(t),
              n = r.reject,
              o = T(function () {
            b(e, !1, function (e) {
              t.resolve(e).then(r.resolve, n);
            });
          });return o && n(o.error), r.promise;
        } });
    }, { "./$": 56, "./$.a-function": 26, "./$.an-object": 28, "./$.classof": 29, "./$.core": 31, "./$.ctx": 32, "./$.descriptors": 34, "./$.export": 37, "./$.for-of": 39, "./$.global": 41, "./$.is-object": 49, "./$.iter-detect": 53, "./$.library": 58, "./$.microtask": 59, "./$.redefine-all": 62, "./$.same-value": 64, "./$.set-proto": 65, "./$.set-species": 66, "./$.set-to-string-tag": 67, "./$.species-constructor": 69, "./$.strict-new": 70, "./$.wks": 78 }], 87: [function (e, t, r) {
      "use strict";
      var n = e("./$.string-at")(!0);e("./$.iter-define")(String, "String", function (e) {
        this._t = String(e), this._i = 0;
      }, function () {
        var e,
            t = this._t,
            r = this._i;return r >= t.length ? { value: void 0, done: !0 } : (e = n(t, r), this._i += e.length, { value: e, done: !1 });
      });
    }, { "./$.iter-define": 52, "./$.string-at": 71 }], 88: [function (e, t, r) {
      "use strict";
      var n = e("./$"),
          o = e("./$.global"),
          i = e("./$.has"),
          s = e("./$.descriptors"),
          a = e("./$.export"),
          c = e("./$.redefine"),
          u = e("./$.fails"),
          l = e("./$.shared"),
          f = e("./$.set-to-string-tag"),
          d = e("./$.uid"),
          p = e("./$.wks"),
          b = e("./$.keyof"),
          h = e("./$.get-names"),
          v = e("./$.enum-keys"),
          y = e("./$.is-array"),
          _ = e("./$.an-object"),
          g = e("./$.to-iobject"),
          m = e("./$.property-desc"),
          j = n.getDesc,
          $ = n.setDesc,
          O = n.create,
          w = h.get,
          k = o.Symbol,
          x = o.JSON,
          C = x && x.stringify,
          E = !1,
          S = p("_hidden"),
          T = n.isEnum,
          M = l("symbol-registry"),
          N = l("symbols"),
          R = "function" == typeof k,
          D = Object.prototype,
          P = s && u(function () {
        return 7 != O($({}, "a", { get: function get() {
            return $(this, "a", { value: 7 }).a;
          } })).a;
      }) ? function (e, t, r) {
        var n = j(D, t);n && delete D[t], $(e, t, r), n && e !== D && $(D, t, n);
      } : $,
          A = function A(e) {
        var t = N[e] = O(k.prototype);return t._k = e, s && E && P(D, e, { configurable: !0, set: function set(t) {
            i(this, S) && i(this[S], e) && (this[S][e] = !1), P(this, e, m(1, t));
          } }), t;
      },
          L = function L(e) {
        return "symbol" == (typeof e === "undefined" ? "undefined" : _typeof(e));
      },
          I = function I(e, t, r) {
        return r && i(N, t) ? (r.enumerable ? (i(e, S) && e[S][t] && (e[S][t] = !1), r = O(r, { enumerable: m(0, !1) })) : (i(e, S) || $(e, S, m(1, {})), e[S][t] = !0), P(e, t, r)) : $(e, t, r);
      },
          F = function F(e, t) {
        _(e);for (var r, n = v(t = g(t)), o = 0, i = n.length; i > o;) {
          I(e, r = n[o++], t[r]);
        }return e;
      },
          V = function V(e, t) {
        return void 0 === t ? O(e) : F(O(e), t);
      },
          z = function z(e) {
        var t = T.call(this, e);return t || !i(this, e) || !i(N, e) || i(this, S) && this[S][e] ? t : !0;
      },
          U = function U(e, t) {
        var r = j(e = g(e), t);return !r || !i(N, t) || i(e, S) && e[S][t] || (r.enumerable = !0), r;
      },
          H = function H(e) {
        for (var t, r = w(g(e)), n = [], o = 0; r.length > o;) {
          i(N, t = r[o++]) || t == S || n.push(t);
        }return n;
      },
          B = function B(e) {
        for (var t, r = w(g(e)), n = [], o = 0; r.length > o;) {
          i(N, t = r[o++]) && n.push(N[t]);
        }return n;
      },
          J = function J(e) {
        if (void 0 !== e && !L(e)) {
          for (var t, r, n = [e], o = 1, i = arguments; i.length > o;) {
            n.push(i[o++]);
          }return t = n[1], "function" == typeof t && (r = t), !r && y(t) || (t = function t(e, _t2) {
            return r && (_t2 = r.call(this, e, _t2)), L(_t2) ? void 0 : _t2;
          }), n[1] = t, C.apply(x, n);
        }
      },
          W = u(function () {
        var e = k();return "[null]" != C([e]) || "{}" != C({ a: e }) || "{}" != C(Object(e));
      });R || (k = function k() {
        if (L(this)) throw TypeError("Symbol is not a constructor");return A(d(arguments.length > 0 ? arguments[0] : void 0));
      }, c(k.prototype, "toString", function () {
        return this._k;
      }), L = function L(e) {
        return e instanceof k;
      }, n.create = V, n.isEnum = z, n.getDesc = U, n.setDesc = I, n.setDescs = F, n.getNames = h.get = H, n.getSymbols = B, s && !e("./$.library") && c(D, "propertyIsEnumerable", z, !0));var Y = { "for": function _for(e) {
          return i(M, e += "") ? M[e] : M[e] = k(e);
        }, keyFor: function keyFor(e) {
          return b(M, e);
        }, useSetter: function useSetter() {
          E = !0;
        }, useSimple: function useSimple() {
          E = !1;
        } };n.each.call("hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","), function (e) {
        var t = p(e);Y[e] = R ? t : A(t);
      }), E = !0, a(a.G + a.W, { Symbol: k }), a(a.S, "Symbol", Y), a(a.S + a.F * !R, "Object", { create: V, defineProperty: I, defineProperties: F, getOwnPropertyDescriptor: U, getOwnPropertyNames: H, getOwnPropertySymbols: B }), x && a(a.S + a.F * (!R || W), "JSON", { stringify: J }), f(k, "Symbol"), f(Math, "Math", !0), f(o.JSON, "JSON", !0);
    }, { "./$": 56, "./$.an-object": 28, "./$.descriptors": 34, "./$.enum-keys": 36, "./$.export": 37, "./$.fails": 38, "./$.get-names": 40, "./$.global": 41, "./$.has": 42, "./$.is-array": 48, "./$.keyof": 57, "./$.library": 58, "./$.property-desc": 61, "./$.redefine": 63, "./$.set-to-string-tag": 67, "./$.shared": 68, "./$.to-iobject": 74, "./$.uid": 77, "./$.wks": 78 }], 89: [function (e, t, r) {
      e("./es6.array.iterator");var n = e("./$.iterators");n.NodeList = n.HTMLCollection = n.Array;
    }, { "./$.iterators": 55, "./es6.array.iterator": 80 }], 90: [function (e, t, r) {
      window.MutationObserver = window.MutationObserver || window.WebKitMutationObserver || function (e) {
        function t(e) {
          this.g = [], this.k = e;
        }function r(e) {
          !function r() {
            var n = e.takeRecords();n.length && e.k(n, e), e.f = setTimeout(r, t._period);
          }();
        }function n(t) {
          var r,
              n = { type: null, target: null, addedNodes: [], removedNodes: [], previousSibling: null, nextSibling: null, attributeName: null, attributeNamespace: null, oldValue: null };for (r in t) {
            n[r] !== e && t[r] !== e && (n[r] = t[r]);
          }return n;
        }function o(e, t) {
          var r = a(e, t);return function (n) {
            var o,
                c = n.length;t.a && r.a && i(n, e, r.a, t.d), (t.b || t.e) && (o = s(n, e, r, t)), (o || n.length !== c) && (r = a(e, t));
          };
        }function i(t, r, o, i) {
          for (var s, a, c = {}, u = r.attributes, l = u.length; l--;) {
            s = u[l], a = s.name, i && i[a] === e || (s.value !== o[a] && t.push(n({ type: "attributes", target: r, attributeName: a, oldValue: o[a], attributeNamespace: s.namespaceURI })), c[a] = !0);
          }for (a in o) {
            c[a] || t.push(n({ target: r, type: "attributes", attributeName: a, oldValue: o[a] }));
          }
        }function s(t, r, o, s) {
          function a(e, r, o, a, c) {
            var l = e.length - 1;c = - ~((l - c) / 2);for (var f, d, p; p = e.pop();) {
              f = o[p.h], d = a[p.i], s.b && c && Math.abs(p.h - p.i) >= l && (t.push(n({ type: "childList", target: r, addedNodes: [f], removedNodes: [f], nextSibling: f.nextSibling, previousSibling: f.previousSibling })), c--), s.a && d.a && i(t, f, d.a, s.d), s.c && 3 === f.nodeType && f.nodeValue !== d.c && t.push(n({ type: "characterData", target: f })), s.e && u(f, d);
            }
          }function u(r, o) {
            for (var d, p, b, h, v, y = r.childNodes, _ = o.b, g = y.length, m = _ ? _.length : 0, j = 0, $ = 0, O = 0; g > $ || m > O;) {
              h = y[$], v = (b = _[O]) && b.j, h === v ? (s.a && b.a && i(t, h, b.a, s.d), s.c && b.c !== e && h.nodeValue !== b.c && t.push(n({ type: "characterData", target: h })), p && a(p, r, y, _, j), s.e && (h.childNodes.length || b.b && b.b.length) && u(h, b), $++, O++) : (l = !0, d || (d = {}, p = []), h && (d[b = c(h)] || (d[b] = !0, -1 === (b = f(_, h, O, "j")) ? s.b && (t.push(n({ type: "childList", target: r, addedNodes: [h], nextSibling: h.nextSibling, previousSibling: h.previousSibling })), j++) : p.push({ h: $, i: b })), $++), v && v !== y[$] && (d[b = c(v)] || (d[b] = !0, -1 === (b = f(y, v, $)) ? s.b && (t.push(n({ type: "childList", target: o.j, removedNodes: [v], nextSibling: _[O + 1], previousSibling: _[O - 1] })), j--) : p.push({ h: b, i: O })), O++));
            }p && a(p, r, y, _, j);
          }var l;return u(r, o), l;
        }function a(e, t) {
          var r = !0;return function n(e) {
            var o = { j: e };return !t.c || 3 !== e.nodeType && 8 !== e.nodeType ? (t.a && r && 1 === e.nodeType && (o.a = l(e.attributes, function (e, r) {
              return t.d && !t.d[r.name] || (e[r.name] = r.value), e;
            })), r && (t.b || t.c || t.a && t.e) && (o.b = u(e.childNodes, n)), r = t.e) : o.c = e.nodeValue, o;
          }(e);
        }function c(e) {
          try {
            return e.id || (e.mo_id = e.mo_id || d++);
          } catch (t) {
            try {
              return e.nodeValue;
            } catch (r) {
              return d++;
            }
          }
        }function u(e, t) {
          for (var r = [], n = 0; n < e.length; n++) {
            r[n] = t(e[n], n, e);
          }return r;
        }function l(e, t) {
          for (var r = {}, n = 0; n < e.length; n++) {
            r = t(r, e[n], n, e);
          }return r;
        }function f(e, t, r, n) {
          for (; r < e.length; r++) {
            if ((n ? e[r][n] : e[r]) === t) return r;
          }return -1;
        }t._period = 30, t.prototype = { observe: function observe(e, t) {
            for (var n = { a: !!(t.attributes || t.attributeFilter || t.attributeOldValue), b: !!t.childList, e: !!t.subtree, c: !(!t.characterData && !t.characterDataOldValue) }, i = this.g, s = 0; s < i.length; s++) {
              i[s].m === e && i.splice(s, 1);
            }t.attributeFilter && (n.d = l(t.attributeFilter, function (e, t) {
              return e[t] = !0, e;
            })), i.push({ m: e, l: o(e, n) }), this.f || r(this);
          }, takeRecords: function takeRecords() {
            for (var e = [], t = this.g, r = 0; r < t.length; r++) {
              t[r].l(e);
            }return e;
          }, disconnect: function disconnect() {
            this.g = [], clearTimeout(this.f), this.f = null;
          } };var d = 1;return t;
      }(void 0);
    }, {}], 91: [function (e, t, r) {
      Object.observe || function (e, t, r, n) {
        "use strict";
        var o,
            i,
            s = ["add", "update", "delete", "reconfigure", "setPrototype", "preventExtensions"],
            a = t.isArray || function (e) {
          return function (t) {
            return "[object Array]" === e.call(t);
          };
        }(e.prototype.toString),
            c = t.prototype.indexOf ? t.indexOf || function (e, r, n) {
          return t.prototype.indexOf.call(e, r, n);
        } : function (e, t, r) {
          for (var n = r || 0; n < e.length; n++) {
            if (e[n] === t) return n;
          }return -1;
        },
            u = r.Map !== n && Map.prototype.forEach ? function () {
          return new Map();
        } : function () {
          var e = [],
              t = [];return { size: 0, has: function has(t) {
              return c(e, t) > -1;
            }, get: function get(r) {
              return t[c(e, r)];
            }, set: function set(r, n) {
              var o = c(e, r);-1 === o ? (e.push(r), t.push(n), this.size++) : t[o] = n;
            }, "delete": function _delete(r) {
              var n = c(e, r);n > -1 && (e.splice(n, 1), t.splice(n, 1), this.size--);
            }, forEach: function forEach(r) {
              for (var n = 0; n < e.length; n++) {
                r.call(arguments[1], t[n], e[n], this);
              }
            } };
        },
            l = e.getOwnPropertyNames ? function () {
          var t = e.getOwnPropertyNames;try {
            arguments.callee;
          } catch (r) {
            var n = (t(c).join(" ") + " ").replace(/prototype |length |name /g, "").slice(0, -1).split(" ");n.length && (t = function t(_t3) {
              var r = e.getOwnPropertyNames(_t3);if ("function" == typeof _t3) for (var o, i = 0; i < n.length;) {
                (o = c(r, n[i++])) > -1 && r.splice(o, 1);
              }return r;
            });
          }return t;
        }() : function (t) {
          var r,
              n,
              o = [];if ("hasOwnProperty" in t) for (r in t) {
            t.hasOwnProperty(r) && o.push(r);
          } else {
            n = e.hasOwnProperty;for (r in t) {
              n.call(t, r) && o.push(r);
            }
          }return a(t) && o.push("length"), o;
        },
            f = e.getPrototypeOf,
            d = e.defineProperties && e.getOwnPropertyDescriptor,
            p = r.requestAnimationFrame || r.webkitRequestAnimationFrame || function () {
          var e = +new Date(),
              t = e;return function (r) {
            return setTimeout(function () {
              r((t = +new Date()) - e);
            }, 17);
          };
        }(),
            b = function b(e, t, r) {
          var n = o.get(e);n ? (v(n, e), m(e, n, t, r)) : (n = h(e), m(e, n, t, r), 1 === o.size && p(y));
        },
            h = function h(t, r) {
          var n,
              i = l(t),
              s = [],
              a = 0,
              r = { handlers: u(), frozen: e.isFrozen ? e.isFrozen(t) : !1, extensible: e.isExtensible ? e.isExtensible(t) : !0, proto: f && f(t), properties: i, values: s, notifier: g(t, r) };if (d) for (n = r.descriptors = []; a < i.length;) {
            n[a] = d(t, i[a]), s[a] = t[i[a++]];
          } else for (; a < i.length;) {
            s[a] = t[i[a++]];
          }return o.set(t, r), r;
        },
            v = function () {
          var t = d ? function (e, t, r, n, o) {
            var i = t.properties[r],
                s = e[i],
                a = t.values[r],
                c = t.descriptors[r];"value" in o && (a === s ? 0 === a && 1 / a !== 1 / s : a === a || s === s) && (j(e, t, { name: i, type: "update", object: e, oldValue: a }, n), t.values[r] = s), !c.configurable || o.configurable && o.writable === c.writable && o.enumerable === c.enumerable && o.get === c.get && o.set === c.set || (j(e, t, { name: i, type: "reconfigure", object: e, oldValue: a }, n), t.descriptors[r] = o);
          } : function (e, t, r, n) {
            var o = t.properties[r],
                i = e[o],
                s = t.values[r];(s === i ? 0 === s && 1 / s !== 1 / i : s === s || i === i) && (j(e, t, { name: o, type: "update", object: e, oldValue: s }, n), t.values[r] = i);
          },
              r = d ? function (e, r, n, o, i) {
            for (var s, a = r.length; n && a--;) {
              null !== r[a] && (s = d(e, r[a]), n--, s ? t(e, o, a, i, s) : (j(e, o, { name: r[a], type: "delete", object: e, oldValue: o.values[a] }, i), o.properties.splice(a, 1), o.values.splice(a, 1), o.descriptors.splice(a, 1)));
            }
          } : function (e, t, r, n, o) {
            for (var i = t.length; r && i--;) {
              null !== t[i] && (j(e, n, { name: t[i], type: "delete", object: e, oldValue: n.values[i] }, o), n.properties.splice(i, 1), n.values.splice(i, 1), r--);
            }
          };return function (n, o, i) {
            if (n.handlers.size && !n.frozen) {
              var s,
                  a,
                  u,
                  p,
                  b,
                  h,
                  v,
                  y,
                  _ = n.values,
                  g = n.descriptors,
                  m = 0;if (n.extensible) {
                if (s = n.properties.slice(), a = s.length, u = l(o), g) {
                  for (; m < u.length;) {
                    b = u[m++], p = c(s, b), y = d(o, b), -1 === p ? (j(o, n, { name: b, type: "add", object: o }, i), n.properties.push(b), _.push(o[b]), g.push(y)) : (s[p] = null, a--, t(o, n, p, i, y));
                  }r(o, s, a, n, i), e.isExtensible(o) || (n.extensible = !1, j(o, n, { type: "preventExtensions", object: o }, i), n.frozen = e.isFrozen(o));
                } else {
                  for (; m < u.length;) {
                    b = u[m++], p = c(s, b), h = o[b], -1 === p ? (j(o, n, { name: b, type: "add", object: o }, i), n.properties.push(b), _.push(h)) : (s[p] = null, a--, t(o, n, p, i));
                  }r(o, s, a, n, i);
                }
              } else if (!n.frozen) {
                for (; m < s.length; m++) {
                  b = s[m], t(o, n, m, i, d(o, b));
                }e.isFrozen(o) && (n.frozen = !0);
              }f && (v = f(o), v !== n.proto && (j(o, n, { type: "setPrototype", name: "__proto__", object: o, oldValue: n.proto }), n.proto = v));
            }
          };
        }(),
            y = function y() {
          o.size && (o.forEach(v), i.forEach(_), p(y));
        },
            _ = function _(e, t) {
          var r = e.changeRecords;r.length && (e.changeRecords = [], t(r));
        },
            g = function g(e, t) {
          return arguments.length < 2 && (t = o.get(e)), t && t.notifier || { notify: function notify(t) {
              t.type;var r = o.get(e);if (r) {
                var n,
                    i = { object: e };for (n in t) {
                  "object" !== n && (i[n] = t[n]);
                }j(e, r, i);
              }
            }, performChange: function performChange(t, r) {
              if ("string" != typeof t) throw new TypeError("Invalid non-string changeType");if ("function" != typeof r) throw new TypeError("Cannot perform non-function");var i,
                  s,
                  a = o.get(e),
                  c = arguments[2],
                  u = c === n ? r() : r.call(c);if (a && v(a, e, t), a && u && "object" == (typeof u === "undefined" ? "undefined" : _typeof(u))) {
                s = { object: e, type: t };for (i in u) {
                  "object" !== i && "type" !== i && (s[i] = u[i]);
                }j(e, a, s);
              }
            } };
        },
            m = function m(e, t, r, n) {
          var o = i.get(r);o || i.set(r, o = { observed: u(), changeRecords: [] }), o.observed.set(e, { acceptList: n.slice(), data: t }), t.handlers.set(r, o);
        },
            j = function j(e, t, r, n) {
          t.handlers.forEach(function (t) {
            var o = t.observed.get(e).acceptList;("string" != typeof n || -1 === c(o, n)) && c(o, r.type) > -1 && t.changeRecords.push(r);
          });
        };o = u(), i = u(), e.observe = function (t, r, o) {
          if (!t || "object" != (typeof t === "undefined" ? "undefined" : _typeof(t)) && "function" != typeof t) throw new TypeError("Object.observe cannot observe non-object");if ("function" != typeof r) throw new TypeError("Object.observe cannot deliver to non-function");if (e.isFrozen && e.isFrozen(r)) throw new TypeError("Object.observe cannot deliver to a frozen function object");if (o === n) o = s;else if (!o || "object" != (typeof o === "undefined" ? "undefined" : _typeof(o))) throw new TypeError("Third argument to Object.observe must be an array of strings.");return b(t, r, o), t;
        }, e.unobserve = function (e, t) {
          if (null === e || "object" != (typeof e === "undefined" ? "undefined" : _typeof(e)) && "function" != typeof e) throw new TypeError("Object.unobserve cannot unobserve non-object");if ("function" != typeof t) throw new TypeError("Object.unobserve cannot deliver to non-function");var r,
              n = i.get(t);return n && (r = n.observed.get(e)) && (n.observed.forEach(function (e, t) {
            v(e.data, t);
          }), p(function () {
            _(n, t);
          }), 1 === n.observed.size && n.observed.has(e) ? i["delete"](t) : n.observed["delete"](e), 1 === r.data.handlers.size ? o["delete"](e) : r.data.handlers["delete"](t)), e;
        }, e.getNotifier = function (t) {
          if (null === t || "object" != (typeof t === "undefined" ? "undefined" : _typeof(t)) && "function" != typeof t) throw new TypeError("Object.getNotifier cannot getNotifier non-object");return e.isFrozen && e.isFrozen(t) ? null : g(t);
        }, e.deliverChangeRecords = function (e) {
          if ("function" != typeof e) throw new TypeError("Object.deliverChangeRecords cannot deliver to non-function");var t = i.get(e);t && (t.observed.forEach(function (e, t) {
            v(e.data, t);
          }), _(t, e));
        };
      }(Object, Array, this);
    }, {}], 92: [function (e, t, r) {
      "use strict";
      function n(e) {
        return e && e.__esModule ? e : { "default": e };
      }Object.defineProperty(r, "__esModule", { value: !0 }), r.DataObjectObserver = r.DataObjectReporter = r.Syncher = void 0, e("mutationobserver-shim"), e("object.observe"), e("array.observe");var o = e("./syncher/Syncher"),
          i = n(o),
          s = e("./syncher/DataObjectReporter"),
          a = n(s),
          c = e("./syncher/DataObjectObserver"),
          u = n(c);r.Syncher = i["default"], r.DataObjectReporter = a["default"], r.DataObjectObserver = u["default"];
    }, { "./syncher/DataObjectObserver": 95, "./syncher/DataObjectReporter": 96, "./syncher/Syncher": 99, "array.observe": 1, "mutationobserver-shim": 90, "object.observe": 91 }], 93: [function (e, t, r) {
      "use strict";
      function n(e) {
        return e && e.__esModule ? e : { "default": e };
      }Object.defineProperty(r, "__esModule", { value: !0 });var o = e("babel-runtime/core-js/promise"),
          i = n(o),
          s = e("babel-runtime/core-js/object/keys"),
          a = n(s),
          c = e("babel-runtime/helpers/classCallCheck"),
          u = n(c),
          l = e("babel-runtime/helpers/createClass"),
          f = n(l),
          d = e("./SyncObject"),
          p = n(d),
          b = e("./DataObjectChild"),
          h = n(b),
          v = e("../utils/utils.js"),
          y = function () {
        function e(t, r, n, o, i, s) {
          (0, u["default"])(this, e);var a = this;a._syncher = t, a._url = r, a._schema = n, a._status = o, a._syncObj = new p["default"](i), a._childrens = s, a._version = 0, a._childId = 0, a._childrenObjects = {}, a._childrenListeners = [], a._owner = t._owner, a._bus = t._bus;
        }return (0, f["default"])(e, [{ key: "_allocateListeners", value: function value() {
            var e = this,
                t = this,
                r = t._url + "/children/";t._childrens && t._childrens.forEach(function (n) {
              var o = r + n,
                  i = t._bus.addListener(o, function (r) {
                if (r.from !== e._owner) switch (console.log("DataObject-Children-RCV: ", r), r.type) {case "create":
                    t._onChildCreate(r);break;case "delete":
                    console.log(r);break;default:
                    t._changeChildren(r);}
              });t._childrenListeners.push(i);
            });
          } }, { key: "_releaseListeners", value: function value() {
            var e = this;e._childrenListeners.forEach(function (e) {
              e.remove();
            }), (0, a["default"])(e._childrenObjects).forEach(function (t) {
              e._childrenObjects[t]._releaseListeners();
            });
          } }, { key: "pause", value: function value() {
            throw "Not implemented";
          } }, { key: "resume", value: function value() {
            throw "Not implemented";
          } }, { key: "stop", value: function value() {
            throw "Not implemented";
          } }, { key: "addChild", value: function value(e, t) {
            var r = this;r._childId++;var n = r._owner + "#" + r._childId,
                o = r._url + "/children/" + e,
                s = { type: "create", from: r._owner, to: o, body: { resource: n, value: t } };return new i["default"](function (e) {
              var i = r._bus.postMessage(s);console.log("create-reporter-child( " + r._owner + " ): ", s);var a = new h["default"](r, n, t, r._owner, i);a.onChange(function (e) {
                r._onChange(e, { path: o, childId: n });
              }), r._childrenObjects[n] = a, e(a);
            });
          } }, { key: "onAddChild", value: function value(e) {
            this._onAddChildrenHandler = e;
          } }, { key: "_onChildCreate", value: function value(e) {
            var t = this,
                r = e.body.resource;console.log("create-observer-child( " + t._owner + " ): ", e);var n = new h["default"](t, r, e.body.value);t._childrenObjects[r] = n, setTimeout(function () {
              t._bus.postMessage({ id: e.id, type: "response", from: e.to, to: e.from, body: { code: 200, source: t._owner } });
            });var o = { type: e.type, from: e.from, url: e.to, value: e.body.value, childId: r, identity: e.body.identity };t._onAddChildrenHandler && (console.log("ADD-CHILDREN-EVENT: ", o), t._onAddChildrenHandler(o));
          } }, { key: "_onChange", value: function value(e, t) {
            var r = this;if (r._version++, "on" === r._status) {
              var n = { type: "update", from: r._url, to: r._url + "/changes", body: { version: r._version, source: r._owner, attribute: e.field } };e.oType === d.ObjectType.OBJECT ? e.cType !== d.ChangeType.REMOVE && (n.body.value = e.data) : (n.body.attributeType = e.oType, n.body.value = e.data, e.cType !== d.ChangeType.UPDATE && (n.body.operation = e.cType)), t && (n.to = t.path, n.body.resource = t.childId), r._bus.postMessage(n);
            }
          } }, { key: "_changeObject", value: function value(e, t) {
            var r = this;if (r._version + 1 === t.body.version) {
              r._version++;var n = t.body.attribute,
                  o = (0, v.deepClone)(t.body.value),
                  i = e.findBefore(n);if (t.body.attributeType === d.ObjectType.ARRAY) {
                if (t.body.operation === d.ChangeType.ADD) {
                  var s = i.obj,
                      a = i.last;Array.prototype.splice.apply(s, [a, 0].concat(o));
                } else if (t.body.operation === d.ChangeType.REMOVE) {
                  var c = i.obj,
                      u = i.last;c.splice(u, o);
                } else i.obj[i.last] = o;
              } else t.body.value ? i.obj[i.last] = o : delete i.obj[i.last];
            } else console.log("UNSYNCHRONIZED VERSION: (data => " + r._version + ", msg => " + t.body.version + ")");
          } }, { key: "_changeChildren", value: function value(e) {
            var t = this;console.log("Change children: ", t._owner, e);var r = e.body.resource,
                n = t._childrenObjects[r];n ? t._changeObject(n._syncObj, e) : console.log("No children found for: ", r);
          } }, { key: "url", get: function get() {
            return this._url;
          } }, { key: "schema", get: function get() {
            return this._schema;
          } }, { key: "status", get: function get() {
            return this._status;
          } }, { key: "data", get: function get() {
            return this._syncObj.data;
          } }, { key: "childrens", get: function get() {
            return this._childrenObjects;
          } }]), e;
      }();r["default"] = y, t.exports = r["default"];
    }, { "../utils/utils.js": 100, "./DataObjectChild": 94, "./SyncObject": 98, "babel-runtime/core-js/object/keys": 7, "babel-runtime/core-js/promise": 9, "babel-runtime/helpers/classCallCheck": 11, "babel-runtime/helpers/createClass": 12 }], 94: [function (e, t, r) {
      "use strict";
      function n(e) {
        return e && e.__esModule ? e : { "default": e };
      }Object.defineProperty(r, "__esModule", { value: !0 });var o = e("babel-runtime/helpers/classCallCheck"),
          i = n(o),
          s = e("babel-runtime/helpers/createClass"),
          a = n(s),
          c = e("./SyncObject"),
          u = n(c),
          l = function () {
        function e(t, r, n, o, s) {
          (0, i["default"])(this, e);var a = this;a._parent = t, a._childId = r, a._owner = o, a._msgId = s, a._syncObj = new u["default"](n), a._bus = t._bus, a._allocateListeners();
        }return (0, a["default"])(e, [{ key: "_allocateListeners", value: function value() {
            var e = this;e._owner && (e._listener = e._bus.addListener(e._owner, function (t) {
              "response" === t.type && t.id === e._msgId && (console.log("DataObjectChild.onResponse:", t), e._onResponse(t));
            }));
          } }, { key: "_releaseListeners", value: function value() {
            var e = this;e._listener && e._listener.remove();
          } }, { key: "delete", value: function value() {
            var e = this;delete e._parent._children[e._childId], e._releaseListeners();
          } }, { key: "onChange", value: function value(e) {
            this._syncObj.observe(function (t) {
              e(t);
            });
          } }, { key: "onResponse", value: function value(e) {
            this._onResponseHandler = e;
          } }, { key: "_onResponse", value: function value(e) {
            var t = this,
                r = { type: e.type, url: e.body.source, code: e.body.code };t._onResponseHandler && t._onResponseHandler(r);
          } }, { key: "childId", get: function get() {
            return this._childId;
          } }, { key: "data", get: function get() {
            return this._syncObj.data;
          } }]), e;
      }();r["default"] = l, t.exports = r["default"];
    }, { "./SyncObject": 98, "babel-runtime/helpers/classCallCheck": 11, "babel-runtime/helpers/createClass": 12 }], 95: [function (e, t, r) {
      "use strict";
      function n(e) {
        return e && e.__esModule ? e : { "default": e };
      }Object.defineProperty(r, "__esModule", { value: !0 });var o = e("babel-runtime/core-js/object/keys"),
          i = n(o),
          s = e("babel-runtime/core-js/object/get-prototype-of"),
          a = n(s),
          c = e("babel-runtime/helpers/classCallCheck"),
          u = n(c),
          l = e("babel-runtime/helpers/createClass"),
          f = n(l),
          d = e("babel-runtime/helpers/possibleConstructorReturn"),
          p = n(d),
          b = e("babel-runtime/helpers/get"),
          h = n(b),
          v = e("babel-runtime/helpers/inherits"),
          y = n(v),
          _ = e("./DataObject"),
          g = n(_),
          m = e("./DataObjectChild"),
          j = n(m),
          $ = { ANY: "any", START: "start", EXACT: "exact" },
          O = function (e) {
        function t(e, r, n, o, s, c, l) {
          (0, u["default"])(this, t);var f = (0, p["default"])(this, (0, a["default"])(t).call(this, e, r, n, o, s.data, c)),
              d = f;return d._version = l, d._filters = {}, d._syncObj.observe(function (e) {
            d._onFilter(e);
          }), (0, i["default"])(s.childrens).forEach(function (e) {
            var t = s.childrens[e];d._childrenObjects[e] = new j["default"](d, e, t);
          }), d._allocateListeners(), f;
        }return (0, y["default"])(t, e), (0, f["default"])(t, [{ key: "_allocateListeners", value: function value() {
            (0, h["default"])((0, a["default"])(t.prototype), "_allocateListeners", this).call(this);var e = this;e._changeListener = e._bus.addListener(e._url + "/changes", function (t) {
              "update" === t.type && (console.log("DataObjectObserver-" + e._url + "-RCV: ", t), e._changeObject(e._syncObj, t));
            });
          } }, { key: "_releaseListeners", value: function value() {
            (0, h["default"])((0, a["default"])(t.prototype), "_releaseListeners", this).call(this);var e = this;e._changeListener.remove();
          } }, { key: "delete", value: function value() {
            var e = this;e._releaseListeners(), delete e._syncher._observers[e._url];
          } }, { key: "unsubscribe", value: function value() {
            var e = this,
                t = { type: "unsubscribe", from: e._owner, to: e._syncher._subURL, body: { resource: e._url } };e._bus.postMessage(t, function (t) {
              console.log("DataObjectObserver-UNSUBSCRIBE: ", t), 200 === t.body.code && (e._releaseListeners(), delete e._syncher._observers[e._url]);
            });
          } }, { key: "onChange", value: function value(e, t) {
            var r = e,
                n = { type: $.EXACT, callback: t },
                o = e.indexOf("*");o === e.length - 1 && (0 === o ? n.type = $.ANY : (n.type = $.START, r = e.substr(0, e.length - 1))), this._filters[r] = n;
          } }, { key: "_onFilter", value: function value(e) {
            var t = this;(0, i["default"])(t._filters).forEach(function (r) {
              var n = t._filters[r];n.type === $.ANY ? n.callback(e) : n.type === $.START ? 0 === e.field.indexOf(r) && n.callback(e) : n.type === $.EXACT && e.field === r && n.callback(e);
            });
          } }]), t;
      }(g["default"]);r["default"] = O, t.exports = r["default"];
    }, { "./DataObject": 93, "./DataObjectChild": 94, "babel-runtime/core-js/object/get-prototype-of": 6, "babel-runtime/core-js/object/keys": 7, "babel-runtime/helpers/classCallCheck": 11, "babel-runtime/helpers/createClass": 12, "babel-runtime/helpers/get": 13, "babel-runtime/helpers/inherits": 14, "babel-runtime/helpers/possibleConstructorReturn": 15 }], 96: [function (e, t, r) {
      "use strict";
      function n(e) {
        return e && e.__esModule ? e : { "default": e };
      }Object.defineProperty(r, "__esModule", { value: !0 });var o = e("babel-runtime/core-js/object/keys"),
          i = n(o),
          s = e("babel-runtime/core-js/object/get-prototype-of"),
          a = n(s),
          c = e("babel-runtime/helpers/classCallCheck"),
          u = n(c),
          l = e("babel-runtime/helpers/createClass"),
          f = n(l),
          d = e("babel-runtime/helpers/possibleConstructorReturn"),
          p = n(d),
          b = e("babel-runtime/helpers/get"),
          h = n(b),
          v = e("babel-runtime/helpers/inherits"),
          y = n(v),
          _ = e("./DataObject"),
          g = n(_),
          m = e("../utils/utils.js"),
          j = function (e) {
        function t(e, r, n, o, i, s) {
          (0, u["default"])(this, t);var c = (0, p["default"])(this, (0, a["default"])(t).call(this, e, r, n, o, i, s)),
              l = c;return l._subscriptions = {}, l._syncObj.observe(function (e) {
            console.log("DataObjectReporter-" + r + "-SEND: ", e), l._onChange(e);
          }), l._allocateListeners(), c;
        }return (0, y["default"])(t, e), (0, f["default"])(t, [{ key: "_allocateListeners", value: function value() {
            (0, h["default"])((0, a["default"])(t.prototype), "_allocateListeners", this).call(this);var e = this;e._responseListener = e._bus.addListener(e._url, function (t) {
              "response" === t.type && e._onResponse(t);
            });
          } }, { key: "_releaseListeners", value: function value() {
            (0, h["default"])((0, a["default"])(t.prototype), "_releaseListeners", this).call(this);var e = this;e._responseListener.remove();
          } }, { key: "inviteObservers", value: function value(e) {
            var t = this,
                r = { type: "create", from: t._syncher._owner, to: t._syncher._subURL, body: { resource: t._url, schema: t._schema, value: t._syncObj.data, authorise: e } };t._bus.postMessage(r);
          } }, { key: "delete", value: function value() {
            var e = this,
                t = { type: "delete", from: e._owner, to: e._syncher._subURL, body: { resource: e._url } };e._bus.postMessage(t, function (t) {
              console.log("DataObjectReporter-DELETE: ", t), 200 === t.body.code && (e._releaseListeners(), delete e._syncher._reporters[e._url]);
            });
          } }, { key: "onSubscription", value: function value(e) {
            this._onSubscriptionHandler = e;
          } }, { key: "onResponse", value: function value(e) {
            this._onResponseHandler = e;
          } }, { key: "_onForward", value: function value(e) {
            var t = this;switch (console.log("DataObjectReporter-RCV: ", e), e.body.type) {case "subscribe":
                t._onSubscribe(e);break;case "unsubscribe":
                t._onUnSubscribe(e);}
          } }, { key: "_onSubscribe", value: function value(e) {
            var t = this,
                r = e.body.from,
                n = { type: e.body.type, url: r, accept: function accept() {
                var n = { url: r, status: "on" };t._subscriptions[r] = n;var o = {};return (0, i["default"])(t._childrenObjects).forEach(function (e) {
                  var r = t._childrenObjects[e].data;o[e] = (0, m.deepClone)(r);
                }), t._bus.postMessage({ id: e.id, type: "response", from: e.to, to: e.from, body: { code: 200, schema: t._schema, version: t._version, value: { data: (0, m.deepClone)(t.data), childrens: o } } }), n;
              }, reject: function reject(r) {
                t._bus.postMessage({ id: e.id, type: "response", from: e.to, to: e.from, body: { code: 403, desc: r } });
              } };t._onSubscriptionHandler && (console.log("SUBSCRIPTION-EVENT: ", n), t._onSubscriptionHandler(n));
          } }, { key: "_onUnSubscribe", value: function value(e) {
            var t = this,
                r = e.body.from,
                n = t._subscriptions[r];delete t._subscriptions[r];var o = { type: e.body.type, url: r, object: n };t._onSubscriptionHandler && (console.log("UN-SUBSCRIPTION-EVENT: ", o), t._onSubscriptionHandler(o));
          } }, { key: "_onResponse", value: function value(e) {
            var t = this,
                r = { type: e.type, url: e.from, code: e.body.code };t._onResponseHandler && (console.log("RESPONSE-EVENT: ", r), t._onResponseHandler(r));
          } }, { key: "subscriptions", get: function get() {
            return this._subscriptions;
          } }]), t;
      }(g["default"]);r["default"] = j, t.exports = r["default"];
    }, { "../utils/utils.js": 100, "./DataObject": 93, "babel-runtime/core-js/object/get-prototype-of": 6, "babel-runtime/core-js/object/keys": 7, "babel-runtime/helpers/classCallCheck": 11, "babel-runtime/helpers/createClass": 12, "babel-runtime/helpers/get": 13, "babel-runtime/helpers/inherits": 14, "babel-runtime/helpers/possibleConstructorReturn": 15 }], 97: [function (e, t, r) {
      "use strict";
      function n(e) {
        return e && e.__esModule ? e : { "default": e };
      }Object.defineProperty(r, "__esModule", { value: !0 });var o = e("babel-runtime/helpers/classCallCheck"),
          i = n(o),
          s = e("babel-runtime/helpers/createClass"),
          a = n(s),
          c = function () {
        function e(t, r, n, o) {
          (0, i["default"])(this, e);var s = this;s._owner = t, s._url = r, s._bus = n, s._children = o, s._changes = [], s._allocateListeners();
        }return (0, a["default"])(e, [{ key: "_allocateListeners", value: function value() {
            var e = this;e._listener = e._bus.addListener(e._url, function (t) {
              console.log("DataProvisional-" + e._url + "-RCV: ", t), e._changes.push(t);
            });
          } }, { key: "_releaseListeners", value: function value() {
            var e = this;e._listener.remove();
          } }, { key: "apply", value: function value(e) {
            var t = this;t._changes.forEach(function (t) {
              e._changeObject(e._syncObj, t);
            });
          } }, { key: "children", get: function get() {
            return this._children;
          } }]), e;
      }();r["default"] = c, t.exports = r["default"];
    }, { "babel-runtime/helpers/classCallCheck": 11, "babel-runtime/helpers/createClass": 12 }], 98: [function (e, t, r) {
      "use strict";
      function n(e) {
        return e && e.__esModule ? e : { "default": e };
      }Object.defineProperty(r, "__esModule", { value: !0 }), r.ObjectType = r.ChangeType = void 0;var o = e("babel-runtime/core-js/object/keys"),
          i = n(o),
          s = e("babel-runtime/helpers/classCallCheck"),
          a = n(s),
          c = e("babel-runtime/helpers/createClass"),
          u = n(c),
          l = e("../utils/utils.js"),
          f = function () {
        function e(t) {
          (0, a["default"])(this, e);var r = this;r._observers = [], r._filters = {}, t ? r._data = (0, l.deepClone)(t) : r._data = {}, r._internalObserve(new d(), r._data);
        }return (0, u["default"])(e, [{ key: "observe", value: function value(e) {
            this._observers.push(e);
          } }, { key: "find", value: function value(e) {
            var t = e.split(".");return this._findWithSplit(t);
          } }, { key: "findBefore", value: function value(e) {
            var t = {},
                r = e.split(".");return t.last = r.pop(), t.obj = this._findWithSplit(r), t;
          } }, { key: "_findWithSplit", value: function value(e) {
            var t = this._data;return e.forEach(function (e) {
              t = t[e];
            }), t;
          } }, { key: "_fireEvent", value: function value(e) {
            this._observers.forEach(function (t) {
              t(e);
            });
          } }, { key: "_isObservable", value: function value(e) {
            return e.constructor === Object || e.constructor === Array;
          } }, { key: "_internalObserve", value: function value(e, t) {
            var r = this;if (r._isObservable(t)) {
              var n = function n(t) {
                r._onChanges(e, t);
              };if (t.constructor === Object) {
                Object.observe(t, n);for (var o in t) {
                  r._isObservable(t[o]) && r._internalObserve(e["new"](o), t[o]);
                }
              } else if (t.constructor === Array) {
                Array.observe(t, n);for (var i in t) {
                  if (r._isObservable(t[i])) {
                    var s = e["new"](new p(t[i], i));r._internalObserve(s, t[i]);
                  }
                }
              }
            }
          } }, { key: "_onChanges", value: function value(e, t) {
            var r = this;for (var n in t) {
              var o = t[n].object,
                  i = void 0;if (o.constructor === Object && (i = h.OBJECT), o.constructor === Array && (i = h.ARRAY), "splice" === t[n].type) !function () {
                var s = t[n].index,
                    a = e["new"]("" + s),
                    c = a.toString(),
                    u = t[n].removed.length;if (0 !== u) {
                  var f = t[n].removed;f.forEach(function (t, n) {
                    r._isObservable(t) && e.removeIndex(s + n);
                  }), r._fireEvent({ cType: b.REMOVE, oType: i, field: c, data: u });
                }var d = t[n].addedCount;if (0 !== d) {
                  var h = o.slice(s, s + d);h.forEach(function (t, n) {
                    if (r._isObservable(t)) {
                      var o = e["new"](new p(t, s + n));r._internalObserve(o, t);
                    }
                  }), r._fireEvent({ cType: b.ADD, oType: i, field: c, data: (0, l.deepClone)(h) });
                }s !== o.length - 1 && e.reIndexFrom(o);
              }();else {
                var s = e["new"](t[n].name),
                    a = s.toString();if (-1 !== a.indexOf("Symbol")) continue;var c = o[t[n].name];"update" === t[n].type && this._fireEvent({ cType: b.UPDATE, oType: i, field: a, data: (0, l.deepClone)(c) }), "add" === t[n].type && (this._internalObserve(s, c), this._fireEvent({ cType: b.ADD, oType: i, field: a, data: (0, l.deepClone)(c) })), "delete" === t[n].type && this._fireEvent({ cType: b.REMOVE, oType: i, field: a });
              }
            }
          } }, { key: "data", get: function get() {
            return this._data;
          } }]), e;
      }(),
          d = function () {
        function e() {
          (0, a["default"])(this, e), this._path = [], this._observables = {};
        }return (0, u["default"])(e, [{ key: "removeIndex", value: function value(e) {
            delete this._observables[e];
          } }, { key: "reIndexFrom", value: function value(e) {
            var t = this;(0, i["default"])(this._observables).forEach(function (r) {
              var n = t._observables[r],
                  o = e.indexOf(n.obj);n.idx != o && (n.idx = o, delete t._observables[r], t._observables[o] = n);
            });
          } }, { key: "new", value: function value(e) {
            e.constructor == p && (this._observables[e.idx] = e);var t = this.clone();return t._path.push(e), t;
          } }, { key: "clone", value: function value() {
            var t = new e();return this._path.forEach(function (e) {
              t._path.push(e);
            }), t;
          } }, { key: "toString", value: function value() {
            var e = "";return this._path.forEach(function (t, r) {
              0 === r ? e = t.toString() : e += "." + t.toString();
            }), e;
          } }]), e;
      }(),
          p = function () {
        function e(t, r) {
          (0, a["default"])(this, e), this.obj = t, this.idx = r;
        }return (0, u["default"])(e, [{ key: "toString", value: function value() {
            return this.idx.toString();
          } }]), e;
      }(),
          b = r.ChangeType = { UPDATE: "update", ADD: "add", REMOVE: "remove" },
          h = r.ObjectType = { OBJECT: "object", ARRAY: "array" };r["default"] = f;
    }, { "../utils/utils.js": 100, "babel-runtime/core-js/object/keys": 7, "babel-runtime/helpers/classCallCheck": 11, "babel-runtime/helpers/createClass": 12 }], 99: [function (e, t, r) {
      "use strict";
      function n(e) {
        return e && e.__esModule ? e : { "default": e };
      }Object.defineProperty(r, "__esModule", { value: !0 });var o = e("babel-runtime/core-js/promise"),
          i = n(o),
          s = e("babel-runtime/helpers/classCallCheck"),
          a = n(s),
          c = e("babel-runtime/helpers/createClass"),
          u = n(c),
          l = e("./DataObjectReporter"),
          f = n(l),
          d = e("./DataObjectObserver"),
          p = n(d),
          b = e("./DataProvisional"),
          h = n(b),
          v = function () {
        function e(t, r, n) {
          (0, a["default"])(this, e);var o = this;o._owner = t, o._bus = r, o._subURL = n.runtimeURL + "/sm", o._reporters = {}, o._observers = {}, o._provisionals = {}, r.addListener(t, function (e) {
            if (e.from !== t) switch (console.log("Syncher-RCV: ", e), e.type) {case "forward":
                o._onForward(e);break;case "create":
                o._onRemoteCreate(e);break;case "delete":
                o._onRemoteDelete(e);}
          });
        }return (0, u["default"])(e, [{ key: "create", value: function value(e, t, r) {
            var n = this;r.reporter = n._owner, r.schema = e;var o = { type: "create", from: n._owner, to: n._subURL, body: { schema: e, value: r, authorise: t } };return new i["default"](function (t, i) {
              n._bus.postMessage(o, function (o) {
                if (console.log("create-response: ", o), 200 === o.body.code) {
                  var s = o.body.resource,
                      a = new f["default"](n, s, e, "on", r, o.body.childrenResources);n._reporters[s] = a, t(a);
                } else i(o.body.desc);
              });
            });
          } }, { key: "subscribe", value: function value(e, t) {
            var r = this,
                n = { type: "subscribe", from: r._owner, to: r._subURL, body: { schema: e, resource: t } };return new i["default"](function (o, i) {
              r._bus.postMessage(n, function (n) {
                console.log("subscribe-response: ", n);var s = r._provisionals[t];if (delete r._provisionals[t], s && s._releaseListeners(), n.body.code < 200) s = new h["default"](r._owner, t, r._bus, n.body.childrenResources), r._provisionals[t] = s;else if (200 === n.body.code) {
                  var a = new p["default"](r, t, e, "on", n.body.value, s.children, n.body.version);r._observers[t] = a, o(a), s.apply(a);
                } else i(n.body.desc);
              });
            });
          } }, { key: "onNotification", value: function value(e) {
            this._onNotificationHandler = e;
          } }, { key: "_onForward", value: function value(e) {
            var t = this,
                r = t._reporters[e.body.to];r._onForward(e);
          } }, { key: "_onRemoteCreate", value: function value(e) {
            var t = this,
                r = e.from.slice(0, -13),
                n = { type: e.type, from: e.body.source, url: r, schema: e.body.schema, value: e.body.value, identity: e.body.identity, ack: function ack(r) {
                var n = 200;r && (n = r), t._bus.postMessage({ id: e.id, type: "response", from: e.to, to: e.from, body: { code: n } });
              } };t._onNotificationHandler && (console.log("NOTIFICATION-EVENT: ", n), t._onNotificationHandler(n));
          } }, { key: "_onRemoteDelete", value: function value(e) {
            var t = this,
                r = e.body.resource,
                n = t._observers[r];if (n) {
              var o = { type: e.type, url: r, identity: e.body.identity, ack: function ack(r) {
                  var o = 200;r && (o = r), 200 === o && n["delete"](), t._bus.postMessage({ id: e.id, type: "response", from: e.to, to: e.from, body: { code: o, source: t._owner } });
                } };t._onNotificationHandler && (console.log("NOTIFICATION-EVENT: ", o), t._onNotificationHandler(o));
            } else t._bus.postMessage({ id: e.id, type: "response", from: e.to, to: e.from, body: { code: 404, source: t._owner } });
          } }, { key: "owner", get: function get() {
            return this._owner;
          } }, { key: "reporters", get: function get() {
            return this._reporters;
          } }, { key: "observers", get: function get() {
            return this._observers;
          } }]), e;
      }();r["default"] = v, t.exports = r["default"];
    }, { "./DataObjectObserver": 95, "./DataObjectReporter": 96, "./DataProvisional": 97, "babel-runtime/core-js/promise": 9, "babel-runtime/helpers/classCallCheck": 11, "babel-runtime/helpers/createClass": 12 }], 100: [function (e, t, r) {
      "use strict";
      function n(e) {
        return e && e.__esModule ? e : { "default": e };
      }function o(e) {
        var t = /([a-zA-Z-]*):\/\/(?:\.)?([-a-zA-Z0-9@:%._\+~#=]{2,256})([-a-zA-Z0-9@:%._\+~#=\/]*)/gi,
            r = "$1,$2,$3",
            n = e.replace(t, r).split(",");n[0] === e && (n[0] = "https", n[1] = e);var o = { type: n[0], domain: n[1], identity: n[2] };return o;
      }function i(e) {
        return e ? JSON.parse((0, a["default"])(e)) : void 0;
      }Object.defineProperty(r, "__esModule", { value: !0 });var s = e("babel-runtime/core-js/json/stringify"),
          a = n(s);r.divideURL = o, r.deepClone = i;
    }, { "babel-runtime/core-js/json/stringify": 2 }] }, {}, [92])(92);
});

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],4:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.default = activate;

var _HypertyDiscovery = require('service-framework/dist/HypertyDiscovery');

var _HypertyDiscovery2 = _interopRequireDefault(_HypertyDiscovery);

var _Syncher = require('service-framework/dist/Syncher');

var _EventEmitter2 = require('./utils/EventEmitter');

var _EventEmitter3 = _interopRequireDefault(_EventEmitter2);

var _utils = require('./utils/utils');

var _communication = require('./hyperty-chat/communication');

var _participant = require('./hyperty-chat/participant');

var _participant2 = _interopRequireDefault(_participant);

var _Chat = require('./hyperty-chat/Chat');

var _Chat2 = _interopRequireDefault(_Chat);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Copyright 2016 PT Inovação e Sistemas SA
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Copyright 2016 INESC-ID
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Copyright 2016 QUOBIS NETWORKS SL
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Copyright 2016 ORANGE SA
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Copyright 2016 Deutsche Telekom AG
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Copyright 2016 Apizee
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Licensed under the Apache License, Version 2.0 (the "License");
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * you may not use this file except in compliance with the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * You may obtain a copy of the License at
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *   http://www.apache.org/licenses/LICENSE-2.0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Unless required by applicable law or agreed to in writing, software
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * distributed under the License is distributed on an "AS IS" BASIS,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * See the License for the specific language governing permissions and
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * limitations under the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               **/

// Service Framework


// Utils


// Internals


/**
* Hyperty Chat;
* @author Vitor Silva [vitor-t-silva@telecom.pt]
* @version 0.1.0
*/

var HypertyChat = function (_EventEmitter) {
  _inherits(HypertyChat, _EventEmitter);

  function HypertyChat(hypertyURL, bus, configuration) {
    _classCallCheck(this, HypertyChat);

    if (!hypertyURL) throw new Error('The hypertyURL is a needed parameter');
    if (!bus) throw new Error('The MiniBus is a needed parameter');
    if (!configuration) throw new Error('The configuration is a needed parameter');

    var _this2 = _possibleConstructorReturn(this, Object.getPrototypeOf(HypertyChat).call(this, hypertyURL, bus, configuration));

    var _this = _this2;
    var syncher = new _Syncher.Syncher(hypertyURL, bus, configuration);

    var domain = (0, _utils.divideURL)(hypertyURL).domain;
    var hypertyDiscovery = new _HypertyDiscovery2.default(hypertyURL, bus);

    _this._objectDescURL = 'hyperty-catalogue://' + domain + '/.well-known/dataschemas/Communication';

    _this._hypertyURL = hypertyURL;
    _this._syncher = syncher;
    _this._domain = domain;
    _this._hypertyDiscovery = hypertyDiscovery;

    syncher.onNotification(function (event) {
      console.log('Notification: ', event);
      _this._autoSubscribe(event.url);
    });

    return _this2;
  }

  /**
   * This function is used to create a new Group Chat providing the identifier of the Group to be notified.
   * @param  {String} name             chat name
   * @param  {URL.UserURL} UserURLList List of User allowed
   * @return {Promise}
   */


  _createClass(HypertyChat, [{
    key: 'create',
    value: function create(name, participants) {

      var _this = this;
      var syncher = _this._syncher;
      var hypertyDiscovery = _this._hypertyDiscovery;

      return new Promise(function (resolve, reject) {

        // Create owner participant
        // TODO: create all information to communication;
        _communication.communicationObject.owner = _this._hypertyURL;
        _communication.communicationObject.name = name;
        _communication.communicationObject.id = name;
        _communication.communicationObject.status = _communication.CommunicationStatus.OPEN;
        _communication.communicationObject.startingTime = new Date().toJSON();
        _communication.communicationObject.lastModified = _communication.communicationObject.startingTime;

        // Set the other subscription like a participant
        _participant2.default.hypertyResource = _this._hypertyURL;
        _communication.communicationObject.participants.push(_participant2.default);

        console.info('----------------------- Mapping Particpants -------------------- \n');
        _this._mappingUser(participants).then(function (hyperties) {
          return _this._createSyncher(hyperties, _communication.communicationObject);
        }).catch(function (hyperties) {
          return _this._createSyncher(hyperties, _communication.communicationObject);
        }).then(function (dataObjectReporter) {
          console.info('3. Return Create Data Object Reporter', dataObjectReporter);

          var chat = new _Chat2.default(syncher, hypertyDiscovery, _this._domain);
          chat.dataObjectReporter = dataObjectReporter;
          resolve(chat);
        }).catch(function (reason) {
          reject(reason);
        });
      });
    }
  }, {
    key: 'join',
    value: function join(resource) {
      var _this = this;
      var syncher = _this._syncher;

      return new Promise(function (resolve, reject) {

        console.info('------------------------ Syncher subscribe ---------------------- \n');
        console.info(resource);

        syncher.subscribe(_this._objectDescURL, resource).then(function (dataObjectObserver) {
          console.info('Data Object Observer: ', dataObjectObserver);
          var chat = new _Chat2.default(syncher, _this._hypertyDiscovery, _this._domain);
          chat.dataObjectObserver = dataObjectObserver;

          resolve(chat);
        }).catch(function (reason) {
          reject(reason);
        });
      });
    }
  }, {
    key: '_autoSubscribe',
    value: function _autoSubscribe(resource) {
      var _this = this;

      _this.join(resource).then(function (chatGroup) {
        _this.trigger('chat:subscribe', chatGroup);
      }).catch(function (reason) {
        console.error(reason);
      });
    }
  }, {
    key: '_createSyncher',
    value: function _createSyncher(hyperties, communication) {
      var _this = this;
      var syncher = _this._syncher;

      console.info('Have ' + hyperties.length + ' participants;');
      console.info('WIth communicationObject: ', communication);

      console.info('------------------------ Syncher Create ---------------------- \n');
      return syncher.create(_this._objectDescURL, hyperties, communication);
    }
  }, {
    key: '_mappingUser',
    value: function _mappingUser(userList) {

      var _this = this;

      return new Promise(function (resolve, reject) {

        var hyperties = [];
        var count = 0;

        if (userList.length === 0) reject(hyperties);

        var resultUsers = function resultUsers() {
          if (count === userList.length) {
            console.info('Have ' + hyperties.length + 'users found;');
            resolve(hyperties);
          }
        };

        var activeUsers = function activeUsers(user) {
          count++;
          hyperties.push(user.hypertyURL);
          resultUsers();
        };

        var inactiveUsers = function inactiveUsers() {
          count++;
          resultUsers();
        };

        userList.forEach(function (user) {
          console.log(user);
          if (user.email.length) {
            return _this._hypertyDiscovery.discoverHypertyPerUser(user.email, user.domain).then(activeUsers).catch(inactiveUsers);
          }
        });
      });
    }
  }]);

  return HypertyChat;
}(_EventEmitter3.default);

function activate(hypertyURL, bus, configuration) {

  return {
    name: 'HypertyChat',
    instance: new HypertyChat(hypertyURL, bus, configuration)
  };
}

},{"./hyperty-chat/Chat":5,"./hyperty-chat/communication":6,"./hyperty-chat/participant":7,"./utils/EventEmitter":8,"./utils/utils":9,"service-framework/dist/HypertyDiscovery":2,"service-framework/dist/Syncher":3}],5:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _EventEmitter2 = require('../utils/EventEmitter');

var _EventEmitter3 = _interopRequireDefault(_EventEmitter2);

var _participant = require('./participant');

var _participant2 = _interopRequireDefault(_participant);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Copyright 2016 PT Inovação e Sistemas SA
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Copyright 2016 INESC-ID
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Copyright 2016 QUOBIS NETWORKS SL
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Copyright 2016 ORANGE SA
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Copyright 2016 Deutsche Telekom AG
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Copyright 2016 Apizee
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Licensed under the Apache License, Version 2.0 (the "License");
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * you may not use this file except in compliance with the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * You may obtain a copy of the License at
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *   http://www.apache.org/licenses/LICENSE-2.0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Unless required by applicable law or agreed to in writing, software
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * distributed under the License is distributed on an "AS IS" BASIS,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * See the License for the specific language governing permissions and
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * limitations under the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               **/

var ChatGroup = function (_EventEmitter) {
  _inherits(ChatGroup, _EventEmitter);

  function ChatGroup(syncher, hypertyDiscovery, domain) {
    _classCallCheck(this, ChatGroup);

    if (!syncher) throw Error('Syncher is a necessary dependecy');
    if (!hypertyDiscovery) throw Error('Hyperty discover is a necessary dependecy');

    var _this2 = _possibleConstructorReturn(this, Object.getPrototypeOf(ChatGroup).call(this, syncher, hypertyDiscovery));

    var _this = _this2;
    _this._syncher = syncher;
    _this._hypertyDiscovery = hypertyDiscovery;

    _this._objectDescURL = 'hyperty-catalogue://' + domain + '/.well-known/dataschemas/Communication';
    return _this2;
  }

  _createClass(ChatGroup, [{
    key: 'processPartipants',
    value: function processPartipants(participants) {
      var _this = this;

      participants.forEach(function (participant) {
        if (_this._dataObjectObserver._owner !== participant.hypertyResource) {
          _this.processParticipant(participant);
        }
      });
    }
  }, {
    key: 'processParticipant',
    value: function processParticipant(participant) {
      var _this = this;
      console.log('Each Participant will be trigger: ', participant);
      _this.trigger('participant:added', participant);
    }

    /**
     * Process child messages
     * @param  {[type]} child [description]
     * @return {[type]}          [description]
     */

  }, {
    key: '_processChild',
    value: function _processChild(child) {
      var _this = this;

      console.info('Process Message:', child);

      _this.trigger('new:message:recived', child);
    }

    /**
     * This function is used to send a chat message.
     * @param  {Message} message text to be send
     */

  }, {
    key: 'send',
    value: function send(message) {

      console.info('Send Message:', message, this);

      var _this = this;
      var dataObject = _this.dataObjectReporter ? _this.dataObjectReporter : _this.dataObjectObserver;

      return new Promise(function (resolve, reject) {

        dataObject.addChild('chatmessages', { chatMessage: message }).then(function (dataObjectChild) {
          console.info('Data Object Child: ', dataObjectChild);
          var msg = {
            childId: dataObjectChild._childId,
            from: dataObjectChild._owner,
            value: dataObjectChild.data
          };

          _this._processChild(msg);
          resolve(dataObjectChild);
        }).catch(function (reason) {
          console.error('Reason:', reason);
          reject(reason);
        });
      });
    }

    /**
     * This function is used to close an existing Group Chat instance.
     *
     */

  }, {
    key: 'close',
    value: function close() {}
  }, {
    key: 'join',
    value: function join(resource) {

      var _this = this;

      return new Promise(function (resolve, reject) {

        _this.addParticipant(resource).then(function (result) {
          resolve('joined: ', result);
        }).catch(function (reason) {
          reject(reason);
        });
      });
    }

    // TODO: improve this with an invite;
    /**
     * This function is used to add / invite new participant on an existing Group Chat instance.
     * @return {Promise} Promise with the status
     */

  }, {
    key: 'addParticipant',
    value: function addParticipant(email) {

      var _this = this;
      var syncher = _this._syncher;

      return new Promise(function (resolve, reject) {});
    }

    /**
     * This function is used to remove a participant from an existing Group Chat instance.
     * @return {Promise} Promise with the status
     */

  }, {
    key: 'removeParticipant',
    value: function removeParticipant() {
      return new Promise(function (resolve, reject) {

        try {
          resolve('participant removed');
        } catch (e) {
          reject('remove participant fail');
        }
      });
    }

    /**
     * This function is used to open a Group Chat instance that was previously closed.
     * @return {[type]} [description]
     */

  }, {
    key: 'open',
    value: function open() {}
  }, {
    key: 'dataObjectReporter',
    set: function set(dataObjectReporter) {

      if (!dataObjectReporter) throw new Error('The data object reporter is necessary parameter');

      var _this = this;

      console.info('Set data object reporter: ', dataObjectReporter);

      dataObjectReporter.onSubscription(function (event) {

        event.accept();

        // Set the other subscription like a participant
        _participant2.default.hypertyResource = event.url;

        console.info('On Subscription add Participant: ', _participant2.default, event);

        dataObjectReporter.data.participants.push(_participant2.default);

        _this.processParticipant(_participant2.default);
      });

      dataObjectReporter.onAddChild(function (child) {
        console.info('Reporter - Add Child: ', child);
        dataObjectReporter.data.lastModified = new Date().toJSON();
        _this._processChild(child);
      });

      _this._dataObjectReporter = dataObjectReporter;
    },
    get: function get() {
      var _this = this;
      return _this._dataObjectReporter;
    }
  }, {
    key: 'dataObjectObserver',
    set: function set(dataObjectObserver) {
      var _this = this;

      _this._dataObjectObserver = dataObjectObserver;

      dataObjectObserver.onChange('participants.*', function (event) {
        console.info('Change Event: ', event);
        _this.processPartipants(event.data);
      });

      dataObjectObserver.onAddChild(function (child) {
        console.info('Observer - Add Child: ', child);
        _this._processChild(child);
      });
    },
    get: function get() {
      var _this = this;
      return _this._dataObjectObserver;
    }
  }, {
    key: 'dataObject',
    get: function get() {
      var _this = this;
      return _this._dataObjectReporter ? _this.dataObjectReporter : _this.dataObjectObserver;
    }
  }]);

  return ChatGroup;
}(_EventEmitter3.default);

exports.default = ChatGroup;

},{"../utils/EventEmitter":8,"./participant":7}],6:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/

var CommunicationStatus = exports.CommunicationStatus = {
  OPEN: 'open',
  PENDING: 'pending',
  CLOSED: 'closed',
  PAUSED: 'paused',
  FAILED: 'failed'
};

var communicationObject = exports.communicationObject = {
  id: '',
  name: '',
  owner: '',
  startingTime: '',
  lastModified: '',
  duration: '',
  status: '',
  qos: '',
  participants: []
};

},{}],7:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/

var participant = {
  status: '',
  hypertyResource: '',
  identity: ''
};

exports.default = participant;

},{}],8:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/

/**
 * EventEmitter
 * All classes which extends this, can have addEventListener and trigger events;
 */

var EventEmitter = function () {
  function EventEmitter() {
    _classCallCheck(this, EventEmitter);
  }

  _createClass(EventEmitter, [{
    key: "addEventListener",


    /**
     * addEventListener listen for an eventType
     * @param  {string}         eventType - listening for this type of event
     * @param  {Function}       cb        - callback function will be executed when the event it is invoked
     */
    value: function addEventListener(eventType, cb) {
      var _this = this;
      _this[eventType] = cb;
    }

    /**
     * Invoke the eventType
     * @param  {string} eventType - event will be invoked
     * @param  {object} params - parameters will be passed to the addEventListener
     */

  }, {
    key: "trigger",
    value: function trigger(eventType, params) {
      var _this = this;

      if (_this[eventType]) {
        _this[eventType](params);
      }
    }
  }]);

  return EventEmitter;
}();

exports.default = EventEmitter;

},{}],9:[function(require,module,exports){
(function (process){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.divideURL = divideURL;
exports.deepClone = deepClone;
exports.getConfig = getConfig;
exports.getUserMedia = getUserMedia;
exports.serialize = serialize;
exports.getTemplate = getTemplate;
/**
 * Copyright 2016 PT Inovação e Sistemas SA
 * Copyright 2016 INESC-ID
 * Copyright 2016 QUOBIS NETWORKS SL
 * Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
 * Copyright 2016 ORANGE SA
 * Copyright 2016 Deutsche Telekom AG
 * Copyright 2016 Apizee
 * Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 **/

// jshint browser:true, jquery: true
// jshint varstmt: true
/* global Handlebars */

/**
 * Support module with some functions will be useful
 * @module utils
 */

/**
 * @typedef divideURL
 * @type Object
 * @property {string} type The type of URL
 * @property {string} domain The domain of URL
 * @property {string} identity The identity of URL
 */

/**
 * Divide an url in type, domain and identity
 * @param  {URL.URL} url - url address
 * @return {divideURL} the result of divideURL
 */
function divideURL(url) {

  // let re = /([a-zA-Z-]*)?:\/\/(?:\.)?([-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b)*(\/[\/\d\w\.-]*)*(?:[\?])*(.+)*/gi;
  var re = /([a-zA-Z-]*):\/\/(?:\.)?([-a-zA-Z0-9@:%._\+~#=]{2,256})([-a-zA-Z0-9@:%._\+~#=\/]*)/gi;
  var subst = '$1,$2,$3';
  var parts = url.replace(re, subst).split(',');

  // If the url has no protocol, the default protocol set is https
  if (parts[0] === url) {
    parts[0] = 'https';
    parts[1] = url;
  }

  var result = {
    type: parts[0],
    domain: parts[1],
    identity: parts[2]
  };

  return result;
}

/**
 * Make a COPY of the original data
 * @param  {Object}  obj - object to be cloned
 * @return {Object}
 */
function deepClone(obj) {
  //TODO: simple but inefficient JSON deep clone...
  if (obj) return JSON.parse(JSON.stringify(obj));
}

/**
 * Get the configuration from an json file;
 * @param  {JSONObject} jsonFile
 * @return {object}
 */
function getConfig(JSONObject) {
  console.log(process.env.environment);
  return JSONObject[process.env.environment];
}

/**
 * Get WebRTC API resources
 * @param  {Object}     options Object containing the information that resources will be used (camera, mic, resolution, etc);
 * @return {Promise}
 */
function getUserMedia(constraints) {

  return new Promise(function (resolve, reject) {

    navigator.mediaDevices.getUserMedia(constraints).then(function (mediaStream) {
      resolve(mediaStream);
    }).catch(function (reason) {
      reject(reason);
    });
  });
}

function serialize() {

  $.fn.serializeObject = function () {
    var o = {};
    var a = this.serializeArray();
    $.each(a, function () {
      if (o[this.name] !== undefined) {
        if (!o[this.name].push) {
          o[this.name] = [o[this.name]];
        }

        o[this.name].push(this.value || '');
      } else {
        o[this.name] = this.value || '';
      }
    });

    return o;
  };

  $.fn.serializeObjectArray = function () {
    var o = {};
    var a = this.serializeArray();
    $.each(a, function () {
      if (o[this.name] !== undefined) {
        if (!o[this.name].push) {
          o[this.name] = [o[this.name]];
        }

        o[this.name].push(this.value || '');
      } else {
        if (!o[this.name]) o[this.name] = [];
        o[this.name].push(this.value || '');
      }
    });

    return o;
  };
}

function getTemplate(path, script) {

  return new Promise(function (resolve, reject) {

    if (Handlebars.templates === undefined || Handlebars.templates[name] === undefined) {
      Handlebars.templates = {};
    } else {
      resolve(Handlebars.templates[name]);
    }

    var templateFile = $.ajax({
      url: path + '.hbs',
      success: function success(data) {
        Handlebars.templates[name] = Handlebars.compile(data);
      },

      fail: function fail(reason) {
        return reason;
      }
    });

    var scriptFile = $.getScript(script);

    var requests = [];
    if (path) requests.push(templateFile);
    if (script) requests.push(scriptFile);

    Promise.all(requests).then(function (result) {
      resolve(Handlebars.templates[name]);
    }).catch(function (reason) {
      reject(reason);
    });
  });
}

}).call(this,require('_process'))
},{"_process":1}]},{},[4])(4)
});",
      "sourceCodeClassname": "HypertyChat",
      "encoding": "base64",
      "signature": ""
    },
    "cguid": 1,
    "type": "Hyperties",
    "version": "0.1",
    "description": "Description of HypertyChat",
    "objectName": "HypertyChat",
    "configuration": {},
    "sourcePackageURL": "/sourcePackage",
    "language": "javascript",
    "signature": "",
    "messageSchemas": "",
    "dataObjects": [],
    "accessControlPolicy": "somePolicy"
  },
  "GroupChat": {
    "sourcePackage": {
      "sourceCode": "(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.activate = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (global){
/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/

// Distribution file for HypertyDiscovery.js 
// version: 0.2.0

!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var t;t="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this,t.HypertyDiscovery=e()}}(function(){return function e(t,r,n){function o(c,s){if(!r[c]){if(!t[c]){var u="function"==typeof require&&require;if(!s&&u)return u(c,!0);if(i)return i(c,!0);var a=new Error("Cannot find module '"+c+"'");throw a.code="MODULE_NOT_FOUND",a}var f=r[c]={exports:{}};t[c][0].call(f.exports,function(e){var r=t[c][1][e];return o(r?r:e)},f,f.exports,e,t,r,n)}return r[c].exports}for(var i="function"==typeof require&&require,c=0;c<n.length;c++)o(n[c]);return o}({1:[function(e,t,r){t.exports={"default":e("core-js/library/fn/json/stringify"),__esModule:!0}},{"core-js/library/fn/json/stringify":6}],2:[function(e,t,r){t.exports={"default":e("core-js/library/fn/object/define-property"),__esModule:!0}},{"core-js/library/fn/object/define-property":7}],3:[function(e,t,r){t.exports={"default":e("core-js/library/fn/promise"),__esModule:!0}},{"core-js/library/fn/promise":8}],4:[function(e,t,r){"use strict";r.__esModule=!0,r["default"]=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}},{}],5:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}r.__esModule=!0;var o=e("babel-runtime/core-js/object/define-property"),i=n(o);r["default"]=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),(0,i["default"])(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}()},{"babel-runtime/core-js/object/define-property":2}],6:[function(e,t,r){var n=e("../../modules/_core"),o=n.JSON||(n.JSON={stringify:JSON.stringify});t.exports=function(e){return o.stringify.apply(o,arguments)}},{"../../modules/_core":16}],7:[function(e,t,r){e("../../modules/es6.object.define-property");var n=e("../../modules/_core").Object;t.exports=function(e,t,r){return n.defineProperty(e,t,r)}},{"../../modules/_core":16,"../../modules/es6.object.define-property":71}],8:[function(e,t,r){e("../modules/es6.object.to-string"),e("../modules/es6.string.iterator"),e("../modules/web.dom.iterable"),e("../modules/es6.promise"),t.exports=e("../modules/_core").Promise},{"../modules/_core":16,"../modules/es6.object.to-string":72,"../modules/es6.promise":73,"../modules/es6.string.iterator":74,"../modules/web.dom.iterable":75}],9:[function(e,t,r){t.exports=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e}},{}],10:[function(e,t,r){t.exports=function(){}},{}],11:[function(e,t,r){t.exports=function(e,t,r,n){if(!(e instanceof t)||void 0!==n&&n in e)throw TypeError(r+": incorrect invocation!");return e}},{}],12:[function(e,t,r){var n=e("./_is-object");t.exports=function(e){if(!n(e))throw TypeError(e+" is not an object!");return e}},{"./_is-object":33}],13:[function(e,t,r){var n=e("./_to-iobject"),o=e("./_to-length"),i=e("./_to-index");t.exports=function(e){return function(t,r,c){var s,u=n(t),a=o(u.length),f=i(c,a);if(e&&r!=r){for(;a>f;)if(s=u[f++],s!=s)return!0}else for(;a>f;f++)if((e||f in u)&&u[f]===r)return e||f||0;return!e&&-1}}},{"./_to-index":61,"./_to-iobject":63,"./_to-length":64}],14:[function(e,t,r){var n=e("./_cof"),o=e("./_wks")("toStringTag"),i="Arguments"==n(function(){return arguments}()),c=function(e,t){try{return e[t]}catch(r){}};t.exports=function(e){var t,r,s;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(r=c(t=Object(e),o))?r:i?n(t):"Object"==(s=n(t))&&"function"==typeof t.callee?"Arguments":s}},{"./_cof":15,"./_wks":68}],15:[function(e,t,r){var n={}.toString;t.exports=function(e){return n.call(e).slice(8,-1)}},{}],16:[function(e,t,r){var n=t.exports={version:"2.4.0"};"number"==typeof __e&&(__e=n)},{}],17:[function(e,t,r){var n=e("./_a-function");t.exports=function(e,t,r){if(n(e),void 0===t)return e;switch(r){case 1:return function(r){return e.call(t,r)};case 2:return function(r,n){return e.call(t,r,n)};case 3:return function(r,n,o){return e.call(t,r,n,o)}}return function(){return e.apply(t,arguments)}}},{"./_a-function":9}],18:[function(e,t,r){t.exports=function(e){if(void 0==e)throw TypeError("Can't call method on  "+e);return e}},{}],19:[function(e,t,r){t.exports=!e("./_fails")(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},{"./_fails":23}],20:[function(e,t,r){var n=e("./_is-object"),o=e("./_global").document,i=n(o)&&n(o.createElement);t.exports=function(e){return i?o.createElement(e):{}}},{"./_global":25,"./_is-object":33}],21:[function(e,t,r){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},{}],22:[function(e,t,r){var n=e("./_global"),o=e("./_core"),i=e("./_ctx"),c=e("./_hide"),s="prototype",u=function(e,t,r){var a,f,_,l=e&u.F,d=e&u.G,p=e&u.S,v=e&u.P,y=e&u.B,h=e&u.W,b=d?o:o[t]||(o[t]={}),m=b[s],g=d?n:p?n[t]:(n[t]||{})[s];d&&(r=t);for(a in r)f=!l&&g&&void 0!==g[a],f&&a in b||(_=f?g[a]:r[a],b[a]=d&&"function"!=typeof g[a]?r[a]:y&&f?i(_,n):h&&g[a]==_?function(e){var t=function(t,r,n){if(this instanceof e){switch(arguments.length){case 0:return new e;case 1:return new e(t);case 2:return new e(t,r)}return new e(t,r,n)}return e.apply(this,arguments)};return t[s]=e[s],t}(_):v&&"function"==typeof _?i(Function.call,_):_,v&&((b.virtual||(b.virtual={}))[a]=_,e&u.R&&m&&!m[a]&&c(m,a,_)))};u.F=1,u.G=2,u.S=4,u.P=8,u.B=16,u.W=32,u.U=64,u.R=128,t.exports=u},{"./_core":16,"./_ctx":17,"./_global":25,"./_hide":27}],23:[function(e,t,r){t.exports=function(e){try{return!!e()}catch(t){return!0}}},{}],24:[function(e,t,r){var n=e("./_ctx"),o=e("./_iter-call"),i=e("./_is-array-iter"),c=e("./_an-object"),s=e("./_to-length"),u=e("./core.get-iterator-method"),a={},f={},r=t.exports=function(e,t,r,_,l){var d,p,v,y,h=l?function(){return e}:u(e),b=n(r,_,t?2:1),m=0;if("function"!=typeof h)throw TypeError(e+" is not iterable!");if(i(h)){for(d=s(e.length);d>m;m++)if(y=t?b(c(p=e[m])[0],p[1]):b(e[m]),y===a||y===f)return y}else for(v=h.call(e);!(p=v.next()).done;)if(y=o(v,b,p.value,t),y===a||y===f)return y};r.BREAK=a,r.RETURN=f},{"./_an-object":12,"./_ctx":17,"./_is-array-iter":32,"./_iter-call":34,"./_to-length":64,"./core.get-iterator-method":69}],25:[function(e,t,r){var n=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},{}],26:[function(e,t,r){var n={}.hasOwnProperty;t.exports=function(e,t){return n.call(e,t)}},{}],27:[function(e,t,r){var n=e("./_object-dp"),o=e("./_property-desc");t.exports=e("./_descriptors")?function(e,t,r){return n.f(e,t,o(1,r))}:function(e,t,r){return e[t]=r,e}},{"./_descriptors":19,"./_object-dp":43,"./_property-desc":50}],28:[function(e,t,r){t.exports=e("./_global").document&&document.documentElement},{"./_global":25}],29:[function(e,t,r){t.exports=!e("./_descriptors")&&!e("./_fails")(function(){return 7!=Object.defineProperty(e("./_dom-create")("div"),"a",{get:function(){return 7}}).a})},{"./_descriptors":19,"./_dom-create":20,"./_fails":23}],30:[function(e,t,r){t.exports=function(e,t,r){var n=void 0===r;switch(t.length){case 0:return n?e():e.call(r);case 1:return n?e(t[0]):e.call(r,t[0]);case 2:return n?e(t[0],t[1]):e.call(r,t[0],t[1]);case 3:return n?e(t[0],t[1],t[2]):e.call(r,t[0],t[1],t[2]);case 4:return n?e(t[0],t[1],t[2],t[3]):e.call(r,t[0],t[1],t[2],t[3])}return e.apply(r,t)}},{}],31:[function(e,t,r){var n=e("./_cof");t.exports=Object("z").propertyIsEnumerable(0)?Object:function(e){return"String"==n(e)?e.split(""):Object(e)}},{"./_cof":15}],32:[function(e,t,r){var n=e("./_iterators"),o=e("./_wks")("iterator"),i=Array.prototype;t.exports=function(e){return void 0!==e&&(n.Array===e||i[o]===e)}},{"./_iterators":39,"./_wks":68}],33:[function(e,t,r){t.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},{}],34:[function(e,t,r){var n=e("./_an-object");t.exports=function(e,t,r,o){try{return o?t(n(r)[0],r[1]):t(r)}catch(i){var c=e["return"];throw void 0!==c&&n(c.call(e)),i}}},{"./_an-object":12}],35:[function(e,t,r){"use strict";var n=e("./_object-create"),o=e("./_property-desc"),i=e("./_set-to-string-tag"),c={};e("./_hide")(c,e("./_wks")("iterator"),function(){return this}),t.exports=function(e,t,r){e.prototype=n(c,{next:o(1,r)}),i(e,t+" Iterator")}},{"./_hide":27,"./_object-create":42,"./_property-desc":50,"./_set-to-string-tag":55,"./_wks":68}],36:[function(e,t,r){"use strict";var n=e("./_library"),o=e("./_export"),i=e("./_redefine"),c=e("./_hide"),s=e("./_has"),u=e("./_iterators"),a=e("./_iter-create"),f=e("./_set-to-string-tag"),_=e("./_object-gpo"),l=e("./_wks")("iterator"),d=!([].keys&&"next"in[].keys()),p="@@iterator",v="keys",y="values",h=function(){return this};t.exports=function(e,t,r,b,m,g,j){a(r,t,b);var x,w,k,O=function(e){if(!d&&e in E)return E[e];switch(e){case v:return function(){return new r(this,e)};case y:return function(){return new r(this,e)}}return function(){return new r(this,e)}},M=t+" Iterator",P=m==y,S=!1,E=e.prototype,T=E[l]||E[p]||m&&E[m],A=T||O(m),U=m?P?O("entries"):A:void 0,C="Array"==t?E.entries||T:T;if(C&&(k=_(C.call(new e)),k!==Object.prototype&&(f(k,M,!0),n||s(k,l)||c(k,l,h))),P&&T&&T.name!==y&&(S=!0,A=function(){return T.call(this)}),n&&!j||!d&&!S&&E[l]||c(E,l,A),u[t]=A,u[M]=h,m)if(x={values:P?A:O(y),keys:g?A:O(v),entries:U},j)for(w in x)w in E||i(E,w,x[w]);else o(o.P+o.F*(d||S),t,x);return x}},{"./_export":22,"./_has":26,"./_hide":27,"./_iter-create":35,"./_iterators":39,"./_library":40,"./_object-gpo":46,"./_redefine":52,"./_set-to-string-tag":55,"./_wks":68}],37:[function(e,t,r){var n=e("./_wks")("iterator"),o=!1;try{var i=[7][n]();i["return"]=function(){o=!0},Array.from(i,function(){throw 2})}catch(c){}t.exports=function(e,t){if(!t&&!o)return!1;var r=!1;try{var i=[7],c=i[n]();c.next=function(){return{done:r=!0}},i[n]=function(){return c},e(i)}catch(s){}return r}},{"./_wks":68}],38:[function(e,t,r){t.exports=function(e,t){return{value:t,done:!!e}}},{}],39:[function(e,t,r){t.exports={}},{}],40:[function(e,t,r){t.exports=!0},{}],41:[function(e,t,r){var n=e("./_global"),o=e("./_task").set,i=n.MutationObserver||n.WebKitMutationObserver,c=n.process,s=n.Promise,u="process"==e("./_cof")(c);t.exports=function(){var e,t,r,a=function(){var n,o;for(u&&(n=c.domain)&&n.exit();e;){o=e.fn,e=e.next;try{o()}catch(i){throw e?r():t=void 0,i}}t=void 0,n&&n.enter()};if(u)r=function(){c.nextTick(a)};else if(i){var f=!0,_=document.createTextNode("");new i(a).observe(_,{characterData:!0}),r=function(){_.data=f=!f}}else if(s&&s.resolve){var l=s.resolve();r=function(){l.then(a)}}else r=function(){o.call(n,a)};return function(n){var o={fn:n,next:void 0};t&&(t.next=o),e||(e=o,r()),t=o}}},{"./_cof":15,"./_global":25,"./_task":60}],42:[function(e,t,r){var n=e("./_an-object"),o=e("./_object-dps"),i=e("./_enum-bug-keys"),c=e("./_shared-key")("IE_PROTO"),s=function(){},u="prototype",a=function(){var t,r=e("./_dom-create")("iframe"),n=i.length,o=">";for(r.style.display="none",e("./_html").appendChild(r),r.src="javascript:",t=r.contentWindow.document,t.open(),t.write("<script>document.F=Object</script"+o),t.close(),a=t.F;n--;)delete a[u][i[n]];return a()};t.exports=Object.create||function(e,t){var r;return null!==e?(s[u]=n(e),r=new s,s[u]=null,r[c]=e):r=a(),void 0===t?r:o(r,t)}},{"./_an-object":12,"./_dom-create":20,"./_enum-bug-keys":21,"./_html":28,"./_object-dps":44,"./_shared-key":56}],43:[function(e,t,r){var n=e("./_an-object"),o=e("./_ie8-dom-define"),i=e("./_to-primitive"),c=Object.defineProperty;r.f=e("./_descriptors")?Object.defineProperty:function(e,t,r){if(n(e),t=i(t,!0),n(r),o)try{return c(e,t,r)}catch(s){}if("get"in r||"set"in r)throw TypeError("Accessors not supported!");return"value"in r&&(e[t]=r.value),e}},{"./_an-object":12,"./_descriptors":19,"./_ie8-dom-define":29,"./_to-primitive":66}],44:[function(e,t,r){var n=e("./_object-dp"),o=e("./_an-object"),i=e("./_object-keys");t.exports=e("./_descriptors")?Object.defineProperties:function(e,t){o(e);for(var r,c=i(t),s=c.length,u=0;s>u;)n.f(e,r=c[u++],t[r]);return e}},{"./_an-object":12,"./_descriptors":19,"./_object-dp":43,"./_object-keys":48}],45:[function(e,t,r){var n=e("./_object-pie"),o=e("./_property-desc"),i=e("./_to-iobject"),c=e("./_to-primitive"),s=e("./_has"),u=e("./_ie8-dom-define"),a=Object.getOwnPropertyDescriptor;r.f=e("./_descriptors")?a:function(e,t){if(e=i(e),t=c(t,!0),u)try{return a(e,t)}catch(r){}return s(e,t)?o(!n.f.call(e,t),e[t]):void 0}},{"./_descriptors":19,"./_has":26,"./_ie8-dom-define":29,"./_object-pie":49,"./_property-desc":50,"./_to-iobject":63,"./_to-primitive":66}],46:[function(e,t,r){var n=e("./_has"),o=e("./_to-object"),i=e("./_shared-key")("IE_PROTO"),c=Object.prototype;t.exports=Object.getPrototypeOf||function(e){return e=o(e),n(e,i)?e[i]:"function"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?c:null}},{"./_has":26,"./_shared-key":56,"./_to-object":65}],47:[function(e,t,r){var n=e("./_has"),o=e("./_to-iobject"),i=e("./_array-includes")(!1),c=e("./_shared-key")("IE_PROTO");t.exports=function(e,t){var r,s=o(e),u=0,a=[];for(r in s)r!=c&&n(s,r)&&a.push(r);for(;t.length>u;)n(s,r=t[u++])&&(~i(a,r)||a.push(r));return a}},{"./_array-includes":13,"./_has":26,"./_shared-key":56,"./_to-iobject":63}],48:[function(e,t,r){var n=e("./_object-keys-internal"),o=e("./_enum-bug-keys");t.exports=Object.keys||function(e){return n(e,o)}},{"./_enum-bug-keys":21,"./_object-keys-internal":47}],49:[function(e,t,r){r.f={}.propertyIsEnumerable},{}],50:[function(e,t,r){t.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},{}],51:[function(e,t,r){var n=e("./_hide");t.exports=function(e,t,r){for(var o in t)r&&e[o]?e[o]=t[o]:n(e,o,t[o]);return e}},{"./_hide":27}],52:[function(e,t,r){t.exports=e("./_hide")},{"./_hide":27}],53:[function(e,t,r){var n=e("./_is-object"),o=e("./_an-object"),i=function(e,t){if(o(e),!n(t)&&null!==t)throw TypeError(t+": can't set as prototype!")};t.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(t,r,n){try{n=e("./_ctx")(Function.call,e("./_object-gopd").f(Object.prototype,"__proto__").set,2),n(t,[]),r=!(t instanceof Array)}catch(o){r=!0}return function(e,t){return i(e,t),r?e.__proto__=t:n(e,t),e}}({},!1):void 0),check:i}},{"./_an-object":12,"./_ctx":17,"./_is-object":33,"./_object-gopd":45}],54:[function(e,t,r){"use strict";var n=e("./_global"),o=e("./_core"),i=e("./_object-dp"),c=e("./_descriptors"),s=e("./_wks")("species");t.exports=function(e){var t="function"==typeof o[e]?o[e]:n[e];c&&t&&!t[s]&&i.f(t,s,{configurable:!0,get:function(){return this}})}},{"./_core":16,"./_descriptors":19,"./_global":25,"./_object-dp":43,"./_wks":68}],55:[function(e,t,r){var n=e("./_object-dp").f,o=e("./_has"),i=e("./_wks")("toStringTag");t.exports=function(e,t,r){e&&!o(e=r?e:e.prototype,i)&&n(e,i,{configurable:!0,value:t})}},{"./_has":26,"./_object-dp":43,"./_wks":68}],56:[function(e,t,r){var n=e("./_shared")("keys"),o=e("./_uid");t.exports=function(e){return n[e]||(n[e]=o(e))}},{"./_shared":57,"./_uid":67}],57:[function(e,t,r){var n=e("./_global"),o="__core-js_shared__",i=n[o]||(n[o]={});t.exports=function(e){return i[e]||(i[e]={})}},{"./_global":25}],58:[function(e,t,r){var n=e("./_an-object"),o=e("./_a-function"),i=e("./_wks")("species");t.exports=function(e,t){var r,c=n(e).constructor;return void 0===c||void 0==(r=n(c)[i])?t:o(r)}},{"./_a-function":9,"./_an-object":12,"./_wks":68}],59:[function(e,t,r){var n=e("./_to-integer"),o=e("./_defined");t.exports=function(e){return function(t,r){var i,c,s=String(o(t)),u=n(r),a=s.length;return 0>u||u>=a?e?"":void 0:(i=s.charCodeAt(u),55296>i||i>56319||u+1===a||(c=s.charCodeAt(u+1))<56320||c>57343?e?s.charAt(u):i:e?s.slice(u,u+2):(i-55296<<10)+(c-56320)+65536)}}},{"./_defined":18,"./_to-integer":62}],60:[function(e,t,r){var n,o,i,c=e("./_ctx"),s=e("./_invoke"),u=e("./_html"),a=e("./_dom-create"),f=e("./_global"),_=f.process,l=f.setImmediate,d=f.clearImmediate,p=f.MessageChannel,v=0,y={},h="onreadystatechange",b=function(){var e=+this;if(y.hasOwnProperty(e)){var t=y[e];delete y[e],t()}},m=function(e){b.call(e.data)};l&&d||(l=function(e){for(var t=[],r=1;arguments.length>r;)t.push(arguments[r++]);return y[++v]=function(){s("function"==typeof e?e:Function(e),t)},n(v),v},d=function(e){delete y[e]},"process"==e("./_cof")(_)?n=function(e){_.nextTick(c(b,e,1))}:p?(o=new p,i=o.port2,o.port1.onmessage=m,n=c(i.postMessage,i,1)):f.addEventListener&&"function"==typeof postMessage&&!f.importScripts?(n=function(e){f.postMessage(e+"","*")},f.addEventListener("message",m,!1)):n=h in a("script")?function(e){u.appendChild(a("script"))[h]=function(){u.removeChild(this),b.call(e)}}:function(e){setTimeout(c(b,e,1),0)}),t.exports={set:l,clear:d}},{"./_cof":15,"./_ctx":17,"./_dom-create":20,"./_global":25,"./_html":28,"./_invoke":30}],61:[function(e,t,r){var n=e("./_to-integer"),o=Math.max,i=Math.min;t.exports=function(e,t){return e=n(e),0>e?o(e+t,0):i(e,t)}},{"./_to-integer":62}],62:[function(e,t,r){var n=Math.ceil,o=Math.floor;t.exports=function(e){return isNaN(e=+e)?0:(e>0?o:n)(e)}},{}],63:[function(e,t,r){var n=e("./_iobject"),o=e("./_defined");t.exports=function(e){return n(o(e))}},{"./_defined":18,"./_iobject":31}],64:[function(e,t,r){var n=e("./_to-integer"),o=Math.min;t.exports=function(e){return e>0?o(n(e),9007199254740991):0}},{"./_to-integer":62}],65:[function(e,t,r){var n=e("./_defined");t.exports=function(e){return Object(n(e))}},{"./_defined":18}],66:[function(e,t,r){var n=e("./_is-object");t.exports=function(e,t){if(!n(e))return e;var r,o;if(t&&"function"==typeof(r=e.toString)&&!n(o=r.call(e)))return o;if("function"==typeof(r=e.valueOf)&&!n(o=r.call(e)))return o;if(!t&&"function"==typeof(r=e.toString)&&!n(o=r.call(e)))return o;throw TypeError("Can't convert object to primitive value")}},{"./_is-object":33}],67:[function(e,t,r){var n=0,o=Math.random();t.exports=function(e){return"Symbol(".concat(void 0===e?"":e,")_",(++n+o).toString(36))}},{}],68:[function(e,t,r){var n=e("./_shared")("wks"),o=e("./_uid"),i=e("./_global").Symbol,c="function"==typeof i,s=t.exports=function(e){return n[e]||(n[e]=c&&i[e]||(c?i:o)("Symbol."+e))};s.store=n},{"./_global":25,"./_shared":57,"./_uid":67}],69:[function(e,t,r){var n=e("./_classof"),o=e("./_wks")("iterator"),i=e("./_iterators");t.exports=e("./_core").getIteratorMethod=function(e){return void 0!=e?e[o]||e["@@iterator"]||i[n(e)]:void 0}},{"./_classof":14,"./_core":16,"./_iterators":39,"./_wks":68}],70:[function(e,t,r){"use strict";var n=e("./_add-to-unscopables"),o=e("./_iter-step"),i=e("./_iterators"),c=e("./_to-iobject");t.exports=e("./_iter-define")(Array,"Array",function(e,t){this._t=c(e),this._i=0,this._k=t},function(){var e=this._t,t=this._k,r=this._i++;return!e||r>=e.length?(this._t=void 0,o(1)):"keys"==t?o(0,r):"values"==t?o(0,e[r]):o(0,[r,e[r]])},"values"),i.Arguments=i.Array,n("keys"),n("values"),n("entries")},{"./_add-to-unscopables":10,"./_iter-define":36,"./_iter-step":38,"./_iterators":39,"./_to-iobject":63}],71:[function(e,t,r){var n=e("./_export");n(n.S+n.F*!e("./_descriptors"),"Object",{defineProperty:e("./_object-dp").f})},{"./_descriptors":19,"./_export":22,"./_object-dp":43}],72:[function(e,t,r){},{}],73:[function(e,t,r){"use strict";var n,o,i,c=e("./_library"),s=e("./_global"),u=e("./_ctx"),a=e("./_classof"),f=e("./_export"),_=e("./_is-object"),l=(e("./_an-object"),e("./_a-function")),d=e("./_an-instance"),p=e("./_for-of"),v=(e("./_set-proto").set,e("./_species-constructor")),y=e("./_task").set,h=e("./_microtask")(),b="Promise",m=s.TypeError,g=s.process,j=s[b],g=s.process,x="process"==a(g),w=function(){},k=!!function(){try{var t=j.resolve(1),r=(t.constructor={})[e("./_wks")("species")]=function(e){e(w,w)};return(x||"function"==typeof PromiseRejectionEvent)&&t.then(w)instanceof r}catch(n){}}(),O=function(e,t){return e===t||e===j&&t===i},M=function(e){var t;return _(e)&&"function"==typeof(t=e.then)?t:!1},P=function(e){return O(j,e)?new S(e):new o(e)},S=o=function(e){var t,r;this.promise=new e(function(e,n){if(void 0!==t||void 0!==r)throw m("Bad Promise constructor");t=e,r=n}),this.resolve=l(t),this.reject=l(r)},E=function(e){try{e()}catch(t){return{error:t}}},T=function(e,t){if(!e._n){e._n=!0;var r=e._c;h(function(){for(var n=e._v,o=1==e._s,i=0,c=function(t){var r,i,c=o?t.ok:t.fail,s=t.resolve,u=t.reject,a=t.domain;try{c?(o||(2==e._h&&C(e),e._h=1),c===!0?r=n:(a&&a.enter(),r=c(n),a&&a.exit()),r===t.promise?u(m("Promise-chain cycle")):(i=M(r))?i.call(r,s,u):s(r)):u(n)}catch(f){u(f)}};r.length>i;)c(r[i++]);e._c=[],e._n=!1,t&&!e._h&&A(e)})}},A=function(e){y.call(s,function(){var t,r,n,o=e._v;if(U(e)&&(t=E(function(){x?g.emit("unhandledRejection",o,e):(r=s.onunhandledrejection)?r({promise:e,reason:o}):(n=s.console)&&n.error&&n.error("Unhandled promise rejection",o)}),e._h=x||U(e)?2:1),e._a=void 0,t)throw t.error})},U=function(e){if(1==e._h)return!1;for(var t,r=e._a||e._c,n=0;r.length>n;)if(t=r[n++],t.fail||!U(t.promise))return!1;return!0},C=function(e){y.call(s,function(){var t;x?g.emit("rejectionHandled",e):(t=s.onrejectionhandled)&&t({promise:e,reason:e._v})})},R=function(e){var t=this;t._d||(t._d=!0,t=t._w||t,t._v=e,t._s=2,t._a||(t._a=t._c.slice()),T(t,!0))},L=function(e){var t,r=this;if(!r._d){r._d=!0,r=r._w||r;try{if(r===e)throw m("Promise can't be resolved itself");(t=M(e))?h(function(){var n={_w:r,_d:!1};try{t.call(e,u(L,n,1),u(R,n,1))}catch(o){R.call(n,o)}}):(r._v=e,r._s=1,T(r,!1))}catch(n){R.call({_w:r,_d:!1},n)}}};k||(j=function(e){d(this,j,b,"_h"),l(e),n.call(this);try{e(u(L,this,1),u(R,this,1))}catch(t){R.call(this,t)}},n=function(e){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1},n.prototype=e("./_redefine-all")(j.prototype,{then:function(e,t){var r=P(v(this,j));return r.ok="function"==typeof e?e:!0,r.fail="function"==typeof t&&t,r.domain=x?g.domain:void 0,this._c.push(r),this._a&&this._a.push(r),this._s&&T(this,!1),r.promise},"catch":function(e){return this.then(void 0,e)}}),S=function(){var e=new n;this.promise=e,this.resolve=u(L,e,1),this.reject=u(R,e,1)}),f(f.G+f.W+f.F*!k,{Promise:j}),e("./_set-to-string-tag")(j,b),e("./_set-species")(b),i=e("./_core")[b],f(f.S+f.F*!k,b,{reject:function(e){var t=P(this),r=t.reject;return r(e),t.promise}}),f(f.S+f.F*(c||!k),b,{resolve:function(e){if(e instanceof j&&O(e.constructor,this))return e;var t=P(this),r=t.resolve;return r(e),t.promise}}),f(f.S+f.F*!(k&&e("./_iter-detect")(function(e){j.all(e)["catch"](w)})),b,{all:function(e){var t=this,r=P(t),n=r.resolve,o=r.reject,i=E(function(){var r=[],i=0,c=1;p(e,!1,function(e){var s=i++,u=!1;r.push(void 0),c++,t.resolve(e).then(function(e){u||(u=!0,r[s]=e,--c||n(r))},o)}),--c||n(r)});return i&&o(i.error),r.promise},race:function(e){var t=this,r=P(t),n=r.reject,o=E(function(){p(e,!1,function(e){t.resolve(e).then(r.resolve,n)})});return o&&n(o.error),r.promise}})},{"./_a-function":9,"./_an-instance":11,"./_an-object":12,"./_classof":14,"./_core":16,"./_ctx":17,"./_export":22,"./_for-of":24,"./_global":25,"./_is-object":33,"./_iter-detect":37,"./_library":40,"./_microtask":41,"./_redefine-all":51,"./_set-proto":53,"./_set-species":54,"./_set-to-string-tag":55,"./_species-constructor":58,"./_task":60,"./_wks":68}],74:[function(e,t,r){"use strict";var n=e("./_string-at")(!0);e("./_iter-define")(String,"String",function(e){this._t=String(e),this._i=0},function(){var e,t=this._t,r=this._i;return r>=t.length?{value:void 0,done:!0}:(e=n(t,r),this._i+=e.length,{value:e,done:!1})})},{"./_iter-define":36,"./_string-at":59}],75:[function(e,t,r){e("./es6.array.iterator");for(var n=e("./_global"),o=e("./_hide"),i=e("./_iterators"),c=e("./_wks")("toStringTag"),s=["NodeList","DOMTokenList","MediaList","StyleSheetList","CSSRuleList"],u=0;5>u;u++){var a=s[u],f=n[a],_=f&&f.prototype;_&&!_[c]&&o(_,c,a),i[a]=i.Array}},{"./_global":25,"./_hide":27,"./_iterators":39,"./_wks":68,"./es6.array.iterator":70}],76:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(r,"__esModule",{value:!0});var o=e("./hyperty-discovery/HypertyDiscovery"),i=n(o);r["default"]=i["default"],t.exports=r["default"]},{"./hyperty-discovery/HypertyDiscovery":77}],77:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(r,"__esModule",{value:!0});var o=e("babel-runtime/core-js/promise"),i=n(o),c=e("babel-runtime/helpers/classCallCheck"),s=n(c),u=e("babel-runtime/helpers/createClass"),a=n(u),f=e("../utils/utils"),_=function(){function e(t,r){(0,s["default"])(this,e);var n=this;n.messageBus=r,n.domain=(0,f.divideURL)(t).domain,n.discoveryURL=t}return(0,a["default"])(e,[{key:"discoverDataObjectPerName",value:function(e,t){var r=this,n=void 0;n=t?t:r.domain;var o={type:"read",from:r.discoveryURL,to:"domain://registry."+n+"/",body:{resource:"dataObject://"+e}};return new i["default"](function(e,t){r.messageBus.postMessage(o,function(r){var n=r.body.value.url;n?e(n):t("DataObject name does not exist")})})}},{key:"discoverHypertyPerUser",value:function(e,t){var r=this,n=void 0;n=t?t:r.domain;var o="user://"+e.substring(e.indexOf("@")+1,e.length)+"/"+e.substring(0,e.indexOf("@")),c={type:"read",from:r.discoveryURL,to:"domain://registry."+n+"/",body:{resource:o}};return console.log("Message: ",c,n,o),new i["default"](function(t,n){r.messageBus.postMessage(c,function(r){console.log("message reply",r);var o=void 0,i=void 0,c=void 0,s=r.body.value;for(o in s)if(void 0!==s[o].lastModified)if(void 0===i)i=new Date(s[o].lastModified),c=o;else{var u=new Date(s[o].lastModified);i.getTime()<u.getTime()&&(i=u,c=o)}console.log("Last Hyperty: ",c,i);var a=c;if(void 0===a)return n("User Hyperty not found");var f={id:e,descriptor:s[a].descriptor,hypertyURL:a};console.log("===> hypertyDiscovery messageBundle: ",f),t(f)})})}},{key:"discoverHypertiesPerUser",value:function(e,t){var r=this,n=void 0;n=t?t:r.domain;var o="user://"+e.substring(e.indexOf("@")+1,e.length)+"/"+e.substring(0,e.indexOf("@")),c={type:"read",from:r.discoveryURL,to:"domain://registry."+n+"/",body:{resource:o}};return console.log("Message discoverHypertiesPerUser: ",c,n,o),new i["default"](function(e,t){r.messageBus.postMessage(c,function(r){console.log("discoverHypertiesPerUser reply",r);var n=r.body.value;return n?void e(n):t("User Hyperty not found")})})}}]),e}();r["default"]=_,t.exports=r["default"]},{"../utils/utils":78,"babel-runtime/core-js/promise":3,"babel-runtime/helpers/classCallCheck":4,"babel-runtime/helpers/createClass":5}],78:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function o(e){var t=/([a-zA-Z-]*):\/\/(?:\.)?([-a-zA-Z0-9@:%._\+~#=]{2,256})([-a-zA-Z0-9@:%._\+~#=\/]*)/gi,r="$1,$2,$3",n=e.replace(t,r).split(",");n[0]===e&&(n[0]="https",n[1]=e);var o={type:n[0],domain:n[1],identity:n[2]};return o}function i(e){return e?JSON.parse((0,s["default"])(e)):void 0}Object.defineProperty(r,"__esModule",{value:!0});var c=e("babel-runtime/core-js/json/stringify"),s=n(c);r.divideURL=o,r.deepClone=i},{"babel-runtime/core-js/json/stringify":1}]},{},[76])(76)});
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],2:[function(require,module,exports){
(function (global){
/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/

// Distribution file for Syncher.js 
// version: 0.2.0

!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var t;t="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this,t.Syncher=e()}}(function(){return function e(t,r,n){function o(s,a){if(!r[s]){if(!t[s]){var c="function"==typeof require&&require;if(!a&&c)return c(s,!0);if(i)return i(s,!0);var u=new Error("Cannot find module '"+s+"'");throw u.code="MODULE_NOT_FOUND",u}var l=r[s]={exports:{}};t[s][0].call(l.exports,function(e){var r=t[s][1][e];return o(r?r:e)},l,l.exports,e,t,r,n)}return r[s].exports}for(var i="function"==typeof require&&require,s=0;s<n.length;s++)o(n[s]);return o}({1:[function(e,t,r){Object.observe&&!Array.observe&&function(e,t){"use strict";var r=e.getNotifier,n="performChange",o="_original",i="splice",s={push:function c(e){var t=arguments,s=c[o].apply(this,t);return r(this)[n](i,function(){return{index:s-t.length,addedCount:t.length,removed:[]}}),s},unshift:function u(e){var t=arguments,s=u[o].apply(this,t);return r(this)[n](i,function(){return{index:0,addedCount:t.length,removed:[]}}),s},pop:function l(){var e=this.length,t=l[o].call(this);return this.length!==e&&r(this)[n](i,function(){return{index:this.length,addedCount:0,removed:[t]}},this),t},shift:function f(){var e=this.length,t=f[o].call(this);return this.length!==e&&r(this)[n](i,function(){return{index:0,addedCount:0,removed:[t]}},this),t},splice:function d(e,t){var s=arguments,a=d[o].apply(this,s);return(a.length||s.length>2)&&r(this)[n](i,function(){return{index:e,addedCount:s.length-2,removed:a}},this),a}};for(var a in s)s[a][o]=t.prototype[a],t.prototype[a]=s[a];t.observe=function(t,r){return e.observe(t,r,["add","update","delete",i])},t.unobserve=e.unobserve}(Object,Array)},{}],2:[function(e,t,r){t.exports={"default":e("core-js/library/fn/json/stringify"),__esModule:!0}},{"core-js/library/fn/json/stringify":17}],3:[function(e,t,r){t.exports={"default":e("core-js/library/fn/object/create"),__esModule:!0}},{"core-js/library/fn/object/create":18}],4:[function(e,t,r){t.exports={"default":e("core-js/library/fn/object/define-property"),__esModule:!0}},{"core-js/library/fn/object/define-property":19}],5:[function(e,t,r){t.exports={"default":e("core-js/library/fn/object/get-own-property-descriptor"),__esModule:!0}},{"core-js/library/fn/object/get-own-property-descriptor":20}],6:[function(e,t,r){t.exports={"default":e("core-js/library/fn/object/get-prototype-of"),__esModule:!0}},{"core-js/library/fn/object/get-prototype-of":21}],7:[function(e,t,r){t.exports={"default":e("core-js/library/fn/object/keys"),__esModule:!0}},{"core-js/library/fn/object/keys":22}],8:[function(e,t,r){t.exports={"default":e("core-js/library/fn/object/set-prototype-of"),__esModule:!0}},{"core-js/library/fn/object/set-prototype-of":23}],9:[function(e,t,r){t.exports={"default":e("core-js/library/fn/promise"),__esModule:!0}},{"core-js/library/fn/promise":24}],10:[function(e,t,r){t.exports={"default":e("core-js/library/fn/symbol"),__esModule:!0}},{"core-js/library/fn/symbol":25}],11:[function(e,t,r){"use strict";r.__esModule=!0,r["default"]=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}},{}],12:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}r.__esModule=!0;var o=e("../core-js/object/define-property"),i=n(o);r["default"]=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),(0,i["default"])(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}()},{"../core-js/object/define-property":4}],13:[function(e,t,r){"use strict";var n=e("babel-runtime/core-js/object/get-own-property-descriptor")["default"];r["default"]=function(e,t,r){for(var o=!0;o;){var i=e,s=t,a=r;o=!1,null===i&&(i=Function.prototype);var c=n(i,s);if(void 0!==c){if("value"in c)return c.value;var u=c.get;if(void 0===u)return;return u.call(a)}var l=Object.getPrototypeOf(i);if(null===l)return;e=l,t=s,r=a,o=!0,c=l=void 0}},r.__esModule=!0},{"babel-runtime/core-js/object/get-own-property-descriptor":5}],14:[function(e,t,r){"use strict";var n=e("babel-runtime/core-js/object/create")["default"],o=e("babel-runtime/core-js/object/set-prototype-of")["default"];r["default"]=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=n(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(o?o(e,t):e.__proto__=t)},r.__esModule=!0},{"babel-runtime/core-js/object/create":3,"babel-runtime/core-js/object/set-prototype-of":8}],15:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}r.__esModule=!0;var o=e("../helpers/typeof"),i=n(o);r["default"]=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==("undefined"==typeof t?"undefined":(0,i["default"])(t))&&"function"!=typeof t?e:t}},{"../helpers/typeof":16}],16:[function(e,t,r){"use strict";var n=e("babel-runtime/core-js/symbol")["default"];r["default"]=function(e){return e&&e.constructor===n?"symbol":typeof e},r.__esModule=!0},{"babel-runtime/core-js/symbol":10}],17:[function(e,t,r){var n=e("../../modules/$.core");t.exports=function(e){return(n.JSON&&n.JSON.stringify||JSON.stringify).apply(JSON,arguments)}},{"../../modules/$.core":31}],18:[function(e,t,r){var n=e("../../modules/$");t.exports=function(e,t){return n.create(e,t)}},{"../../modules/$":56}],19:[function(e,t,r){var n=e("../../modules/$");t.exports=function(e,t,r){return n.setDesc(e,t,r)}},{"../../modules/$":56}],20:[function(e,t,r){var n=e("../../modules/$");e("../../modules/es6.object.get-own-property-descriptor"),t.exports=function(e,t){return n.getDesc(e,t)}},{"../../modules/$":56,"../../modules/es6.object.get-own-property-descriptor":81}],21:[function(e,t,r){e("../../modules/es6.object.get-prototype-of"),t.exports=e("../../modules/$.core").Object.getPrototypeOf},{"../../modules/$.core":31,"../../modules/es6.object.get-prototype-of":82}],22:[function(e,t,r){e("../../modules/es6.object.keys"),t.exports=e("../../modules/$.core").Object.keys},{"../../modules/$.core":31,"../../modules/es6.object.keys":83}],23:[function(e,t,r){e("../../modules/es6.object.set-prototype-of"),t.exports=e("../../modules/$.core").Object.setPrototypeOf},{"../../modules/$.core":31,"../../modules/es6.object.set-prototype-of":84}],24:[function(e,t,r){e("../modules/es6.object.to-string"),e("../modules/es6.string.iterator"),e("../modules/web.dom.iterable"),e("../modules/es6.promise"),t.exports=e("../modules/$.core").Promise},{"../modules/$.core":31,"../modules/es6.object.to-string":85,"../modules/es6.promise":86,"../modules/es6.string.iterator":87,"../modules/web.dom.iterable":89}],25:[function(e,t,r){e("../../modules/es6.symbol"),e("../../modules/es6.object.to-string"),t.exports=e("../../modules/$.core").Symbol},{"../../modules/$.core":31,"../../modules/es6.object.to-string":85,"../../modules/es6.symbol":88}],26:[function(e,t,r){t.exports=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e}},{}],27:[function(e,t,r){t.exports=function(){}},{}],28:[function(e,t,r){var n=e("./$.is-object");t.exports=function(e){if(!n(e))throw TypeError(e+" is not an object!");return e}},{"./$.is-object":49}],29:[function(e,t,r){var n=e("./$.cof"),o=e("./$.wks")("toStringTag"),i="Arguments"==n(function(){return arguments}());t.exports=function(e){var t,r,s;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(r=(t=Object(e))[o])?r:i?n(t):"Object"==(s=n(t))&&"function"==typeof t.callee?"Arguments":s}},{"./$.cof":30,"./$.wks":78}],30:[function(e,t,r){var n={}.toString;t.exports=function(e){return n.call(e).slice(8,-1)}},{}],31:[function(e,t,r){var n=t.exports={version:"1.2.6"};"number"==typeof __e&&(__e=n)},{}],32:[function(e,t,r){var n=e("./$.a-function");t.exports=function(e,t,r){if(n(e),void 0===t)return e;switch(r){case 1:return function(r){return e.call(t,r)};case 2:return function(r,n){return e.call(t,r,n)};case 3:return function(r,n,o){return e.call(t,r,n,o)}}return function(){return e.apply(t,arguments)}}},{"./$.a-function":26}],33:[function(e,t,r){t.exports=function(e){if(void 0==e)throw TypeError("Can't call method on  "+e);return e}},{}],34:[function(e,t,r){t.exports=!e("./$.fails")(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},{"./$.fails":38}],35:[function(e,t,r){var n=e("./$.is-object"),o=e("./$.global").document,i=n(o)&&n(o.createElement);t.exports=function(e){return i?o.createElement(e):{}}},{"./$.global":41,"./$.is-object":49}],36:[function(e,t,r){var n=e("./$");t.exports=function(e){var t=n.getKeys(e),r=n.getSymbols;if(r)for(var o,i=r(e),s=n.isEnum,a=0;i.length>a;)s.call(e,o=i[a++])&&t.push(o);return t}},{"./$":56}],37:[function(e,t,r){var n=e("./$.global"),o=e("./$.core"),i=e("./$.ctx"),s="prototype",a=function(e,t,r){var c,u,l,f=e&a.F,d=e&a.G,p=e&a.S,b=e&a.P,h=e&a.B,v=e&a.W,y=d?o:o[t]||(o[t]={}),_=d?n:p?n[t]:(n[t]||{})[s];d&&(r=t);for(c in r)u=!f&&_&&c in _,u&&c in y||(l=u?_[c]:r[c],y[c]=d&&"function"!=typeof _[c]?r[c]:h&&u?i(l,n):v&&_[c]==l?function(e){var t=function(t){return this instanceof e?new e(t):e(t)};return t[s]=e[s],t}(l):b&&"function"==typeof l?i(Function.call,l):l,b&&((y[s]||(y[s]={}))[c]=l))};a.F=1,a.G=2,a.S=4,a.P=8,a.B=16,a.W=32,t.exports=a},{"./$.core":31,"./$.ctx":32,"./$.global":41}],38:[function(e,t,r){t.exports=function(e){try{return!!e()}catch(t){return!0}}},{}],39:[function(e,t,r){var n=e("./$.ctx"),o=e("./$.iter-call"),i=e("./$.is-array-iter"),s=e("./$.an-object"),a=e("./$.to-length"),c=e("./core.get-iterator-method");t.exports=function(e,t,r,u){var l,f,d,p=c(e),b=n(r,u,t?2:1),h=0;if("function"!=typeof p)throw TypeError(e+" is not iterable!");if(i(p))for(l=a(e.length);l>h;h++)t?b(s(f=e[h])[0],f[1]):b(e[h]);else for(d=p.call(e);!(f=d.next()).done;)o(d,b,f.value,t)}},{"./$.an-object":28,"./$.ctx":32,"./$.is-array-iter":47,"./$.iter-call":50,"./$.to-length":75,"./core.get-iterator-method":79}],40:[function(e,t,r){var n=e("./$.to-iobject"),o=e("./$").getNames,i={}.toString,s="object"==typeof window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[],a=function(e){try{return o(e)}catch(t){return s.slice()}};t.exports.get=function(e){return s&&"[object Window]"==i.call(e)?a(e):o(n(e))}},{"./$":56,"./$.to-iobject":74}],41:[function(e,t,r){var n=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},{}],42:[function(e,t,r){var n={}.hasOwnProperty;t.exports=function(e,t){return n.call(e,t)}},{}],43:[function(e,t,r){var n=e("./$"),o=e("./$.property-desc");t.exports=e("./$.descriptors")?function(e,t,r){return n.setDesc(e,t,o(1,r))}:function(e,t,r){return e[t]=r,e}},{"./$":56,"./$.descriptors":34,"./$.property-desc":61}],44:[function(e,t,r){t.exports=e("./$.global").document&&document.documentElement},{"./$.global":41}],45:[function(e,t,r){t.exports=function(e,t,r){var n=void 0===r;switch(t.length){case 0:return n?e():e.call(r);case 1:return n?e(t[0]):e.call(r,t[0]);case 2:return n?e(t[0],t[1]):e.call(r,t[0],t[1]);case 3:return n?e(t[0],t[1],t[2]):e.call(r,t[0],t[1],t[2]);case 4:return n?e(t[0],t[1],t[2],t[3]):e.call(r,t[0],t[1],t[2],t[3])}return e.apply(r,t)}},{}],46:[function(e,t,r){var n=e("./$.cof");t.exports=Object("z").propertyIsEnumerable(0)?Object:function(e){return"String"==n(e)?e.split(""):Object(e)}},{"./$.cof":30}],47:[function(e,t,r){var n=e("./$.iterators"),o=e("./$.wks")("iterator"),i=Array.prototype;t.exports=function(e){return void 0!==e&&(n.Array===e||i[o]===e)}},{"./$.iterators":55,"./$.wks":78}],48:[function(e,t,r){var n=e("./$.cof");t.exports=Array.isArray||function(e){return"Array"==n(e)}},{"./$.cof":30}],49:[function(e,t,r){t.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},{}],50:[function(e,t,r){var n=e("./$.an-object");t.exports=function(e,t,r,o){try{return o?t(n(r)[0],r[1]):t(r)}catch(i){var s=e["return"];throw void 0!==s&&n(s.call(e)),i}}},{"./$.an-object":28}],51:[function(e,t,r){"use strict";var n=e("./$"),o=e("./$.property-desc"),i=e("./$.set-to-string-tag"),s={};e("./$.hide")(s,e("./$.wks")("iterator"),function(){return this}),t.exports=function(e,t,r){e.prototype=n.create(s,{next:o(1,r)}),i(e,t+" Iterator")}},{"./$":56,"./$.hide":43,"./$.property-desc":61,"./$.set-to-string-tag":67,"./$.wks":78}],52:[function(e,t,r){"use strict";var n=e("./$.library"),o=e("./$.export"),i=e("./$.redefine"),s=e("./$.hide"),a=e("./$.has"),c=e("./$.iterators"),u=e("./$.iter-create"),l=e("./$.set-to-string-tag"),f=e("./$").getProto,d=e("./$.wks")("iterator"),p=!([].keys&&"next"in[].keys()),b="@@iterator",h="keys",v="values",y=function(){return this};t.exports=function(e,t,r,_,g,m,j){u(r,t,_);var $,O,w=function(e){if(!p&&e in E)return E[e];switch(e){case h:return function(){return new r(this,e)};case v:return function(){return new r(this,e)}}return function(){return new r(this,e)}},k=t+" Iterator",x=g==v,C=!1,E=e.prototype,S=E[d]||E[b]||g&&E[g],T=S||w(g);if(S){var M=f(T.call(new e));l(M,k,!0),!n&&a(E,b)&&s(M,d,y),x&&S.name!==v&&(C=!0,T=function(){return S.call(this)})}if(n&&!j||!p&&!C&&E[d]||s(E,d,T),c[t]=T,c[k]=y,g)if($={values:x?T:w(v),keys:m?T:w(h),entries:x?w("entries"):T},j)for(O in $)O in E||i(E,O,$[O]);else o(o.P+o.F*(p||C),t,$);return $}},{"./$":56,"./$.export":37,"./$.has":42,"./$.hide":43,"./$.iter-create":51,"./$.iterators":55,"./$.library":58,"./$.redefine":63,"./$.set-to-string-tag":67,"./$.wks":78}],53:[function(e,t,r){var n=e("./$.wks")("iterator"),o=!1;try{var i=[7][n]();i["return"]=function(){o=!0},Array.from(i,function(){throw 2})}catch(s){}t.exports=function(e,t){if(!t&&!o)return!1;var r=!1;try{var i=[7],s=i[n]();s.next=function(){r=!0},i[n]=function(){return s},e(i)}catch(a){}return r}},{"./$.wks":78}],54:[function(e,t,r){t.exports=function(e,t){return{value:t,done:!!e}}},{}],55:[function(e,t,r){t.exports={}},{}],56:[function(e,t,r){var n=Object;t.exports={create:n.create,getProto:n.getPrototypeOf,isEnum:{}.propertyIsEnumerable,getDesc:n.getOwnPropertyDescriptor,setDesc:n.defineProperty,setDescs:n.defineProperties,getKeys:n.keys,getNames:n.getOwnPropertyNames,getSymbols:n.getOwnPropertySymbols,each:[].forEach}},{}],57:[function(e,t,r){var n=e("./$"),o=e("./$.to-iobject");t.exports=function(e,t){for(var r,i=o(e),s=n.getKeys(i),a=s.length,c=0;a>c;)if(i[r=s[c++]]===t)return r}},{"./$":56,"./$.to-iobject":74}],58:[function(e,t,r){t.exports=!0},{}],59:[function(e,t,r){var n,o,i,s=e("./$.global"),a=e("./$.task").set,c=s.MutationObserver||s.WebKitMutationObserver,u=s.process,l=s.Promise,f="process"==e("./$.cof")(u),d=function(){var e,t,r;for(f&&(e=u.domain)&&(u.domain=null,e.exit());n;)t=n.domain,r=n.fn,t&&t.enter(),r(),t&&t.exit(),n=n.next;o=void 0,e&&e.enter()};if(f)i=function(){u.nextTick(d)};else if(c){var p=1,b=document.createTextNode("");new c(d).observe(b,{characterData:!0}),i=function(){b.data=p=-p}}else i=l&&l.resolve?function(){l.resolve().then(d)}:function(){a.call(s,d)};t.exports=function(e){var t={fn:e,next:void 0,domain:f&&u.domain};o&&(o.next=t),n||(n=t,i()),o=t}},{"./$.cof":30,"./$.global":41,"./$.task":72}],60:[function(e,t,r){var n=e("./$.export"),o=e("./$.core"),i=e("./$.fails");t.exports=function(e,t){var r=(o.Object||{})[e]||Object[e],s={};s[e]=t(r),n(n.S+n.F*i(function(){r(1)}),"Object",s)}},{"./$.core":31,"./$.export":37,"./$.fails":38}],61:[function(e,t,r){t.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},{}],62:[function(e,t,r){var n=e("./$.redefine");t.exports=function(e,t){for(var r in t)n(e,r,t[r]);return e}},{"./$.redefine":63}],63:[function(e,t,r){t.exports=e("./$.hide")},{"./$.hide":43}],64:[function(e,t,r){t.exports=Object.is||function(e,t){return e===t?0!==e||1/e===1/t:e!=e&&t!=t}},{}],65:[function(e,t,r){var n=e("./$").getDesc,o=e("./$.is-object"),i=e("./$.an-object"),s=function(e,t){if(i(e),!o(t)&&null!==t)throw TypeError(t+": can't set as prototype!")};t.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(t,r,o){try{o=e("./$.ctx")(Function.call,n(Object.prototype,"__proto__").set,2),o(t,[]),r=!(t instanceof Array)}catch(i){r=!0}return function(e,t){return s(e,t),r?e.__proto__=t:o(e,t),e}}({},!1):void 0),check:s}},{"./$":56,"./$.an-object":28,"./$.ctx":32,"./$.is-object":49}],66:[function(e,t,r){"use strict";var n=e("./$.core"),o=e("./$"),i=e("./$.descriptors"),s=e("./$.wks")("species");t.exports=function(e){var t=n[e];i&&t&&!t[s]&&o.setDesc(t,s,{configurable:!0,get:function(){return this}})}},{"./$":56,"./$.core":31,"./$.descriptors":34,"./$.wks":78}],67:[function(e,t,r){var n=e("./$").setDesc,o=e("./$.has"),i=e("./$.wks")("toStringTag");t.exports=function(e,t,r){e&&!o(e=r?e:e.prototype,i)&&n(e,i,{configurable:!0,value:t})}},{"./$":56,"./$.has":42,"./$.wks":78}],68:[function(e,t,r){var n=e("./$.global"),o="__core-js_shared__",i=n[o]||(n[o]={});t.exports=function(e){return i[e]||(i[e]={})}},{"./$.global":41}],69:[function(e,t,r){var n=e("./$.an-object"),o=e("./$.a-function"),i=e("./$.wks")("species");t.exports=function(e,t){var r,s=n(e).constructor;return void 0===s||void 0==(r=n(s)[i])?t:o(r)}},{"./$.a-function":26,"./$.an-object":28,"./$.wks":78}],70:[function(e,t,r){t.exports=function(e,t,r){if(!(e instanceof t))throw TypeError(r+": use the 'new' operator!");return e}},{}],71:[function(e,t,r){var n=e("./$.to-integer"),o=e("./$.defined");t.exports=function(e){return function(t,r){var i,s,a=String(o(t)),c=n(r),u=a.length;return 0>c||c>=u?e?"":void 0:(i=a.charCodeAt(c),55296>i||i>56319||c+1===u||(s=a.charCodeAt(c+1))<56320||s>57343?e?a.charAt(c):i:e?a.slice(c,c+2):(i-55296<<10)+(s-56320)+65536)}}},{"./$.defined":33,"./$.to-integer":73}],72:[function(e,t,r){var n,o,i,s=e("./$.ctx"),a=e("./$.invoke"),c=e("./$.html"),u=e("./$.dom-create"),l=e("./$.global"),f=l.process,d=l.setImmediate,p=l.clearImmediate,b=l.MessageChannel,h=0,v={},y="onreadystatechange",_=function(){var e=+this;if(v.hasOwnProperty(e)){var t=v[e];delete v[e],t()}},g=function(e){_.call(e.data)};d&&p||(d=function(e){for(var t=[],r=1;arguments.length>r;)t.push(arguments[r++]);return v[++h]=function(){a("function"==typeof e?e:Function(e),t)},n(h),h},p=function(e){delete v[e]},"process"==e("./$.cof")(f)?n=function(e){f.nextTick(s(_,e,1))}:b?(o=new b,i=o.port2,o.port1.onmessage=g,n=s(i.postMessage,i,1)):l.addEventListener&&"function"==typeof postMessage&&!l.importScripts?(n=function(e){l.postMessage(e+"","*")},l.addEventListener("message",g,!1)):n=y in u("script")?function(e){c.appendChild(u("script"))[y]=function(){c.removeChild(this),_.call(e)}}:function(e){setTimeout(s(_,e,1),0)}),t.exports={set:d,clear:p}},{"./$.cof":30,"./$.ctx":32,"./$.dom-create":35,"./$.global":41,"./$.html":44,"./$.invoke":45}],73:[function(e,t,r){var n=Math.ceil,o=Math.floor;t.exports=function(e){return isNaN(e=+e)?0:(e>0?o:n)(e)}},{}],74:[function(e,t,r){var n=e("./$.iobject"),o=e("./$.defined");t.exports=function(e){return n(o(e))}},{"./$.defined":33,"./$.iobject":46}],75:[function(e,t,r){var n=e("./$.to-integer"),o=Math.min;t.exports=function(e){return e>0?o(n(e),9007199254740991):0}},{"./$.to-integer":73}],76:[function(e,t,r){var n=e("./$.defined");t.exports=function(e){return Object(n(e))}},{"./$.defined":33}],77:[function(e,t,r){var n=0,o=Math.random();t.exports=function(e){return"Symbol(".concat(void 0===e?"":e,")_",(++n+o).toString(36))}},{}],78:[function(e,t,r){var n=e("./$.shared")("wks"),o=e("./$.uid"),i=e("./$.global").Symbol;t.exports=function(e){return n[e]||(n[e]=i&&i[e]||(i||o)("Symbol."+e))}},{"./$.global":41,"./$.shared":68,"./$.uid":77}],79:[function(e,t,r){var n=e("./$.classof"),o=e("./$.wks")("iterator"),i=e("./$.iterators");t.exports=e("./$.core").getIteratorMethod=function(e){return void 0!=e?e[o]||e["@@iterator"]||i[n(e)]:void 0}},{"./$.classof":29,"./$.core":31,"./$.iterators":55,"./$.wks":78}],80:[function(e,t,r){"use strict";var n=e("./$.add-to-unscopables"),o=e("./$.iter-step"),i=e("./$.iterators"),s=e("./$.to-iobject");t.exports=e("./$.iter-define")(Array,"Array",function(e,t){this._t=s(e),this._i=0,this._k=t},function(){var e=this._t,t=this._k,r=this._i++;return!e||r>=e.length?(this._t=void 0,o(1)):"keys"==t?o(0,r):"values"==t?o(0,e[r]):o(0,[r,e[r]])},"values"),i.Arguments=i.Array,n("keys"),n("values"),n("entries")},{"./$.add-to-unscopables":27,"./$.iter-define":52,"./$.iter-step":54,"./$.iterators":55,"./$.to-iobject":74}],81:[function(e,t,r){var n=e("./$.to-iobject");e("./$.object-sap")("getOwnPropertyDescriptor",function(e){return function(t,r){return e(n(t),r)}})},{"./$.object-sap":60,"./$.to-iobject":74}],82:[function(e,t,r){var n=e("./$.to-object");e("./$.object-sap")("getPrototypeOf",function(e){return function(t){return e(n(t))}})},{"./$.object-sap":60,"./$.to-object":76}],83:[function(e,t,r){var n=e("./$.to-object");e("./$.object-sap")("keys",function(e){return function(t){return e(n(t))}})},{"./$.object-sap":60,"./$.to-object":76}],84:[function(e,t,r){var n=e("./$.export");n(n.S,"Object",{setPrototypeOf:e("./$.set-proto").set})},{"./$.export":37,"./$.set-proto":65}],85:[function(e,t,r){},{}],86:[function(e,t,r){"use strict";var n,o=e("./$"),i=e("./$.library"),s=e("./$.global"),a=e("./$.ctx"),c=e("./$.classof"),u=e("./$.export"),l=e("./$.is-object"),f=e("./$.an-object"),d=e("./$.a-function"),p=e("./$.strict-new"),b=e("./$.for-of"),h=e("./$.set-proto").set,v=e("./$.same-value"),y=e("./$.wks")("species"),_=e("./$.species-constructor"),g=e("./$.microtask"),m="Promise",j=s.process,$="process"==c(j),O=s[m],w=function(e){var t=new O(function(){});return e&&(t.constructor=Object),O.resolve(t)===t},k=function(){function t(e){var r=new O(e);return h(r,t.prototype),r}var r=!1;try{if(r=O&&O.resolve&&w(),h(t,O),t.prototype=o.create(O.prototype,{constructor:{value:t}}),t.resolve(5).then(function(){})instanceof t||(r=!1),r&&e("./$.descriptors")){var n=!1;O.resolve(o.setDesc({},"then",{get:function(){n=!0}})),r=n}}catch(i){r=!1}return r}(),x=function(e,t){return i&&e===O&&t===n?!0:v(e,t)},C=function(e){var t=f(e)[y];return void 0!=t?t:e},E=function(e){var t;return l(e)&&"function"==typeof(t=e.then)?t:!1},S=function(e){var t,r;this.promise=new e(function(e,n){if(void 0!==t||void 0!==r)throw TypeError("Bad Promise constructor");t=e,r=n}),this.resolve=d(t),this.reject=d(r)},T=function(e){try{e()}catch(t){return{error:t}}},M=function(e,t){if(!e.n){e.n=!0;var r=e.c;g(function(){for(var n=e.v,o=1==e.s,i=0,a=function(t){var r,i,s=o?t.ok:t.fail,a=t.resolve,c=t.reject;try{s?(o||(e.h=!0),r=s===!0?n:s(n),r===t.promise?c(TypeError("Promise-chain cycle")):(i=E(r))?i.call(r,a,c):a(r)):c(n)}catch(u){c(u)}};r.length>i;)a(r[i++]);r.length=0,e.n=!1,t&&setTimeout(function(){var t,r,o=e.p;N(o)&&($?j.emit("unhandledRejection",n,o):(t=s.onunhandledrejection)?t({promise:o,reason:n}):(r=s.console)&&r.error&&r.error("Unhandled promise rejection",n)),e.a=void 0},1)})}},N=function(e){var t,r=e._d,n=r.a||r.c,o=0;if(r.h)return!1;for(;n.length>o;)if(t=n[o++],t.fail||!N(t.promise))return!1;return!0},R=function(e){var t=this;t.d||(t.d=!0,t=t.r||t,t.v=e,t.s=2,t.a=t.c.slice(),M(t,!0))},D=function(e){var t,r=this;if(!r.d){r.d=!0,r=r.r||r;try{if(r.p===e)throw TypeError("Promise can't be resolved itself");(t=E(e))?g(function(){var n={r:r,d:!1};try{t.call(e,a(D,n,1),a(R,n,1))}catch(o){R.call(n,o)}}):(r.v=e,r.s=1,M(r,!1))}catch(n){R.call({r:r,d:!1},n)}}};k||(O=function(e){d(e);var t=this._d={p:p(this,O,m),c:[],a:void 0,s:0,d:!1,v:void 0,h:!1,n:!1};try{e(a(D,t,1),a(R,t,1))}catch(r){R.call(t,r)}},e("./$.redefine-all")(O.prototype,{then:function(e,t){var r=new S(_(this,O)),n=r.promise,o=this._d;return r.ok="function"==typeof e?e:!0,r.fail="function"==typeof t&&t,o.c.push(r),o.a&&o.a.push(r),o.s&&M(o,!1),n},"catch":function(e){return this.then(void 0,e)}})),u(u.G+u.W+u.F*!k,{Promise:O}),e("./$.set-to-string-tag")(O,m),e("./$.set-species")(m),n=e("./$.core")[m],u(u.S+u.F*!k,m,{reject:function(e){var t=new S(this),r=t.reject;return r(e),t.promise}}),u(u.S+u.F*(!k||w(!0)),m,{resolve:function(e){if(e instanceof O&&x(e.constructor,this))return e;var t=new S(this),r=t.resolve;return r(e),t.promise}}),u(u.S+u.F*!(k&&e("./$.iter-detect")(function(e){O.all(e)["catch"](function(){})})),m,{all:function(e){var t=C(this),r=new S(t),n=r.resolve,i=r.reject,s=[],a=T(function(){b(e,!1,s.push,s);var r=s.length,a=Array(r);r?o.each.call(s,function(e,o){var s=!1;t.resolve(e).then(function(e){s||(s=!0,a[o]=e,--r||n(a))},i)}):n(a)});return a&&i(a.error),r.promise},race:function(e){var t=C(this),r=new S(t),n=r.reject,o=T(function(){b(e,!1,function(e){t.resolve(e).then(r.resolve,n)})});return o&&n(o.error),r.promise}})},{"./$":56,"./$.a-function":26,"./$.an-object":28,"./$.classof":29,"./$.core":31,"./$.ctx":32,"./$.descriptors":34,"./$.export":37,"./$.for-of":39,"./$.global":41,"./$.is-object":49,"./$.iter-detect":53,"./$.library":58,"./$.microtask":59,"./$.redefine-all":62,"./$.same-value":64,"./$.set-proto":65,"./$.set-species":66,"./$.set-to-string-tag":67,"./$.species-constructor":69,"./$.strict-new":70,"./$.wks":78}],87:[function(e,t,r){"use strict";var n=e("./$.string-at")(!0);e("./$.iter-define")(String,"String",function(e){this._t=String(e),this._i=0},function(){var e,t=this._t,r=this._i;return r>=t.length?{value:void 0,done:!0}:(e=n(t,r),this._i+=e.length,{value:e,done:!1})})},{"./$.iter-define":52,"./$.string-at":71}],88:[function(e,t,r){"use strict";var n=e("./$"),o=e("./$.global"),i=e("./$.has"),s=e("./$.descriptors"),a=e("./$.export"),c=e("./$.redefine"),u=e("./$.fails"),l=e("./$.shared"),f=e("./$.set-to-string-tag"),d=e("./$.uid"),p=e("./$.wks"),b=e("./$.keyof"),h=e("./$.get-names"),v=e("./$.enum-keys"),y=e("./$.is-array"),_=e("./$.an-object"),g=e("./$.to-iobject"),m=e("./$.property-desc"),j=n.getDesc,$=n.setDesc,O=n.create,w=h.get,k=o.Symbol,x=o.JSON,C=x&&x.stringify,E=!1,S=p("_hidden"),T=n.isEnum,M=l("symbol-registry"),N=l("symbols"),R="function"==typeof k,D=Object.prototype,P=s&&u(function(){return 7!=O($({},"a",{get:function(){return $(this,"a",{value:7}).a}})).a})?function(e,t,r){var n=j(D,t);n&&delete D[t],$(e,t,r),n&&e!==D&&$(D,t,n)}:$,A=function(e){var t=N[e]=O(k.prototype);return t._k=e,s&&E&&P(D,e,{configurable:!0,set:function(t){i(this,S)&&i(this[S],e)&&(this[S][e]=!1),P(this,e,m(1,t))}}),t},L=function(e){return"symbol"==typeof e},I=function(e,t,r){return r&&i(N,t)?(r.enumerable?(i(e,S)&&e[S][t]&&(e[S][t]=!1),r=O(r,{enumerable:m(0,!1)})):(i(e,S)||$(e,S,m(1,{})),e[S][t]=!0),P(e,t,r)):$(e,t,r)},F=function(e,t){_(e);for(var r,n=v(t=g(t)),o=0,i=n.length;i>o;)I(e,r=n[o++],t[r]);return e},V=function(e,t){return void 0===t?O(e):F(O(e),t)},z=function(e){var t=T.call(this,e);return t||!i(this,e)||!i(N,e)||i(this,S)&&this[S][e]?t:!0},U=function(e,t){var r=j(e=g(e),t);return!r||!i(N,t)||i(e,S)&&e[S][t]||(r.enumerable=!0),r},H=function(e){for(var t,r=w(g(e)),n=[],o=0;r.length>o;)i(N,t=r[o++])||t==S||n.push(t);return n},B=function(e){for(var t,r=w(g(e)),n=[],o=0;r.length>o;)i(N,t=r[o++])&&n.push(N[t]);return n},J=function(e){if(void 0!==e&&!L(e)){for(var t,r,n=[e],o=1,i=arguments;i.length>o;)n.push(i[o++]);return t=n[1],"function"==typeof t&&(r=t),!r&&y(t)||(t=function(e,t){return r&&(t=r.call(this,e,t)),L(t)?void 0:t}),n[1]=t,C.apply(x,n)}},W=u(function(){var e=k();return"[null]"!=C([e])||"{}"!=C({a:e})||"{}"!=C(Object(e))});R||(k=function(){if(L(this))throw TypeError("Symbol is not a constructor");return A(d(arguments.length>0?arguments[0]:void 0))},c(k.prototype,"toString",function(){return this._k}),L=function(e){return e instanceof k},n.create=V,n.isEnum=z,n.getDesc=U,n.setDesc=I,n.setDescs=F,n.getNames=h.get=H,n.getSymbols=B,s&&!e("./$.library")&&c(D,"propertyIsEnumerable",z,!0));var Y={"for":function(e){return i(M,e+="")?M[e]:M[e]=k(e)},keyFor:function(e){return b(M,e)},useSetter:function(){E=!0},useSimple:function(){E=!1}};n.each.call("hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),function(e){var t=p(e);Y[e]=R?t:A(t)}),E=!0,a(a.G+a.W,{Symbol:k}),a(a.S,"Symbol",Y),a(a.S+a.F*!R,"Object",{create:V,defineProperty:I,defineProperties:F,getOwnPropertyDescriptor:U,getOwnPropertyNames:H,getOwnPropertySymbols:B}),x&&a(a.S+a.F*(!R||W),"JSON",{stringify:J}),f(k,"Symbol"),f(Math,"Math",!0),f(o.JSON,"JSON",!0)},{"./$":56,"./$.an-object":28,"./$.descriptors":34,"./$.enum-keys":36,"./$.export":37,"./$.fails":38,"./$.get-names":40,"./$.global":41,"./$.has":42,"./$.is-array":48,"./$.keyof":57,"./$.library":58,"./$.property-desc":61,"./$.redefine":63,"./$.set-to-string-tag":67,"./$.shared":68,"./$.to-iobject":74,"./$.uid":77,"./$.wks":78}],89:[function(e,t,r){e("./es6.array.iterator");var n=e("./$.iterators");n.NodeList=n.HTMLCollection=n.Array},{"./$.iterators":55,"./es6.array.iterator":80}],90:[function(e,t,r){window.MutationObserver=window.MutationObserver||window.WebKitMutationObserver||function(e){function t(e){this.g=[],this.k=e}function r(e){!function r(){var n=e.takeRecords();n.length&&e.k(n,e),e.f=setTimeout(r,t._period)}()}function n(t){var r,n={type:null,target:null,addedNodes:[],removedNodes:[],previousSibling:null,nextSibling:null,attributeName:null,attributeNamespace:null,oldValue:null};for(r in t)n[r]!==e&&t[r]!==e&&(n[r]=t[r]);return n}function o(e,t){var r=a(e,t);return function(n){var o,c=n.length;t.a&&r.a&&i(n,e,r.a,t.d),(t.b||t.e)&&(o=s(n,e,r,t)),(o||n.length!==c)&&(r=a(e,t))}}function i(t,r,o,i){for(var s,a,c={},u=r.attributes,l=u.length;l--;)s=u[l],a=s.name,i&&i[a]===e||(s.value!==o[a]&&t.push(n({type:"attributes",target:r,attributeName:a,oldValue:o[a],attributeNamespace:s.namespaceURI})),c[a]=!0);for(a in o)c[a]||t.push(n({target:r,type:"attributes",attributeName:a,oldValue:o[a]}))}function s(t,r,o,s){function a(e,r,o,a,c){var l=e.length-1;c=-~((l-c)/2);for(var f,d,p;p=e.pop();)f=o[p.h],d=a[p.i],s.b&&c&&Math.abs(p.h-p.i)>=l&&(t.push(n({type:"childList",target:r,addedNodes:[f],removedNodes:[f],nextSibling:f.nextSibling,previousSibling:f.previousSibling})),c--),s.a&&d.a&&i(t,f,d.a,s.d),s.c&&3===f.nodeType&&f.nodeValue!==d.c&&t.push(n({type:"characterData",target:f})),s.e&&u(f,d)}function u(r,o){for(var d,p,b,h,v,y=r.childNodes,_=o.b,g=y.length,m=_?_.length:0,j=0,$=0,O=0;g>$||m>O;)h=y[$],v=(b=_[O])&&b.j,h===v?(s.a&&b.a&&i(t,h,b.a,s.d),s.c&&b.c!==e&&h.nodeValue!==b.c&&t.push(n({type:"characterData",target:h})),p&&a(p,r,y,_,j),s.e&&(h.childNodes.length||b.b&&b.b.length)&&u(h,b),$++,O++):(l=!0,d||(d={},p=[]),h&&(d[b=c(h)]||(d[b]=!0,-1===(b=f(_,h,O,"j"))?s.b&&(t.push(n({type:"childList",target:r,addedNodes:[h],nextSibling:h.nextSibling,previousSibling:h.previousSibling})),j++):p.push({h:$,i:b})),$++),v&&v!==y[$]&&(d[b=c(v)]||(d[b]=!0,-1===(b=f(y,v,$))?s.b&&(t.push(n({type:"childList",target:o.j,removedNodes:[v],nextSibling:_[O+1],previousSibling:_[O-1]})),j--):p.push({h:b,i:O})),O++));p&&a(p,r,y,_,j)}var l;return u(r,o),l}function a(e,t){var r=!0;return function n(e){var o={j:e};return!t.c||3!==e.nodeType&&8!==e.nodeType?(t.a&&r&&1===e.nodeType&&(o.a=l(e.attributes,function(e,r){return t.d&&!t.d[r.name]||(e[r.name]=r.value),e})),r&&(t.b||t.c||t.a&&t.e)&&(o.b=u(e.childNodes,n)),r=t.e):o.c=e.nodeValue,o}(e)}function c(e){try{return e.id||(e.mo_id=e.mo_id||d++)}catch(t){try{return e.nodeValue}catch(r){return d++}}}function u(e,t){for(var r=[],n=0;n<e.length;n++)r[n]=t(e[n],n,e);return r}function l(e,t){for(var r={},n=0;n<e.length;n++)r=t(r,e[n],n,e);return r}function f(e,t,r,n){for(;r<e.length;r++)if((n?e[r][n]:e[r])===t)return r;return-1}t._period=30,t.prototype={observe:function(e,t){for(var n={a:!!(t.attributes||t.attributeFilter||t.attributeOldValue),b:!!t.childList,e:!!t.subtree,c:!(!t.characterData&&!t.characterDataOldValue)},i=this.g,s=0;s<i.length;s++)i[s].m===e&&i.splice(s,1);t.attributeFilter&&(n.d=l(t.attributeFilter,function(e,t){
return e[t]=!0,e})),i.push({m:e,l:o(e,n)}),this.f||r(this)},takeRecords:function(){for(var e=[],t=this.g,r=0;r<t.length;r++)t[r].l(e);return e},disconnect:function(){this.g=[],clearTimeout(this.f),this.f=null}};var d=1;return t}(void 0)},{}],91:[function(e,t,r){Object.observe||function(e,t,r,n){"use strict";var o,i,s=["add","update","delete","reconfigure","setPrototype","preventExtensions"],a=t.isArray||function(e){return function(t){return"[object Array]"===e.call(t)}}(e.prototype.toString),c=t.prototype.indexOf?t.indexOf||function(e,r,n){return t.prototype.indexOf.call(e,r,n)}:function(e,t,r){for(var n=r||0;n<e.length;n++)if(e[n]===t)return n;return-1},u=r.Map!==n&&Map.prototype.forEach?function(){return new Map}:function(){var e=[],t=[];return{size:0,has:function(t){return c(e,t)>-1},get:function(r){return t[c(e,r)]},set:function(r,n){var o=c(e,r);-1===o?(e.push(r),t.push(n),this.size++):t[o]=n},"delete":function(r){var n=c(e,r);n>-1&&(e.splice(n,1),t.splice(n,1),this.size--)},forEach:function(r){for(var n=0;n<e.length;n++)r.call(arguments[1],t[n],e[n],this)}}},l=e.getOwnPropertyNames?function(){var t=e.getOwnPropertyNames;try{arguments.callee}catch(r){var n=(t(c).join(" ")+" ").replace(/prototype |length |name /g,"").slice(0,-1).split(" ");n.length&&(t=function(t){var r=e.getOwnPropertyNames(t);if("function"==typeof t)for(var o,i=0;i<n.length;)(o=c(r,n[i++]))>-1&&r.splice(o,1);return r})}return t}():function(t){var r,n,o=[];if("hasOwnProperty"in t)for(r in t)t.hasOwnProperty(r)&&o.push(r);else{n=e.hasOwnProperty;for(r in t)n.call(t,r)&&o.push(r)}return a(t)&&o.push("length"),o},f=e.getPrototypeOf,d=e.defineProperties&&e.getOwnPropertyDescriptor,p=r.requestAnimationFrame||r.webkitRequestAnimationFrame||function(){var e=+new Date,t=e;return function(r){return setTimeout(function(){r((t=+new Date)-e)},17)}}(),b=function(e,t,r){var n=o.get(e);n?(v(n,e),m(e,n,t,r)):(n=h(e),m(e,n,t,r),1===o.size&&p(y))},h=function(t,r){var n,i=l(t),s=[],a=0,r={handlers:u(),frozen:e.isFrozen?e.isFrozen(t):!1,extensible:e.isExtensible?e.isExtensible(t):!0,proto:f&&f(t),properties:i,values:s,notifier:g(t,r)};if(d)for(n=r.descriptors=[];a<i.length;)n[a]=d(t,i[a]),s[a]=t[i[a++]];else for(;a<i.length;)s[a]=t[i[a++]];return o.set(t,r),r},v=function(){var t=d?function(e,t,r,n,o){var i=t.properties[r],s=e[i],a=t.values[r],c=t.descriptors[r];"value"in o&&(a===s?0===a&&1/a!==1/s:a===a||s===s)&&(j(e,t,{name:i,type:"update",object:e,oldValue:a},n),t.values[r]=s),!c.configurable||o.configurable&&o.writable===c.writable&&o.enumerable===c.enumerable&&o.get===c.get&&o.set===c.set||(j(e,t,{name:i,type:"reconfigure",object:e,oldValue:a},n),t.descriptors[r]=o)}:function(e,t,r,n){var o=t.properties[r],i=e[o],s=t.values[r];(s===i?0===s&&1/s!==1/i:s===s||i===i)&&(j(e,t,{name:o,type:"update",object:e,oldValue:s},n),t.values[r]=i)},r=d?function(e,r,n,o,i){for(var s,a=r.length;n&&a--;)null!==r[a]&&(s=d(e,r[a]),n--,s?t(e,o,a,i,s):(j(e,o,{name:r[a],type:"delete",object:e,oldValue:o.values[a]},i),o.properties.splice(a,1),o.values.splice(a,1),o.descriptors.splice(a,1)))}:function(e,t,r,n,o){for(var i=t.length;r&&i--;)null!==t[i]&&(j(e,n,{name:t[i],type:"delete",object:e,oldValue:n.values[i]},o),n.properties.splice(i,1),n.values.splice(i,1),r--)};return function(n,o,i){if(n.handlers.size&&!n.frozen){var s,a,u,p,b,h,v,y,_=n.values,g=n.descriptors,m=0;if(n.extensible)if(s=n.properties.slice(),a=s.length,u=l(o),g){for(;m<u.length;)b=u[m++],p=c(s,b),y=d(o,b),-1===p?(j(o,n,{name:b,type:"add",object:o},i),n.properties.push(b),_.push(o[b]),g.push(y)):(s[p]=null,a--,t(o,n,p,i,y));r(o,s,a,n,i),e.isExtensible(o)||(n.extensible=!1,j(o,n,{type:"preventExtensions",object:o},i),n.frozen=e.isFrozen(o))}else{for(;m<u.length;)b=u[m++],p=c(s,b),h=o[b],-1===p?(j(o,n,{name:b,type:"add",object:o},i),n.properties.push(b),_.push(h)):(s[p]=null,a--,t(o,n,p,i));r(o,s,a,n,i)}else if(!n.frozen){for(;m<s.length;m++)b=s[m],t(o,n,m,i,d(o,b));e.isFrozen(o)&&(n.frozen=!0)}f&&(v=f(o),v!==n.proto&&(j(o,n,{type:"setPrototype",name:"__proto__",object:o,oldValue:n.proto}),n.proto=v))}}}(),y=function(){o.size&&(o.forEach(v),i.forEach(_),p(y))},_=function(e,t){var r=e.changeRecords;r.length&&(e.changeRecords=[],t(r))},g=function(e,t){return arguments.length<2&&(t=o.get(e)),t&&t.notifier||{notify:function(t){t.type;var r=o.get(e);if(r){var n,i={object:e};for(n in t)"object"!==n&&(i[n]=t[n]);j(e,r,i)}},performChange:function(t,r){if("string"!=typeof t)throw new TypeError("Invalid non-string changeType");if("function"!=typeof r)throw new TypeError("Cannot perform non-function");var i,s,a=o.get(e),c=arguments[2],u=c===n?r():r.call(c);if(a&&v(a,e,t),a&&u&&"object"==typeof u){s={object:e,type:t};for(i in u)"object"!==i&&"type"!==i&&(s[i]=u[i]);j(e,a,s)}}}},m=function(e,t,r,n){var o=i.get(r);o||i.set(r,o={observed:u(),changeRecords:[]}),o.observed.set(e,{acceptList:n.slice(),data:t}),t.handlers.set(r,o)},j=function(e,t,r,n){t.handlers.forEach(function(t){var o=t.observed.get(e).acceptList;("string"!=typeof n||-1===c(o,n))&&c(o,r.type)>-1&&t.changeRecords.push(r)})};o=u(),i=u(),e.observe=function(t,r,o){if(!t||"object"!=typeof t&&"function"!=typeof t)throw new TypeError("Object.observe cannot observe non-object");if("function"!=typeof r)throw new TypeError("Object.observe cannot deliver to non-function");if(e.isFrozen&&e.isFrozen(r))throw new TypeError("Object.observe cannot deliver to a frozen function object");if(o===n)o=s;else if(!o||"object"!=typeof o)throw new TypeError("Third argument to Object.observe must be an array of strings.");return b(t,r,o),t},e.unobserve=function(e,t){if(null===e||"object"!=typeof e&&"function"!=typeof e)throw new TypeError("Object.unobserve cannot unobserve non-object");if("function"!=typeof t)throw new TypeError("Object.unobserve cannot deliver to non-function");var r,n=i.get(t);return n&&(r=n.observed.get(e))&&(n.observed.forEach(function(e,t){v(e.data,t)}),p(function(){_(n,t)}),1===n.observed.size&&n.observed.has(e)?i["delete"](t):n.observed["delete"](e),1===r.data.handlers.size?o["delete"](e):r.data.handlers["delete"](t)),e},e.getNotifier=function(t){if(null===t||"object"!=typeof t&&"function"!=typeof t)throw new TypeError("Object.getNotifier cannot getNotifier non-object");return e.isFrozen&&e.isFrozen(t)?null:g(t)},e.deliverChangeRecords=function(e){if("function"!=typeof e)throw new TypeError("Object.deliverChangeRecords cannot deliver to non-function");var t=i.get(e);t&&(t.observed.forEach(function(e,t){v(e.data,t)}),_(t,e))}}(Object,Array,this)},{}],92:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(r,"__esModule",{value:!0}),r.DataObjectObserver=r.DataObjectReporter=r.Syncher=void 0,e("mutationobserver-shim"),e("object.observe"),e("array.observe");var o=e("./syncher/Syncher"),i=n(o),s=e("./syncher/DataObjectReporter"),a=n(s),c=e("./syncher/DataObjectObserver"),u=n(c);r.Syncher=i["default"],r.DataObjectReporter=a["default"],r.DataObjectObserver=u["default"]},{"./syncher/DataObjectObserver":95,"./syncher/DataObjectReporter":96,"./syncher/Syncher":99,"array.observe":1,"mutationobserver-shim":90,"object.observe":91}],93:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(r,"__esModule",{value:!0});var o=e("babel-runtime/core-js/promise"),i=n(o),s=e("babel-runtime/core-js/object/keys"),a=n(s),c=e("babel-runtime/helpers/classCallCheck"),u=n(c),l=e("babel-runtime/helpers/createClass"),f=n(l),d=e("./SyncObject"),p=n(d),b=e("./DataObjectChild"),h=n(b),v=e("../utils/utils.js"),y=function(){function e(t,r,n,o,i,s){(0,u["default"])(this,e);var a=this;a._syncher=t,a._url=r,a._schema=n,a._status=o,a._syncObj=new p["default"](i),a._childrens=s,a._version=0,a._childId=0,a._childrenObjects={},a._childrenListeners=[],a._owner=t._owner,a._bus=t._bus}return(0,f["default"])(e,[{key:"_allocateListeners",value:function(){var e=this,t=this,r=t._url+"/children/";t._childrens&&t._childrens.forEach(function(n){var o=r+n,i=t._bus.addListener(o,function(r){if(r.from!==e._owner)switch(console.log("DataObject-Children-RCV: ",r),r.type){case"create":t._onChildCreate(r);break;case"delete":console.log(r);break;default:t._changeChildren(r)}});t._childrenListeners.push(i)})}},{key:"_releaseListeners",value:function(){var e=this;e._childrenListeners.forEach(function(e){e.remove()}),(0,a["default"])(e._childrenObjects).forEach(function(t){e._childrenObjects[t]._releaseListeners()})}},{key:"pause",value:function(){throw"Not implemented"}},{key:"resume",value:function(){throw"Not implemented"}},{key:"stop",value:function(){throw"Not implemented"}},{key:"addChild",value:function(e,t){var r=this;r._childId++;var n=r._owner+"#"+r._childId,o=r._url+"/children/"+e,s={type:"create",from:r._owner,to:o,body:{resource:n,value:t}};return new i["default"](function(e){var i=r._bus.postMessage(s);console.log("create-reporter-child( "+r._owner+" ): ",s);var a=new h["default"](r,n,t,r._owner,i);a.onChange(function(e){r._onChange(e,{path:o,childId:n})}),r._childrenObjects[n]=a,e(a)})}},{key:"onAddChild",value:function(e){this._onAddChildrenHandler=e}},{key:"_onChildCreate",value:function(e){var t=this,r=e.body.resource;console.log("create-observer-child( "+t._owner+" ): ",e);var n=new h["default"](t,r,e.body.value);t._childrenObjects[r]=n,setTimeout(function(){t._bus.postMessage({id:e.id,type:"response",from:e.to,to:e.from,body:{code:200,source:t._owner}})});var o={type:e.type,from:e.from,url:e.to,value:e.body.value,childId:r,identity:e.body.identity};t._onAddChildrenHandler&&(console.log("ADD-CHILDREN-EVENT: ",o),t._onAddChildrenHandler(o))}},{key:"_onChange",value:function(e,t){var r=this;if(r._version++,"on"===r._status){var n={type:"update",from:r._url,to:r._url+"/changes",body:{version:r._version,source:r._owner,attribute:e.field}};e.oType===d.ObjectType.OBJECT?e.cType!==d.ChangeType.REMOVE&&(n.body.value=e.data):(n.body.attributeType=e.oType,n.body.value=e.data,e.cType!==d.ChangeType.UPDATE&&(n.body.operation=e.cType)),t&&(n.to=t.path,n.body.resource=t.childId),r._bus.postMessage(n)}}},{key:"_changeObject",value:function(e,t){var r=this;if(r._version+1===t.body.version){r._version++;var n=t.body.attribute,o=(0,v.deepClone)(t.body.value),i=e.findBefore(n);if(t.body.attributeType===d.ObjectType.ARRAY)if(t.body.operation===d.ChangeType.ADD){var s=i.obj,a=i.last;Array.prototype.splice.apply(s,[a,0].concat(o))}else if(t.body.operation===d.ChangeType.REMOVE){var c=i.obj,u=i.last;c.splice(u,o)}else i.obj[i.last]=o;else t.body.value?i.obj[i.last]=o:delete i.obj[i.last]}else console.log("UNSYNCHRONIZED VERSION: (data => "+r._version+", msg => "+t.body.version+")")}},{key:"_changeChildren",value:function(e){var t=this;console.log("Change children: ",t._owner,e);var r=e.body.resource,n=t._childrenObjects[r];n?t._changeObject(n._syncObj,e):console.log("No children found for: ",r)}},{key:"url",get:function(){return this._url}},{key:"schema",get:function(){return this._schema}},{key:"status",get:function(){return this._status}},{key:"data",get:function(){return this._syncObj.data}},{key:"childrens",get:function(){return this._childrenObjects}}]),e}();r["default"]=y,t.exports=r["default"]},{"../utils/utils.js":100,"./DataObjectChild":94,"./SyncObject":98,"babel-runtime/core-js/object/keys":7,"babel-runtime/core-js/promise":9,"babel-runtime/helpers/classCallCheck":11,"babel-runtime/helpers/createClass":12}],94:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(r,"__esModule",{value:!0});var o=e("babel-runtime/helpers/classCallCheck"),i=n(o),s=e("babel-runtime/helpers/createClass"),a=n(s),c=e("./SyncObject"),u=n(c),l=function(){function e(t,r,n,o,s){(0,i["default"])(this,e);var a=this;a._parent=t,a._childId=r,a._owner=o,a._msgId=s,a._syncObj=new u["default"](n),a._bus=t._bus,a._allocateListeners()}return(0,a["default"])(e,[{key:"_allocateListeners",value:function(){var e=this;e._owner&&(e._listener=e._bus.addListener(e._owner,function(t){"response"===t.type&&t.id===e._msgId&&(console.log("DataObjectChild.onResponse:",t),e._onResponse(t))}))}},{key:"_releaseListeners",value:function(){var e=this;e._listener&&e._listener.remove()}},{key:"delete",value:function(){var e=this;delete e._parent._children[e._childId],e._releaseListeners()}},{key:"onChange",value:function(e){this._syncObj.observe(function(t){e(t)})}},{key:"onResponse",value:function(e){this._onResponseHandler=e}},{key:"_onResponse",value:function(e){var t=this,r={type:e.type,url:e.body.source,code:e.body.code};t._onResponseHandler&&t._onResponseHandler(r)}},{key:"childId",get:function(){return this._childId}},{key:"data",get:function(){return this._syncObj.data}}]),e}();r["default"]=l,t.exports=r["default"]},{"./SyncObject":98,"babel-runtime/helpers/classCallCheck":11,"babel-runtime/helpers/createClass":12}],95:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(r,"__esModule",{value:!0});var o=e("babel-runtime/core-js/object/keys"),i=n(o),s=e("babel-runtime/core-js/object/get-prototype-of"),a=n(s),c=e("babel-runtime/helpers/classCallCheck"),u=n(c),l=e("babel-runtime/helpers/createClass"),f=n(l),d=e("babel-runtime/helpers/possibleConstructorReturn"),p=n(d),b=e("babel-runtime/helpers/get"),h=n(b),v=e("babel-runtime/helpers/inherits"),y=n(v),_=e("./DataObject"),g=n(_),m=e("./DataObjectChild"),j=n(m),$={ANY:"any",START:"start",EXACT:"exact"},O=function(e){function t(e,r,n,o,s,c,l){(0,u["default"])(this,t);var f=(0,p["default"])(this,(0,a["default"])(t).call(this,e,r,n,o,s.data,c)),d=f;return d._version=l,d._filters={},d._syncObj.observe(function(e){d._onFilter(e)}),(0,i["default"])(s.childrens).forEach(function(e){var t=s.childrens[e];d._childrenObjects[e]=new j["default"](d,e,t)}),d._allocateListeners(),f}return(0,y["default"])(t,e),(0,f["default"])(t,[{key:"_allocateListeners",value:function(){(0,h["default"])((0,a["default"])(t.prototype),"_allocateListeners",this).call(this);var e=this;e._changeListener=e._bus.addListener(e._url+"/changes",function(t){"update"===t.type&&(console.log("DataObjectObserver-"+e._url+"-RCV: ",t),e._changeObject(e._syncObj,t))})}},{key:"_releaseListeners",value:function(){(0,h["default"])((0,a["default"])(t.prototype),"_releaseListeners",this).call(this);var e=this;e._changeListener.remove()}},{key:"delete",value:function(){var e=this;e._releaseListeners(),delete e._syncher._observers[e._url]}},{key:"unsubscribe",value:function(){var e=this,t={type:"unsubscribe",from:e._owner,to:e._syncher._subURL,body:{resource:e._url}};e._bus.postMessage(t,function(t){console.log("DataObjectObserver-UNSUBSCRIBE: ",t),200===t.body.code&&(e._releaseListeners(),delete e._syncher._observers[e._url])})}},{key:"onChange",value:function(e,t){var r=e,n={type:$.EXACT,callback:t},o=e.indexOf("*");o===e.length-1&&(0===o?n.type=$.ANY:(n.type=$.START,r=e.substr(0,e.length-1))),this._filters[r]=n}},{key:"_onFilter",value:function(e){var t=this;(0,i["default"])(t._filters).forEach(function(r){var n=t._filters[r];n.type===$.ANY?n.callback(e):n.type===$.START?0===e.field.indexOf(r)&&n.callback(e):n.type===$.EXACT&&e.field===r&&n.callback(e)})}}]),t}(g["default"]);r["default"]=O,t.exports=r["default"]},{"./DataObject":93,"./DataObjectChild":94,"babel-runtime/core-js/object/get-prototype-of":6,"babel-runtime/core-js/object/keys":7,"babel-runtime/helpers/classCallCheck":11,"babel-runtime/helpers/createClass":12,"babel-runtime/helpers/get":13,"babel-runtime/helpers/inherits":14,"babel-runtime/helpers/possibleConstructorReturn":15}],96:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(r,"__esModule",{value:!0});var o=e("babel-runtime/core-js/object/keys"),i=n(o),s=e("babel-runtime/core-js/object/get-prototype-of"),a=n(s),c=e("babel-runtime/helpers/classCallCheck"),u=n(c),l=e("babel-runtime/helpers/createClass"),f=n(l),d=e("babel-runtime/helpers/possibleConstructorReturn"),p=n(d),b=e("babel-runtime/helpers/get"),h=n(b),v=e("babel-runtime/helpers/inherits"),y=n(v),_=e("./DataObject"),g=n(_),m=e("../utils/utils.js"),j=function(e){function t(e,r,n,o,i,s){(0,u["default"])(this,t);var c=(0,p["default"])(this,(0,a["default"])(t).call(this,e,r,n,o,i,s)),l=c;return l._subscriptions={},l._syncObj.observe(function(e){console.log("DataObjectReporter-"+r+"-SEND: ",e),l._onChange(e)}),l._allocateListeners(),c}return(0,y["default"])(t,e),(0,f["default"])(t,[{key:"_allocateListeners",value:function(){(0,h["default"])((0,a["default"])(t.prototype),"_allocateListeners",this).call(this);var e=this;e._responseListener=e._bus.addListener(e._url,function(t){"response"===t.type&&e._onResponse(t)})}},{key:"_releaseListeners",value:function(){(0,h["default"])((0,a["default"])(t.prototype),"_releaseListeners",this).call(this);var e=this;e._responseListener.remove()}},{key:"inviteObservers",value:function(e){var t=this,r={type:"create",from:t._syncher._owner,to:t._syncher._subURL,body:{resource:t._url,schema:t._schema,value:t._syncObj.data,authorise:e}};t._bus.postMessage(r)}},{key:"delete",value:function(){var e=this,t={type:"delete",from:e._owner,to:e._syncher._subURL,body:{resource:e._url}};e._bus.postMessage(t,function(t){console.log("DataObjectReporter-DELETE: ",t),200===t.body.code&&(e._releaseListeners(),delete e._syncher._reporters[e._url])})}},{key:"onSubscription",value:function(e){this._onSubscriptionHandler=e}},{key:"onResponse",value:function(e){this._onResponseHandler=e}},{key:"_onForward",value:function(e){var t=this;switch(console.log("DataObjectReporter-RCV: ",e),e.body.type){case"subscribe":t._onSubscribe(e);break;case"unsubscribe":t._onUnSubscribe(e)}}},{key:"_onSubscribe",value:function(e){var t=this,r=e.body.from,n={type:e.body.type,url:r,accept:function(){var n={url:r,status:"on"};t._subscriptions[r]=n;var o={};return(0,i["default"])(t._childrenObjects).forEach(function(e){var r=t._childrenObjects[e].data;o[e]=(0,m.deepClone)(r)}),t._bus.postMessage({id:e.id,type:"response",from:e.to,to:e.from,body:{code:200,schema:t._schema,version:t._version,value:{data:(0,m.deepClone)(t.data),childrens:o}}}),n},reject:function(r){t._bus.postMessage({id:e.id,type:"response",from:e.to,to:e.from,body:{code:403,desc:r}})}};t._onSubscriptionHandler&&(console.log("SUBSCRIPTION-EVENT: ",n),t._onSubscriptionHandler(n))}},{key:"_onUnSubscribe",value:function(e){var t=this,r=e.body.from,n=t._subscriptions[r];delete t._subscriptions[r];var o={type:e.body.type,url:r,object:n};t._onSubscriptionHandler&&(console.log("UN-SUBSCRIPTION-EVENT: ",o),t._onSubscriptionHandler(o))}},{key:"_onResponse",value:function(e){var t=this,r={type:e.type,url:e.from,code:e.body.code};t._onResponseHandler&&(console.log("RESPONSE-EVENT: ",r),t._onResponseHandler(r))}},{key:"subscriptions",get:function(){return this._subscriptions}}]),t}(g["default"]);r["default"]=j,t.exports=r["default"]},{"../utils/utils.js":100,"./DataObject":93,"babel-runtime/core-js/object/get-prototype-of":6,"babel-runtime/core-js/object/keys":7,"babel-runtime/helpers/classCallCheck":11,"babel-runtime/helpers/createClass":12,"babel-runtime/helpers/get":13,"babel-runtime/helpers/inherits":14,"babel-runtime/helpers/possibleConstructorReturn":15}],97:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(r,"__esModule",{value:!0});var o=e("babel-runtime/helpers/classCallCheck"),i=n(o),s=e("babel-runtime/helpers/createClass"),a=n(s),c=function(){function e(t,r,n,o){(0,i["default"])(this,e);var s=this;s._owner=t,s._url=r,s._bus=n,s._children=o,s._changes=[],s._allocateListeners()}return(0,a["default"])(e,[{key:"_allocateListeners",value:function(){var e=this;e._listener=e._bus.addListener(e._url,function(t){console.log("DataProvisional-"+e._url+"-RCV: ",t),e._changes.push(t)})}},{key:"_releaseListeners",value:function(){var e=this;e._listener.remove()}},{key:"apply",value:function(e){var t=this;t._changes.forEach(function(t){e._changeObject(e._syncObj,t)})}},{key:"children",get:function(){return this._children}}]),e}();r["default"]=c,t.exports=r["default"]},{"babel-runtime/helpers/classCallCheck":11,"babel-runtime/helpers/createClass":12}],98:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(r,"__esModule",{value:!0}),r.ObjectType=r.ChangeType=void 0;var o=e("babel-runtime/core-js/object/keys"),i=n(o),s=e("babel-runtime/helpers/classCallCheck"),a=n(s),c=e("babel-runtime/helpers/createClass"),u=n(c),l=e("../utils/utils.js"),f=function(){function e(t){(0,a["default"])(this,e);var r=this;r._observers=[],r._filters={},t?r._data=(0,l.deepClone)(t):r._data={},r._internalObserve(new d,r._data)}return(0,u["default"])(e,[{key:"observe",value:function(e){this._observers.push(e)}},{key:"find",value:function(e){var t=e.split(".");return this._findWithSplit(t)}},{key:"findBefore",value:function(e){var t={},r=e.split(".");return t.last=r.pop(),t.obj=this._findWithSplit(r),t}},{key:"_findWithSplit",value:function(e){var t=this._data;return e.forEach(function(e){t=t[e]}),t}},{key:"_fireEvent",value:function(e){this._observers.forEach(function(t){t(e)})}},{key:"_isObservable",value:function(e){return e.constructor===Object||e.constructor===Array}},{key:"_internalObserve",value:function(e,t){var r=this;if(r._isObservable(t)){var n=function(t){r._onChanges(e,t)};if(t.constructor===Object){Object.observe(t,n);for(var o in t)r._isObservable(t[o])&&r._internalObserve(e["new"](o),t[o])}else if(t.constructor===Array){Array.observe(t,n);for(var i in t)if(r._isObservable(t[i])){var s=e["new"](new p(t[i],i));r._internalObserve(s,t[i])}}}}},{key:"_onChanges",value:function(e,t){var r=this;for(var n in t){var o=t[n].object,i=void 0;if(o.constructor===Object&&(i=h.OBJECT),o.constructor===Array&&(i=h.ARRAY),"splice"===t[n].type)!function(){var s=t[n].index,a=e["new"](""+s),c=a.toString(),u=t[n].removed.length;if(0!==u){var f=t[n].removed;f.forEach(function(t,n){r._isObservable(t)&&e.removeIndex(s+n)}),r._fireEvent({cType:b.REMOVE,oType:i,field:c,data:u})}var d=t[n].addedCount;if(0!==d){var h=o.slice(s,s+d);h.forEach(function(t,n){if(r._isObservable(t)){var o=e["new"](new p(t,s+n));r._internalObserve(o,t)}}),r._fireEvent({cType:b.ADD,oType:i,field:c,data:(0,l.deepClone)(h)})}s!==o.length-1&&e.reIndexFrom(o)}();else{var s=e["new"](t[n].name),a=s.toString();if(-1!==a.indexOf("Symbol"))continue;var c=o[t[n].name];"update"===t[n].type&&this._fireEvent({cType:b.UPDATE,oType:i,field:a,data:(0,l.deepClone)(c)}),"add"===t[n].type&&(this._internalObserve(s,c),this._fireEvent({cType:b.ADD,oType:i,field:a,data:(0,l.deepClone)(c)})),"delete"===t[n].type&&this._fireEvent({cType:b.REMOVE,oType:i,field:a})}}}},{key:"data",get:function(){return this._data}}]),e}(),d=function(){function e(){(0,a["default"])(this,e),this._path=[],this._observables={}}return(0,u["default"])(e,[{key:"removeIndex",value:function(e){delete this._observables[e]}},{key:"reIndexFrom",value:function(e){var t=this;(0,i["default"])(this._observables).forEach(function(r){var n=t._observables[r],o=e.indexOf(n.obj);n.idx!=o&&(n.idx=o,delete t._observables[r],t._observables[o]=n)})}},{key:"new",value:function(e){e.constructor==p&&(this._observables[e.idx]=e);var t=this.clone();return t._path.push(e),t}},{key:"clone",value:function(){var t=new e;return this._path.forEach(function(e){t._path.push(e)}),t}},{key:"toString",value:function(){var e="";return this._path.forEach(function(t,r){0===r?e=t.toString():e+="."+t.toString()}),e}}]),e}(),p=function(){function e(t,r){(0,a["default"])(this,e),this.obj=t,this.idx=r}return(0,u["default"])(e,[{key:"toString",value:function(){return this.idx.toString()}}]),e}(),b=r.ChangeType={UPDATE:"update",ADD:"add",REMOVE:"remove"},h=r.ObjectType={OBJECT:"object",ARRAY:"array"};r["default"]=f},{"../utils/utils.js":100,"babel-runtime/core-js/object/keys":7,"babel-runtime/helpers/classCallCheck":11,"babel-runtime/helpers/createClass":12}],99:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(r,"__esModule",{value:!0});var o=e("babel-runtime/core-js/promise"),i=n(o),s=e("babel-runtime/helpers/classCallCheck"),a=n(s),c=e("babel-runtime/helpers/createClass"),u=n(c),l=e("./DataObjectReporter"),f=n(l),d=e("./DataObjectObserver"),p=n(d),b=e("./DataProvisional"),h=n(b),v=function(){function e(t,r,n){(0,a["default"])(this,e);var o=this;o._owner=t,o._bus=r,o._subURL=n.runtimeURL+"/sm",o._reporters={},o._observers={},o._provisionals={},r.addListener(t,function(e){if(e.from!==t)switch(console.log("Syncher-RCV: ",e),e.type){case"forward":o._onForward(e);break;case"create":o._onRemoteCreate(e);break;case"delete":o._onRemoteDelete(e)}})}return(0,u["default"])(e,[{key:"create",value:function(e,t,r){var n=this;r.reporter=n._owner,r.schema=e;var o={type:"create",from:n._owner,to:n._subURL,body:{schema:e,value:r,authorise:t}};return new i["default"](function(t,i){n._bus.postMessage(o,function(o){if(console.log("create-response: ",o),200===o.body.code){var s=o.body.resource,a=new f["default"](n,s,e,"on",r,o.body.childrenResources);n._reporters[s]=a,t(a)}else i(o.body.desc)})})}},{key:"subscribe",value:function(e,t){var r=this,n={type:"subscribe",from:r._owner,to:r._subURL,body:{schema:e,resource:t}};return new i["default"](function(o,i){r._bus.postMessage(n,function(n){console.log("subscribe-response: ",n);var s=r._provisionals[t];if(delete r._provisionals[t],s&&s._releaseListeners(),n.body.code<200)s=new h["default"](r._owner,t,r._bus,n.body.childrenResources),r._provisionals[t]=s;else if(200===n.body.code){var a=new p["default"](r,t,e,"on",n.body.value,s.children,n.body.version);r._observers[t]=a,o(a),s.apply(a)}else i(n.body.desc)})})}},{key:"onNotification",value:function(e){this._onNotificationHandler=e}},{key:"_onForward",value:function(e){var t=this,r=t._reporters[e.body.to];r._onForward(e)}},{key:"_onRemoteCreate",value:function(e){var t=this,r=e.from.slice(0,-13),n={type:e.type,from:e.body.source,url:r,schema:e.body.schema,value:e.body.value,identity:e.body.identity,ack:function(r){var n=200;r&&(n=r),t._bus.postMessage({id:e.id,type:"response",from:e.to,to:e.from,body:{code:n}})}};t._onNotificationHandler&&(console.log("NOTIFICATION-EVENT: ",n),t._onNotificationHandler(n))}},{key:"_onRemoteDelete",value:function(e){var t=this,r=e.body.resource,n=t._observers[r];if(n){var o={type:e.type,url:r,identity:e.body.identity,ack:function(r){var o=200;r&&(o=r),200===o&&n["delete"](),t._bus.postMessage({id:e.id,type:"response",from:e.to,to:e.from,body:{code:o,source:t._owner}})}};t._onNotificationHandler&&(console.log("NOTIFICATION-EVENT: ",o),t._onNotificationHandler(o))}else t._bus.postMessage({id:e.id,type:"response",from:e.to,to:e.from,body:{code:404,source:t._owner}})}},{key:"owner",get:function(){return this._owner}},{key:"reporters",get:function(){return this._reporters}},{key:"observers",get:function(){return this._observers}}]),e}();r["default"]=v,t.exports=r["default"]},{"./DataObjectObserver":95,"./DataObjectReporter":96,"./DataProvisional":97,"babel-runtime/core-js/promise":9,"babel-runtime/helpers/classCallCheck":11,"babel-runtime/helpers/createClass":12}],100:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function o(e){var t=/([a-zA-Z-]*):\/\/(?:\.)?([-a-zA-Z0-9@:%._\+~#=]{2,256})([-a-zA-Z0-9@:%._\+~#=\/]*)/gi,r="$1,$2,$3",n=e.replace(t,r).split(",");n[0]===e&&(n[0]="https",n[1]=e);var o={type:n[0],domain:n[1],identity:n[2]};return o}function i(e){return e?JSON.parse((0,a["default"])(e)):void 0}Object.defineProperty(r,"__esModule",{value:!0});var s=e("babel-runtime/core-js/json/stringify"),a=n(s);r.divideURL=o,r.deepClone=i},{"babel-runtime/core-js/json/stringify":2}]},{},[92])(92)});
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],3:[function(require,module,exports){
/*!
 * URI.js - Mutating URLs
 * IPv6 Support
 *
 * Version: 1.18.0
 *
 * Author: Rodney Rehm
 * Web: http://medialize.github.io/URI.js/
 *
 * Licensed under
 *   MIT License http://www.opensource.org/licenses/mit-license
 *
 */

(function (root, factory) {
  'use strict';
  // https://github.com/umdjs/umd/blob/master/returnExports.js
  if (typeof exports === 'object') {
    // Node
    module.exports = factory();
  } else if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(factory);
  } else {
    // Browser globals (root is window)
    root.IPv6 = factory(root);
  }
}(this, function (root) {
  'use strict';

  /*
  var _in = "fe80:0000:0000:0000:0204:61ff:fe9d:f156";
  var _out = IPv6.best(_in);
  var _expected = "fe80::204:61ff:fe9d:f156";

  console.log(_in, _out, _expected, _out === _expected);
  */

  // save current IPv6 variable, if any
  var _IPv6 = root && root.IPv6;

  function bestPresentation(address) {
    // based on:
    // Javascript to test an IPv6 address for proper format, and to
    // present the "best text representation" according to IETF Draft RFC at
    // http://tools.ietf.org/html/draft-ietf-6man-text-addr-representation-04
    // 8 Feb 2010 Rich Brown, Dartware, LLC
    // Please feel free to use this code as long as you provide a link to
    // http://www.intermapper.com
    // http://intermapper.com/support/tools/IPV6-Validator.aspx
    // http://download.dartware.com/thirdparty/ipv6validator.js

    var _address = address.toLowerCase();
    var segments = _address.split(':');
    var length = segments.length;
    var total = 8;

    // trim colons (:: or ::a:b:c… or …a:b:c::)
    if (segments[0] === '' && segments[1] === '' && segments[2] === '') {
      // must have been ::
      // remove first two items
      segments.shift();
      segments.shift();
    } else if (segments[0] === '' && segments[1] === '') {
      // must have been ::xxxx
      // remove the first item
      segments.shift();
    } else if (segments[length - 1] === '' && segments[length - 2] === '') {
      // must have been xxxx::
      segments.pop();
    }

    length = segments.length;

    // adjust total segments for IPv4 trailer
    if (segments[length - 1].indexOf('.') !== -1) {
      // found a "." which means IPv4
      total = 7;
    }

    // fill empty segments them with "0000"
    var pos;
    for (pos = 0; pos < length; pos++) {
      if (segments[pos] === '') {
        break;
      }
    }

    if (pos < total) {
      segments.splice(pos, 1, '0000');
      while (segments.length < total) {
        segments.splice(pos, 0, '0000');
      }
    }

    // strip leading zeros
    var _segments;
    for (var i = 0; i < total; i++) {
      _segments = segments[i].split('');
      for (var j = 0; j < 3 ; j++) {
        if (_segments[0] === '0' && _segments.length > 1) {
          _segments.splice(0,1);
        } else {
          break;
        }
      }

      segments[i] = _segments.join('');
    }

    // find longest sequence of zeroes and coalesce them into one segment
    var best = -1;
    var _best = 0;
    var _current = 0;
    var current = -1;
    var inzeroes = false;
    // i; already declared

    for (i = 0; i < total; i++) {
      if (inzeroes) {
        if (segments[i] === '0') {
          _current += 1;
        } else {
          inzeroes = false;
          if (_current > _best) {
            best = current;
            _best = _current;
          }
        }
      } else {
        if (segments[i] === '0') {
          inzeroes = true;
          current = i;
          _current = 1;
        }
      }
    }

    if (_current > _best) {
      best = current;
      _best = _current;
    }

    if (_best > 1) {
      segments.splice(best, _best, '');
    }

    length = segments.length;

    // assemble remaining segments
    var result = '';
    if (segments[0] === '')  {
      result = ':';
    }

    for (i = 0; i < length; i++) {
      result += segments[i];
      if (i === length - 1) {
        break;
      }

      result += ':';
    }

    if (segments[length - 1] === '') {
      result += ':';
    }

    return result;
  }

  function noConflict() {
    /*jshint validthis: true */
    if (root.IPv6 === this) {
      root.IPv6 = _IPv6;
    }
  
    return this;
  }

  return {
    best: bestPresentation,
    noConflict: noConflict
  };
}));

},{}],4:[function(require,module,exports){
/*!
 * URI.js - Mutating URLs
 * Second Level Domain (SLD) Support
 *
 * Version: 1.18.0
 *
 * Author: Rodney Rehm
 * Web: http://medialize.github.io/URI.js/
 *
 * Licensed under
 *   MIT License http://www.opensource.org/licenses/mit-license
 *
 */

(function (root, factory) {
  'use strict';
  // https://github.com/umdjs/umd/blob/master/returnExports.js
  if (typeof exports === 'object') {
    // Node
    module.exports = factory();
  } else if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(factory);
  } else {
    // Browser globals (root is window)
    root.SecondLevelDomains = factory(root);
  }
}(this, function (root) {
  'use strict';

  // save current SecondLevelDomains variable, if any
  var _SecondLevelDomains = root && root.SecondLevelDomains;

  var SLD = {
    // list of known Second Level Domains
    // converted list of SLDs from https://github.com/gavingmiller/second-level-domains
    // ----
    // publicsuffix.org is more current and actually used by a couple of browsers internally.
    // downside is it also contains domains like "dyndns.org" - which is fine for the security
    // issues browser have to deal with (SOP for cookies, etc) - but is way overboard for URI.js
    // ----
    list: {
      'ac':' com gov mil net org ',
      'ae':' ac co gov mil name net org pro sch ',
      'af':' com edu gov net org ',
      'al':' com edu gov mil net org ',
      'ao':' co ed gv it og pb ',
      'ar':' com edu gob gov int mil net org tur ',
      'at':' ac co gv or ',
      'au':' asn com csiro edu gov id net org ',
      'ba':' co com edu gov mil net org rs unbi unmo unsa untz unze ',
      'bb':' biz co com edu gov info net org store tv ',
      'bh':' biz cc com edu gov info net org ',
      'bn':' com edu gov net org ',
      'bo':' com edu gob gov int mil net org tv ',
      'br':' adm adv agr am arq art ato b bio blog bmd cim cng cnt com coop ecn edu eng esp etc eti far flog fm fnd fot fst g12 ggf gov imb ind inf jor jus lel mat med mil mus net nom not ntr odo org ppg pro psc psi qsl rec slg srv tmp trd tur tv vet vlog wiki zlg ',
      'bs':' com edu gov net org ',
      'bz':' du et om ov rg ',
      'ca':' ab bc mb nb nf nl ns nt nu on pe qc sk yk ',
      'ck':' biz co edu gen gov info net org ',
      'cn':' ac ah bj com cq edu fj gd gov gs gx gz ha hb he hi hl hn jl js jx ln mil net nm nx org qh sc sd sh sn sx tj tw xj xz yn zj ',
      'co':' com edu gov mil net nom org ',
      'cr':' ac c co ed fi go or sa ',
      'cy':' ac biz com ekloges gov ltd name net org parliament press pro tm ',
      'do':' art com edu gob gov mil net org sld web ',
      'dz':' art asso com edu gov net org pol ',
      'ec':' com edu fin gov info med mil net org pro ',
      'eg':' com edu eun gov mil name net org sci ',
      'er':' com edu gov ind mil net org rochest w ',
      'es':' com edu gob nom org ',
      'et':' biz com edu gov info name net org ',
      'fj':' ac biz com info mil name net org pro ',
      'fk':' ac co gov net nom org ',
      'fr':' asso com f gouv nom prd presse tm ',
      'gg':' co net org ',
      'gh':' com edu gov mil org ',
      'gn':' ac com gov net org ',
      'gr':' com edu gov mil net org ',
      'gt':' com edu gob ind mil net org ',
      'gu':' com edu gov net org ',
      'hk':' com edu gov idv net org ',
      'hu':' 2000 agrar bolt casino city co erotica erotika film forum games hotel info ingatlan jogasz konyvelo lakas media news org priv reklam sex shop sport suli szex tm tozsde utazas video ',
      'id':' ac co go mil net or sch web ',
      'il':' ac co gov idf k12 muni net org ',
      'in':' ac co edu ernet firm gen gov i ind mil net nic org res ',
      'iq':' com edu gov i mil net org ',
      'ir':' ac co dnssec gov i id net org sch ',
      'it':' edu gov ',
      'je':' co net org ',
      'jo':' com edu gov mil name net org sch ',
      'jp':' ac ad co ed go gr lg ne or ',
      'ke':' ac co go info me mobi ne or sc ',
      'kh':' com edu gov mil net org per ',
      'ki':' biz com de edu gov info mob net org tel ',
      'km':' asso com coop edu gouv k medecin mil nom notaires pharmaciens presse tm veterinaire ',
      'kn':' edu gov net org ',
      'kr':' ac busan chungbuk chungnam co daegu daejeon es gangwon go gwangju gyeongbuk gyeonggi gyeongnam hs incheon jeju jeonbuk jeonnam k kg mil ms ne or pe re sc seoul ulsan ',
      'kw':' com edu gov net org ',
      'ky':' com edu gov net org ',
      'kz':' com edu gov mil net org ',
      'lb':' com edu gov net org ',
      'lk':' assn com edu gov grp hotel int ltd net ngo org sch soc web ',
      'lr':' com edu gov net org ',
      'lv':' asn com conf edu gov id mil net org ',
      'ly':' com edu gov id med net org plc sch ',
      'ma':' ac co gov m net org press ',
      'mc':' asso tm ',
      'me':' ac co edu gov its net org priv ',
      'mg':' com edu gov mil nom org prd tm ',
      'mk':' com edu gov inf name net org pro ',
      'ml':' com edu gov net org presse ',
      'mn':' edu gov org ',
      'mo':' com edu gov net org ',
      'mt':' com edu gov net org ',
      'mv':' aero biz com coop edu gov info int mil museum name net org pro ',
      'mw':' ac co com coop edu gov int museum net org ',
      'mx':' com edu gob net org ',
      'my':' com edu gov mil name net org sch ',
      'nf':' arts com firm info net other per rec store web ',
      'ng':' biz com edu gov mil mobi name net org sch ',
      'ni':' ac co com edu gob mil net nom org ',
      'np':' com edu gov mil net org ',
      'nr':' biz com edu gov info net org ',
      'om':' ac biz co com edu gov med mil museum net org pro sch ',
      'pe':' com edu gob mil net nom org sld ',
      'ph':' com edu gov i mil net ngo org ',
      'pk':' biz com edu fam gob gok gon gop gos gov net org web ',
      'pl':' art bialystok biz com edu gda gdansk gorzow gov info katowice krakow lodz lublin mil net ngo olsztyn org poznan pwr radom slupsk szczecin torun warszawa waw wroc wroclaw zgora ',
      'pr':' ac biz com edu est gov info isla name net org pro prof ',
      'ps':' com edu gov net org plo sec ',
      'pw':' belau co ed go ne or ',
      'ro':' arts com firm info nom nt org rec store tm www ',
      'rs':' ac co edu gov in org ',
      'sb':' com edu gov net org ',
      'sc':' com edu gov net org ',
      'sh':' co com edu gov net nom org ',
      'sl':' com edu gov net org ',
      'st':' co com consulado edu embaixada gov mil net org principe saotome store ',
      'sv':' com edu gob org red ',
      'sz':' ac co org ',
      'tr':' av bbs bel biz com dr edu gen gov info k12 name net org pol tel tsk tv web ',
      'tt':' aero biz cat co com coop edu gov info int jobs mil mobi museum name net org pro tel travel ',
      'tw':' club com ebiz edu game gov idv mil net org ',
      'mu':' ac co com gov net or org ',
      'mz':' ac co edu gov org ',
      'na':' co com ',
      'nz':' ac co cri geek gen govt health iwi maori mil net org parliament school ',
      'pa':' abo ac com edu gob ing med net nom org sld ',
      'pt':' com edu gov int net nome org publ ',
      'py':' com edu gov mil net org ',
      'qa':' com edu gov mil net org ',
      're':' asso com nom ',
      'ru':' ac adygeya altai amur arkhangelsk astrakhan bashkiria belgorod bir bryansk buryatia cbg chel chelyabinsk chita chukotka chuvashia com dagestan e-burg edu gov grozny int irkutsk ivanovo izhevsk jar joshkar-ola kalmykia kaluga kamchatka karelia kazan kchr kemerovo khabarovsk khakassia khv kirov koenig komi kostroma kranoyarsk kuban kurgan kursk lipetsk magadan mari mari-el marine mil mordovia mosreg msk murmansk nalchik net nnov nov novosibirsk nsk omsk orenburg org oryol penza perm pp pskov ptz rnd ryazan sakhalin samara saratov simbirsk smolensk spb stavropol stv surgut tambov tatarstan tom tomsk tsaritsyn tsk tula tuva tver tyumen udm udmurtia ulan-ude vladikavkaz vladimir vladivostok volgograd vologda voronezh vrn vyatka yakutia yamal yekaterinburg yuzhno-sakhalinsk ',
      'rw':' ac co com edu gouv gov int mil net ',
      'sa':' com edu gov med net org pub sch ',
      'sd':' com edu gov info med net org tv ',
      'se':' a ac b bd c d e f g h i k l m n o org p parti pp press r s t tm u w x y z ',
      'sg':' com edu gov idn net org per ',
      'sn':' art com edu gouv org perso univ ',
      'sy':' com edu gov mil net news org ',
      'th':' ac co go in mi net or ',
      'tj':' ac biz co com edu go gov info int mil name net nic org test web ',
      'tn':' agrinet com defense edunet ens fin gov ind info intl mincom nat net org perso rnrt rns rnu tourism ',
      'tz':' ac co go ne or ',
      'ua':' biz cherkassy chernigov chernovtsy ck cn co com crimea cv dn dnepropetrovsk donetsk dp edu gov if in ivano-frankivsk kh kharkov kherson khmelnitskiy kiev kirovograd km kr ks kv lg lugansk lutsk lviv me mk net nikolaev od odessa org pl poltava pp rovno rv sebastopol sumy te ternopil uzhgorod vinnica vn zaporizhzhe zhitomir zp zt ',
      'ug':' ac co go ne or org sc ',
      'uk':' ac bl british-library co cym gov govt icnet jet lea ltd me mil mod national-library-scotland nel net nhs nic nls org orgn parliament plc police sch scot soc ',
      'us':' dni fed isa kids nsn ',
      'uy':' com edu gub mil net org ',
      've':' co com edu gob info mil net org web ',
      'vi':' co com k12 net org ',
      'vn':' ac biz com edu gov health info int name net org pro ',
      'ye':' co com gov ltd me net org plc ',
      'yu':' ac co edu gov org ',
      'za':' ac agric alt bourse city co cybernet db edu gov grondar iaccess imt inca landesign law mil net ngo nis nom olivetti org pix school tm web ',
      'zm':' ac co com edu gov net org sch '
    },
    // gorhill 2013-10-25: Using indexOf() instead Regexp(). Significant boost
    // in both performance and memory footprint. No initialization required.
    // http://jsperf.com/uri-js-sld-regex-vs-binary-search/4
    // Following methods use lastIndexOf() rather than array.split() in order
    // to avoid any memory allocations.
    has: function(domain) {
      var tldOffset = domain.lastIndexOf('.');
      if (tldOffset <= 0 || tldOffset >= (domain.length-1)) {
        return false;
      }
      var sldOffset = domain.lastIndexOf('.', tldOffset-1);
      if (sldOffset <= 0 || sldOffset >= (tldOffset-1)) {
        return false;
      }
      var sldList = SLD.list[domain.slice(tldOffset+1)];
      if (!sldList) {
        return false;
      }
      return sldList.indexOf(' ' + domain.slice(sldOffset+1, tldOffset) + ' ') >= 0;
    },
    is: function(domain) {
      var tldOffset = domain.lastIndexOf('.');
      if (tldOffset <= 0 || tldOffset >= (domain.length-1)) {
        return false;
      }
      var sldOffset = domain.lastIndexOf('.', tldOffset-1);
      if (sldOffset >= 0) {
        return false;
      }
      var sldList = SLD.list[domain.slice(tldOffset+1)];
      if (!sldList) {
        return false;
      }
      return sldList.indexOf(' ' + domain.slice(0, tldOffset) + ' ') >= 0;
    },
    get: function(domain) {
      var tldOffset = domain.lastIndexOf('.');
      if (tldOffset <= 0 || tldOffset >= (domain.length-1)) {
        return null;
      }
      var sldOffset = domain.lastIndexOf('.', tldOffset-1);
      if (sldOffset <= 0 || sldOffset >= (tldOffset-1)) {
        return null;
      }
      var sldList = SLD.list[domain.slice(tldOffset+1)];
      if (!sldList) {
        return null;
      }
      if (sldList.indexOf(' ' + domain.slice(sldOffset+1, tldOffset) + ' ') < 0) {
        return null;
      }
      return domain.slice(sldOffset+1);
    },
    noConflict: function(){
      if (root.SecondLevelDomains === this) {
        root.SecondLevelDomains = _SecondLevelDomains;
      }
      return this;
    }
  };

  return SLD;
}));

},{}],5:[function(require,module,exports){
/*!
 * URI.js - Mutating URLs
 *
 * Version: 1.18.0
 *
 * Author: Rodney Rehm
 * Web: http://medialize.github.io/URI.js/
 *
 * Licensed under
 *   MIT License http://www.opensource.org/licenses/mit-license
 *
 */
(function (root, factory) {
  'use strict';
  // https://github.com/umdjs/umd/blob/master/returnExports.js
  if (typeof exports === 'object') {
    // Node
    module.exports = factory(require('./punycode'), require('./IPv6'), require('./SecondLevelDomains'));
  } else if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['./punycode', './IPv6', './SecondLevelDomains'], factory);
  } else {
    // Browser globals (root is window)
    root.URI = factory(root.punycode, root.IPv6, root.SecondLevelDomains, root);
  }
}(this, function (punycode, IPv6, SLD, root) {
  'use strict';
  /*global location, escape, unescape */
  // FIXME: v2.0.0 renamce non-camelCase properties to uppercase
  /*jshint camelcase: false */

  // save current URI variable, if any
  var _URI = root && root.URI;

  function URI(url, base) {
    var _urlSupplied = arguments.length >= 1;
    var _baseSupplied = arguments.length >= 2;

    // Allow instantiation without the 'new' keyword
    if (!(this instanceof URI)) {
      if (_urlSupplied) {
        if (_baseSupplied) {
          return new URI(url, base);
        }

        return new URI(url);
      }

      return new URI();
    }

    if (url === undefined) {
      if (_urlSupplied) {
        throw new TypeError('undefined is not a valid argument for URI');
      }

      if (typeof location !== 'undefined') {
        url = location.href + '';
      } else {
        url = '';
      }
    }

    this.href(url);

    // resolve to base according to http://dvcs.w3.org/hg/url/raw-file/tip/Overview.html#constructor
    if (base !== undefined) {
      return this.absoluteTo(base);
    }

    return this;
  }

  URI.version = '1.18.0';

  var p = URI.prototype;
  var hasOwn = Object.prototype.hasOwnProperty;

  function escapeRegEx(string) {
    // https://github.com/medialize/URI.js/commit/85ac21783c11f8ccab06106dba9735a31a86924d#commitcomment-821963
    return string.replace(/([.*+?^=!:${}()|[\]\/\\])/g, '\\$1');
  }

  function getType(value) {
    // IE8 doesn't return [Object Undefined] but [Object Object] for undefined value
    if (value === undefined) {
      return 'Undefined';
    }

    return String(Object.prototype.toString.call(value)).slice(8, -1);
  }

  function isArray(obj) {
    return getType(obj) === 'Array';
  }

  function filterArrayValues(data, value) {
    var lookup = {};
    var i, length;

    if (getType(value) === 'RegExp') {
      lookup = null;
    } else if (isArray(value)) {
      for (i = 0, length = value.length; i < length; i++) {
        lookup[value[i]] = true;
      }
    } else {
      lookup[value] = true;
    }

    for (i = 0, length = data.length; i < length; i++) {
      /*jshint laxbreak: true */
      var _match = lookup && lookup[data[i]] !== undefined
        || !lookup && value.test(data[i]);
      /*jshint laxbreak: false */
      if (_match) {
        data.splice(i, 1);
        length--;
        i--;
      }
    }

    return data;
  }

  function arrayContains(list, value) {
    var i, length;

    // value may be string, number, array, regexp
    if (isArray(value)) {
      // Note: this can be optimized to O(n) (instead of current O(m * n))
      for (i = 0, length = value.length; i < length; i++) {
        if (!arrayContains(list, value[i])) {
          return false;
        }
      }

      return true;
    }

    var _type = getType(value);
    for (i = 0, length = list.length; i < length; i++) {
      if (_type === 'RegExp') {
        if (typeof list[i] === 'string' && list[i].match(value)) {
          return true;
        }
      } else if (list[i] === value) {
        return true;
      }
    }

    return false;
  }

  function arraysEqual(one, two) {
    if (!isArray(one) || !isArray(two)) {
      return false;
    }

    // arrays can't be equal if they have different amount of content
    if (one.length !== two.length) {
      return false;
    }

    one.sort();
    two.sort();

    for (var i = 0, l = one.length; i < l; i++) {
      if (one[i] !== two[i]) {
        return false;
      }
    }

    return true;
  }

  function trimSlashes(text) {
    var trim_expression = /^\/+|\/+$/g;
    return text.replace(trim_expression, '');
  }

  URI._parts = function() {
    return {
      protocol: null,
      username: null,
      password: null,
      hostname: null,
      urn: null,
      port: null,
      path: null,
      query: null,
      fragment: null,
      // state
      duplicateQueryParameters: URI.duplicateQueryParameters,
      escapeQuerySpace: URI.escapeQuerySpace
    };
  };
  // state: allow duplicate query parameters (a=1&a=1)
  URI.duplicateQueryParameters = false;
  // state: replaces + with %20 (space in query strings)
  URI.escapeQuerySpace = true;
  // static properties
  URI.protocol_expression = /^[a-z][a-z0-9.+-]*$/i;
  URI.idn_expression = /[^a-z0-9\.-]/i;
  URI.punycode_expression = /(xn--)/i;
  // well, 333.444.555.666 matches, but it sure ain't no IPv4 - do we care?
  URI.ip4_expression = /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/;
  // credits to Rich Brown
  // source: http://forums.intermapper.com/viewtopic.php?p=1096#1096
  // specification: http://www.ietf.org/rfc/rfc4291.txt
  URI.ip6_expression = /^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$/;
  // expression used is "gruber revised" (@gruber v2) determined to be the
  // best solution in a regex-golf we did a couple of ages ago at
  // * http://mathiasbynens.be/demo/url-regex
  // * http://rodneyrehm.de/t/url-regex.html
  URI.find_uri_expression = /\b((?:[a-z][\w-]+:(?:\/{1,3}|[a-z0-9%])|www\d{0,3}[.]|[a-z0-9.\-]+[.][a-z]{2,4}\/)(?:[^\s()<>]+|\(([^\s()<>]+|(\([^\s()<>]+\)))*\))+(?:\(([^\s()<>]+|(\([^\s()<>]+\)))*\)|[^\s`!()\[\]{};:'".,<>?«»“”‘’]))/ig;
  URI.findUri = {
    // valid "scheme://" or "www."
    start: /\b(?:([a-z][a-z0-9.+-]*:\/\/)|www\.)/gi,
    // everything up to the next whitespace
    end: /[\s\r\n]|$/,
    // trim trailing punctuation captured by end RegExp
    trim: /[`!()\[\]{};:'".,<>?«»“”„‘’]+$/
  };
  // http://www.iana.org/assignments/uri-schemes.html
  // http://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers#Well-known_ports
  URI.defaultPorts = {
    http: '80',
    https: '443',
    ftp: '21',
    gopher: '70',
    ws: '80',
    wss: '443'
  };
  // allowed hostname characters according to RFC 3986
  // ALPHA DIGIT "-" "." "_" "~" "!" "$" "&" "'" "(" ")" "*" "+" "," ";" "=" %encoded
  // I've never seen a (non-IDN) hostname other than: ALPHA DIGIT . -
  URI.invalid_hostname_characters = /[^a-zA-Z0-9\.-]/;
  // map DOM Elements to their URI attribute
  URI.domAttributes = {
    'a': 'href',
    'blockquote': 'cite',
    'link': 'href',
    'base': 'href',
    'script': 'src',
    'form': 'action',
    'img': 'src',
    'area': 'href',
    'iframe': 'src',
    'embed': 'src',
    'source': 'src',
    'track': 'src',
    'input': 'src', // but only if type="image"
    'audio': 'src',
    'video': 'src'
  };
  URI.getDomAttribute = function(node) {
    if (!node || !node.nodeName) {
      return undefined;
    }

    var nodeName = node.nodeName.toLowerCase();
    // <input> should only expose src for type="image"
    if (nodeName === 'input' && node.type !== 'image') {
      return undefined;
    }

    return URI.domAttributes[nodeName];
  };

  function escapeForDumbFirefox36(value) {
    // https://github.com/medialize/URI.js/issues/91
    return escape(value);
  }

  // encoding / decoding according to RFC3986
  function strictEncodeURIComponent(string) {
    // see https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/encodeURIComponent
    return encodeURIComponent(string)
      .replace(/[!'()*]/g, escapeForDumbFirefox36)
      .replace(/\*/g, '%2A');
  }
  URI.encode = strictEncodeURIComponent;
  URI.decode = decodeURIComponent;
  URI.iso8859 = function() {
    URI.encode = escape;
    URI.decode = unescape;
  };
  URI.unicode = function() {
    URI.encode = strictEncodeURIComponent;
    URI.decode = decodeURIComponent;
  };
  URI.characters = {
    pathname: {
      encode: {
        // RFC3986 2.1: For consistency, URI producers and normalizers should
        // use uppercase hexadecimal digits for all percent-encodings.
        expression: /%(24|26|2B|2C|3B|3D|3A|40)/ig,
        map: {
          // -._~!'()*
          '%24': '$',
          '%26': '&',
          '%2B': '+',
          '%2C': ',',
          '%3B': ';',
          '%3D': '=',
          '%3A': ':',
          '%40': '@'
        }
      },
      decode: {
        expression: /[\/\?#]/g,
        map: {
          '/': '%2F',
          '?': '%3F',
          '#': '%23'
        }
      }
    },
    reserved: {
      encode: {
        // RFC3986 2.1: For consistency, URI producers and normalizers should
        // use uppercase hexadecimal digits for all percent-encodings.
        expression: /%(21|23|24|26|27|28|29|2A|2B|2C|2F|3A|3B|3D|3F|40|5B|5D)/ig,
        map: {
          // gen-delims
          '%3A': ':',
          '%2F': '/',
          '%3F': '?',
          '%23': '#',
          '%5B': '[',
          '%5D': ']',
          '%40': '@',
          // sub-delims
          '%21': '!',
          '%24': '$',
          '%26': '&',
          '%27': '\'',
          '%28': '(',
          '%29': ')',
          '%2A': '*',
          '%2B': '+',
          '%2C': ',',
          '%3B': ';',
          '%3D': '='
        }
      }
    },
    urnpath: {
      // The characters under `encode` are the characters called out by RFC 2141 as being acceptable
      // for usage in a URN. RFC2141 also calls out "-", ".", and "_" as acceptable characters, but
      // these aren't encoded by encodeURIComponent, so we don't have to call them out here. Also
      // note that the colon character is not featured in the encoding map; this is because URI.js
      // gives the colons in URNs semantic meaning as the delimiters of path segements, and so it
      // should not appear unencoded in a segment itself.
      // See also the note above about RFC3986 and capitalalized hex digits.
      encode: {
        expression: /%(21|24|27|28|29|2A|2B|2C|3B|3D|40)/ig,
        map: {
          '%21': '!',
          '%24': '$',
          '%27': '\'',
          '%28': '(',
          '%29': ')',
          '%2A': '*',
          '%2B': '+',
          '%2C': ',',
          '%3B': ';',
          '%3D': '=',
          '%40': '@'
        }
      },
      // These characters are the characters called out by RFC2141 as "reserved" characters that
      // should never appear in a URN, plus the colon character (see note above).
      decode: {
        expression: /[\/\?#:]/g,
        map: {
          '/': '%2F',
          '?': '%3F',
          '#': '%23',
          ':': '%3A'
        }
      }
    }
  };
  URI.encodeQuery = function(string, escapeQuerySpace) {
    var escaped = URI.encode(string + '');
    if (escapeQuerySpace === undefined) {
      escapeQuerySpace = URI.escapeQuerySpace;
    }

    return escapeQuerySpace ? escaped.replace(/%20/g, '+') : escaped;
  };
  URI.decodeQuery = function(string, escapeQuerySpace) {
    string += '';
    if (escapeQuerySpace === undefined) {
      escapeQuerySpace = URI.escapeQuerySpace;
    }

    try {
      return URI.decode(escapeQuerySpace ? string.replace(/\+/g, '%20') : string);
    } catch(e) {
      // we're not going to mess with weird encodings,
      // give up and return the undecoded original string
      // see https://github.com/medialize/URI.js/issues/87
      // see https://github.com/medialize/URI.js/issues/92
      return string;
    }
  };
  // generate encode/decode path functions
  var _parts = {'encode':'encode', 'decode':'decode'};
  var _part;
  var generateAccessor = function(_group, _part) {
    return function(string) {
      try {
        return URI[_part](string + '').replace(URI.characters[_group][_part].expression, function(c) {
          return URI.characters[_group][_part].map[c];
        });
      } catch (e) {
        // we're not going to mess with weird encodings,
        // give up and return the undecoded original string
        // see https://github.com/medialize/URI.js/issues/87
        // see https://github.com/medialize/URI.js/issues/92
        return string;
      }
    };
  };

  for (_part in _parts) {
    URI[_part + 'PathSegment'] = generateAccessor('pathname', _parts[_part]);
    URI[_part + 'UrnPathSegment'] = generateAccessor('urnpath', _parts[_part]);
  }

  var generateSegmentedPathFunction = function(_sep, _codingFuncName, _innerCodingFuncName) {
    return function(string) {
      // Why pass in names of functions, rather than the function objects themselves? The
      // definitions of some functions (but in particular, URI.decode) will occasionally change due
      // to URI.js having ISO8859 and Unicode modes. Passing in the name and getting it will ensure
      // that the functions we use here are "fresh".
      var actualCodingFunc;
      if (!_innerCodingFuncName) {
        actualCodingFunc = URI[_codingFuncName];
      } else {
        actualCodingFunc = function(string) {
          return URI[_codingFuncName](URI[_innerCodingFuncName](string));
        };
      }

      var segments = (string + '').split(_sep);

      for (var i = 0, length = segments.length; i < length; i++) {
        segments[i] = actualCodingFunc(segments[i]);
      }

      return segments.join(_sep);
    };
  };

  // This takes place outside the above loop because we don't want, e.g., encodeUrnPath functions.
  URI.decodePath = generateSegmentedPathFunction('/', 'decodePathSegment');
  URI.decodeUrnPath = generateSegmentedPathFunction(':', 'decodeUrnPathSegment');
  URI.recodePath = generateSegmentedPathFunction('/', 'encodePathSegment', 'decode');
  URI.recodeUrnPath = generateSegmentedPathFunction(':', 'encodeUrnPathSegment', 'decode');

  URI.encodeReserved = generateAccessor('reserved', 'encode');

  URI.parse = function(string, parts) {
    var pos;
    if (!parts) {
      parts = {};
    }
    // [protocol"://"[username[":"password]"@"]hostname[":"port]"/"?][path]["?"querystring]["#"fragment]

    // extract fragment
    pos = string.indexOf('#');
    if (pos > -1) {
      // escaping?
      parts.fragment = string.substring(pos + 1) || null;
      string = string.substring(0, pos);
    }

    // extract query
    pos = string.indexOf('?');
    if (pos > -1) {
      // escaping?
      parts.query = string.substring(pos + 1) || null;
      string = string.substring(0, pos);
    }

    // extract protocol
    if (string.substring(0, 2) === '//') {
      // relative-scheme
      parts.protocol = null;
      string = string.substring(2);
      // extract "user:pass@host:port"
      string = URI.parseAuthority(string, parts);
    } else {
      pos = string.indexOf(':');
      if (pos > -1) {
        parts.protocol = string.substring(0, pos) || null;
        if (parts.protocol && !parts.protocol.match(URI.protocol_expression)) {
          // : may be within the path
          parts.protocol = undefined;
        } else if (string.substring(pos + 1, pos + 3) === '//') {
          string = string.substring(pos + 3);

          // extract "user:pass@host:port"
          string = URI.parseAuthority(string, parts);
        } else {
          string = string.substring(pos + 1);
          parts.urn = true;
        }
      }
    }

    // what's left must be the path
    parts.path = string;

    // and we're done
    return parts;
  };
  URI.parseHost = function(string, parts) {
    // Copy chrome, IE, opera backslash-handling behavior.
    // Back slashes before the query string get converted to forward slashes
    // See: https://github.com/joyent/node/blob/386fd24f49b0e9d1a8a076592a404168faeecc34/lib/url.js#L115-L124
    // See: https://code.google.com/p/chromium/issues/detail?id=25916
    // https://github.com/medialize/URI.js/pull/233
    string = string.replace(/\\/g, '/');

    // extract host:port
    var pos = string.indexOf('/');
    var bracketPos;
    var t;

    if (pos === -1) {
      pos = string.length;
    }

    if (string.charAt(0) === '[') {
      // IPv6 host - http://tools.ietf.org/html/draft-ietf-6man-text-addr-representation-04#section-6
      // I claim most client software breaks on IPv6 anyways. To simplify things, URI only accepts
      // IPv6+port in the format [2001:db8::1]:80 (for the time being)
      bracketPos = string.indexOf(']');
      parts.hostname = string.substring(1, bracketPos) || null;
      parts.port = string.substring(bracketPos + 2, pos) || null;
      if (parts.port === '/') {
        parts.port = null;
      }
    } else {
      var firstColon = string.indexOf(':');
      var firstSlash = string.indexOf('/');
      var nextColon = string.indexOf(':', firstColon + 1);
      if (nextColon !== -1 && (firstSlash === -1 || nextColon < firstSlash)) {
        // IPv6 host contains multiple colons - but no port
        // this notation is actually not allowed by RFC 3986, but we're a liberal parser
        parts.hostname = string.substring(0, pos) || null;
        parts.port = null;
      } else {
        t = string.substring(0, pos).split(':');
        parts.hostname = t[0] || null;
        parts.port = t[1] || null;
      }
    }

    if (parts.hostname && string.substring(pos).charAt(0) !== '/') {
      pos++;
      string = '/' + string;
    }

    return string.substring(pos) || '/';
  };
  URI.parseAuthority = function(string, parts) {
    string = URI.parseUserinfo(string, parts);
    return URI.parseHost(string, parts);
  };
  URI.parseUserinfo = function(string, parts) {
    // extract username:password
    var firstSlash = string.indexOf('/');
    var pos = string.lastIndexOf('@', firstSlash > -1 ? firstSlash : string.length - 1);
    var t;

    // authority@ must come before /path
    if (pos > -1 && (firstSlash === -1 || pos < firstSlash)) {
      t = string.substring(0, pos).split(':');
      parts.username = t[0] ? URI.decode(t[0]) : null;
      t.shift();
      parts.password = t[0] ? URI.decode(t.join(':')) : null;
      string = string.substring(pos + 1);
    } else {
      parts.username = null;
      parts.password = null;
    }

    return string;
  };
  URI.parseQuery = function(string, escapeQuerySpace) {
    if (!string) {
      return {};
    }

    // throw out the funky business - "?"[name"="value"&"]+
    string = string.replace(/&+/g, '&').replace(/^\?*&*|&+$/g, '');

    if (!string) {
      return {};
    }

    var items = {};
    var splits = string.split('&');
    var length = splits.length;
    var v, name, value;

    for (var i = 0; i < length; i++) {
      v = splits[i].split('=');
      name = URI.decodeQuery(v.shift(), escapeQuerySpace);
      // no "=" is null according to http://dvcs.w3.org/hg/url/raw-file/tip/Overview.html#collect-url-parameters
      value = v.length ? URI.decodeQuery(v.join('='), escapeQuerySpace) : null;

      if (hasOwn.call(items, name)) {
        if (typeof items[name] === 'string' || items[name] === null) {
          items[name] = [items[name]];
        }

        items[name].push(value);
      } else {
        items[name] = value;
      }
    }

    return items;
  };

  URI.build = function(parts) {
    var t = '';

    if (parts.protocol) {
      t += parts.protocol + ':';
    }

    if (!parts.urn && (t || parts.hostname)) {
      t += '//';
    }

    t += (URI.buildAuthority(parts) || '');

    if (typeof parts.path === 'string') {
      if (parts.path.charAt(0) !== '/' && typeof parts.hostname === 'string') {
        t += '/';
      }

      t += parts.path;
    }

    if (typeof parts.query === 'string' && parts.query) {
      t += '?' + parts.query;
    }

    if (typeof parts.fragment === 'string' && parts.fragment) {
      t += '#' + parts.fragment;
    }
    return t;
  };
  URI.buildHost = function(parts) {
    var t = '';

    if (!parts.hostname) {
      return '';
    } else if (URI.ip6_expression.test(parts.hostname)) {
      t += '[' + parts.hostname + ']';
    } else {
      t += parts.hostname;
    }

    if (parts.port) {
      t += ':' + parts.port;
    }

    return t;
  };
  URI.buildAuthority = function(parts) {
    return URI.buildUserinfo(parts) + URI.buildHost(parts);
  };
  URI.buildUserinfo = function(parts) {
    var t = '';

    if (parts.username) {
      t += URI.encode(parts.username);
    }

    if (parts.password) {
      t += ':' + URI.encode(parts.password);
    }

    if (t) {
      t += '@';
    }

    return t;
  };
  URI.buildQuery = function(data, duplicateQueryParameters, escapeQuerySpace) {
    // according to http://tools.ietf.org/html/rfc3986 or http://labs.apache.org/webarch/uri/rfc/rfc3986.html
    // being »-._~!$&'()*+,;=:@/?« %HEX and alnum are allowed
    // the RFC explicitly states ?/foo being a valid use case, no mention of parameter syntax!
    // URI.js treats the query string as being application/x-www-form-urlencoded
    // see http://www.w3.org/TR/REC-html40/interact/forms.html#form-content-type

    var t = '';
    var unique, key, i, length;
    for (key in data) {
      if (hasOwn.call(data, key) && key) {
        if (isArray(data[key])) {
          unique = {};
          for (i = 0, length = data[key].length; i < length; i++) {
            if (data[key][i] !== undefined && unique[data[key][i] + ''] === undefined) {
              t += '&' + URI.buildQueryParameter(key, data[key][i], escapeQuerySpace);
              if (duplicateQueryParameters !== true) {
                unique[data[key][i] + ''] = true;
              }
            }
          }
        } else if (data[key] !== undefined) {
          t += '&' + URI.buildQueryParameter(key, data[key], escapeQuerySpace);
        }
      }
    }

    return t.substring(1);
  };
  URI.buildQueryParameter = function(name, value, escapeQuerySpace) {
    // http://www.w3.org/TR/REC-html40/interact/forms.html#form-content-type -- application/x-www-form-urlencoded
    // don't append "=" for null values, according to http://dvcs.w3.org/hg/url/raw-file/tip/Overview.html#url-parameter-serialization
    return URI.encodeQuery(name, escapeQuerySpace) + (value !== null ? '=' + URI.encodeQuery(value, escapeQuerySpace) : '');
  };

  URI.addQuery = function(data, name, value) {
    if (typeof name === 'object') {
      for (var key in name) {
        if (hasOwn.call(name, key)) {
          URI.addQuery(data, key, name[key]);
        }
      }
    } else if (typeof name === 'string') {
      if (data[name] === undefined) {
        data[name] = value;
        return;
      } else if (typeof data[name] === 'string') {
        data[name] = [data[name]];
      }

      if (!isArray(value)) {
        value = [value];
      }

      data[name] = (data[name] || []).concat(value);
    } else {
      throw new TypeError('URI.addQuery() accepts an object, string as the name parameter');
    }
  };
  URI.removeQuery = function(data, name, value) {
    var i, length, key;

    if (isArray(name)) {
      for (i = 0, length = name.length; i < length; i++) {
        data[name[i]] = undefined;
      }
    } else if (getType(name) === 'RegExp') {
      for (key in data) {
        if (name.test(key)) {
          data[key] = undefined;
        }
      }
    } else if (typeof name === 'object') {
      for (key in name) {
        if (hasOwn.call(name, key)) {
          URI.removeQuery(data, key, name[key]);
        }
      }
    } else if (typeof name === 'string') {
      if (value !== undefined) {
        if (getType(value) === 'RegExp') {
          if (!isArray(data[name]) && value.test(data[name])) {
            data[name] = undefined;
          } else {
            data[name] = filterArrayValues(data[name], value);
          }
        } else if (data[name] === String(value) && (!isArray(value) || value.length === 1)) {
          data[name] = undefined;
        } else if (isArray(data[name])) {
          data[name] = filterArrayValues(data[name], value);
        }
      } else {
        data[name] = undefined;
      }
    } else {
      throw new TypeError('URI.removeQuery() accepts an object, string, RegExp as the first parameter');
    }
  };
  URI.hasQuery = function(data, name, value, withinArray) {
    switch (getType(name)) {
      case 'String':
        // Nothing to do here
        break;

      case 'RegExp':
        for (var key in data) {
          if (hasOwn.call(data, key)) {
            if (name.test(key) && (value === undefined || URI.hasQuery(data, key, value))) {
              return true;
            }
          }
        }

        return false;

      case 'Object':
        for (var _key in name) {
          if (hasOwn.call(name, _key)) {
            if (!URI.hasQuery(data, _key, name[_key])) {
              return false;
            }
          }
        }

        return true;

      default:
        throw new TypeError('URI.hasQuery() accepts a string, regular expression or object as the name parameter');
    }

    switch (getType(value)) {
      case 'Undefined':
        // true if exists (but may be empty)
        return name in data; // data[name] !== undefined;

      case 'Boolean':
        // true if exists and non-empty
        var _booly = Boolean(isArray(data[name]) ? data[name].length : data[name]);
        return value === _booly;

      case 'Function':
        // allow complex comparison
        return !!value(data[name], name, data);

      case 'Array':
        if (!isArray(data[name])) {
          return false;
        }

        var op = withinArray ? arrayContains : arraysEqual;
        return op(data[name], value);

      case 'RegExp':
        if (!isArray(data[name])) {
          return Boolean(data[name] && data[name].match(value));
        }

        if (!withinArray) {
          return false;
        }

        return arrayContains(data[name], value);

      case 'Number':
        value = String(value);
        /* falls through */
      case 'String':
        if (!isArray(data[name])) {
          return data[name] === value;
        }

        if (!withinArray) {
          return false;
        }

        return arrayContains(data[name], value);

      default:
        throw new TypeError('URI.hasQuery() accepts undefined, boolean, string, number, RegExp, Function as the value parameter');
    }
  };


  URI.joinPaths = function() {
    var input = [];
    var segments = [];
    var nonEmptySegments = 0;

    for (var i = 0; i < arguments.length; i++) {
      var url = new URI(arguments[i]);
      input.push(url);
      var _segments = url.segment();
      for (var s = 0; s < _segments.length; s++) {
        if (typeof _segments[s] === 'string') {
          segments.push(_segments[s]);
        }

        if (_segments[s]) {
          nonEmptySegments++;
        }
      }
    }

    if (!segments.length || !nonEmptySegments) {
      return new URI('');
    }

    var uri = new URI('').segment(segments);

    if (input[0].path() === '' || input[0].path().slice(0, 1) === '/') {
      uri.path('/' + uri.path());
    }

    return uri.normalize();
  };

  URI.commonPath = function(one, two) {
    var length = Math.min(one.length, two.length);
    var pos;

    // find first non-matching character
    for (pos = 0; pos < length; pos++) {
      if (one.charAt(pos) !== two.charAt(pos)) {
        pos--;
        break;
      }
    }

    if (pos < 1) {
      return one.charAt(0) === two.charAt(0) && one.charAt(0) === '/' ? '/' : '';
    }

    // revert to last /
    if (one.charAt(pos) !== '/' || two.charAt(pos) !== '/') {
      pos = one.substring(0, pos).lastIndexOf('/');
    }

    return one.substring(0, pos + 1);
  };

  URI.withinString = function(string, callback, options) {
    options || (options = {});
    var _start = options.start || URI.findUri.start;
    var _end = options.end || URI.findUri.end;
    var _trim = options.trim || URI.findUri.trim;
    var _attributeOpen = /[a-z0-9-]=["']?$/i;

    _start.lastIndex = 0;
    while (true) {
      var match = _start.exec(string);
      if (!match) {
        break;
      }

      var start = match.index;
      if (options.ignoreHtml) {
        // attribut(e=["']?$)
        var attributeOpen = string.slice(Math.max(start - 3, 0), start);
        if (attributeOpen && _attributeOpen.test(attributeOpen)) {
          continue;
        }
      }

      var end = start + string.slice(start).search(_end);
      var slice = string.slice(start, end).replace(_trim, '');
      if (options.ignore && options.ignore.test(slice)) {
        continue;
      }

      end = start + slice.length;
      var result = callback(slice, start, end, string);
      string = string.slice(0, start) + result + string.slice(end);
      _start.lastIndex = start + result.length;
    }

    _start.lastIndex = 0;
    return string;
  };

  URI.ensureValidHostname = function(v) {
    // Theoretically URIs allow percent-encoding in Hostnames (according to RFC 3986)
    // they are not part of DNS and therefore ignored by URI.js

    if (v.match(URI.invalid_hostname_characters)) {
      // test punycode
      if (!punycode) {
        throw new TypeError('Hostname "' + v + '" contains characters other than [A-Z0-9.-] and Punycode.js is not available');
      }

      if (punycode.toASCII(v).match(URI.invalid_hostname_characters)) {
        throw new TypeError('Hostname "' + v + '" contains characters other than [A-Z0-9.-]');
      }
    }
  };

  // noConflict
  URI.noConflict = function(removeAll) {
    if (removeAll) {
      var unconflicted = {
        URI: this.noConflict()
      };

      if (root.URITemplate && typeof root.URITemplate.noConflict === 'function') {
        unconflicted.URITemplate = root.URITemplate.noConflict();
      }

      if (root.IPv6 && typeof root.IPv6.noConflict === 'function') {
        unconflicted.IPv6 = root.IPv6.noConflict();
      }

      if (root.SecondLevelDomains && typeof root.SecondLevelDomains.noConflict === 'function') {
        unconflicted.SecondLevelDomains = root.SecondLevelDomains.noConflict();
      }

      return unconflicted;
    } else if (root.URI === this) {
      root.URI = _URI;
    }

    return this;
  };

  p.build = function(deferBuild) {
    if (deferBuild === true) {
      this._deferred_build = true;
    } else if (deferBuild === undefined || this._deferred_build) {
      this._string = URI.build(this._parts);
      this._deferred_build = false;
    }

    return this;
  };

  p.clone = function() {
    return new URI(this);
  };

  p.valueOf = p.toString = function() {
    return this.build(false)._string;
  };


  function generateSimpleAccessor(_part){
    return function(v, build) {
      if (v === undefined) {
        return this._parts[_part] || '';
      } else {
        this._parts[_part] = v || null;
        this.build(!build);
        return this;
      }
    };
  }

  function generatePrefixAccessor(_part, _key){
    return function(v, build) {
      if (v === undefined) {
        return this._parts[_part] || '';
      } else {
        if (v !== null) {
          v = v + '';
          if (v.charAt(0) === _key) {
            v = v.substring(1);
          }
        }

        this._parts[_part] = v;
        this.build(!build);
        return this;
      }
    };
  }

  p.protocol = generateSimpleAccessor('protocol');
  p.username = generateSimpleAccessor('username');
  p.password = generateSimpleAccessor('password');
  p.hostname = generateSimpleAccessor('hostname');
  p.port = generateSimpleAccessor('port');
  p.query = generatePrefixAccessor('query', '?');
  p.fragment = generatePrefixAccessor('fragment', '#');

  p.search = function(v, build) {
    var t = this.query(v, build);
    return typeof t === 'string' && t.length ? ('?' + t) : t;
  };
  p.hash = function(v, build) {
    var t = this.fragment(v, build);
    return typeof t === 'string' && t.length ? ('#' + t) : t;
  };

  p.pathname = function(v, build) {
    if (v === undefined || v === true) {
      var res = this._parts.path || (this._parts.hostname ? '/' : '');
      return v ? (this._parts.urn ? URI.decodeUrnPath : URI.decodePath)(res) : res;
    } else {
      if (this._parts.urn) {
        this._parts.path = v ? URI.recodeUrnPath(v) : '';
      } else {
        this._parts.path = v ? URI.recodePath(v) : '/';
      }
      this.build(!build);
      return this;
    }
  };
  p.path = p.pathname;
  p.href = function(href, build) {
    var key;

    if (href === undefined) {
      return this.toString();
    }

    this._string = '';
    this._parts = URI._parts();

    var _URI = href instanceof URI;
    var _object = typeof href === 'object' && (href.hostname || href.path || href.pathname);
    if (href.nodeName) {
      var attribute = URI.getDomAttribute(href);
      href = href[attribute] || '';
      _object = false;
    }

    // window.location is reported to be an object, but it's not the sort
    // of object we're looking for:
    // * location.protocol ends with a colon
    // * location.query != object.search
    // * location.hash != object.fragment
    // simply serializing the unknown object should do the trick
    // (for location, not for everything...)
    if (!_URI && _object && href.pathname !== undefined) {
      href = href.toString();
    }

    if (typeof href === 'string' || href instanceof String) {
      this._parts = URI.parse(String(href), this._parts);
    } else if (_URI || _object) {
      var src = _URI ? href._parts : href;
      for (key in src) {
        if (hasOwn.call(this._parts, key)) {
          this._parts[key] = src[key];
        }
      }
    } else {
      throw new TypeError('invalid input');
    }

    this.build(!build);
    return this;
  };

  // identification accessors
  p.is = function(what) {
    var ip = false;
    var ip4 = false;
    var ip6 = false;
    var name = false;
    var sld = false;
    var idn = false;
    var punycode = false;
    var relative = !this._parts.urn;

    if (this._parts.hostname) {
      relative = false;
      ip4 = URI.ip4_expression.test(this._parts.hostname);
      ip6 = URI.ip6_expression.test(this._parts.hostname);
      ip = ip4 || ip6;
      name = !ip;
      sld = name && SLD && SLD.has(this._parts.hostname);
      idn = name && URI.idn_expression.test(this._parts.hostname);
      punycode = name && URI.punycode_expression.test(this._parts.hostname);
    }

    switch (what.toLowerCase()) {
      case 'relative':
        return relative;

      case 'absolute':
        return !relative;

      // hostname identification
      case 'domain':
      case 'name':
        return name;

      case 'sld':
        return sld;

      case 'ip':
        return ip;

      case 'ip4':
      case 'ipv4':
      case 'inet4':
        return ip4;

      case 'ip6':
      case 'ipv6':
      case 'inet6':
        return ip6;

      case 'idn':
        return idn;

      case 'url':
        return !this._parts.urn;

      case 'urn':
        return !!this._parts.urn;

      case 'punycode':
        return punycode;
    }

    return null;
  };

  // component specific input validation
  var _protocol = p.protocol;
  var _port = p.port;
  var _hostname = p.hostname;

  p.protocol = function(v, build) {
    if (v !== undefined) {
      if (v) {
        // accept trailing ://
        v = v.replace(/:(\/\/)?$/, '');

        if (!v.match(URI.protocol_expression)) {
          throw new TypeError('Protocol "' + v + '" contains characters other than [A-Z0-9.+-] or doesn\'t start with [A-Z]');
        }
      }
    }
    return _protocol.call(this, v, build);
  };
  p.scheme = p.protocol;
  p.port = function(v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (v !== undefined) {
      if (v === 0) {
        v = null;
      }

      if (v) {
        v += '';
        if (v.charAt(0) === ':') {
          v = v.substring(1);
        }

        if (v.match(/[^0-9]/)) {
          throw new TypeError('Port "' + v + '" contains characters other than [0-9]');
        }
      }
    }
    return _port.call(this, v, build);
  };
  p.hostname = function(v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (v !== undefined) {
      var x = {};
      var res = URI.parseHost(v, x);
      if (res !== '/') {
        throw new TypeError('Hostname "' + v + '" contains characters other than [A-Z0-9.-]');
      }

      v = x.hostname;
    }
    return _hostname.call(this, v, build);
  };

  // compound accessors
  p.origin = function(v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (v === undefined) {
      var protocol = this.protocol();
      var authority = this.authority();
      if (!authority) {
        return '';
      }

      return (protocol ? protocol + '://' : '') + this.authority();
    } else {
      var origin = URI(v);
      this
        .protocol(origin.protocol())
        .authority(origin.authority())
        .build(!build);
      return this;
    }
  };
  p.host = function(v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (v === undefined) {
      return this._parts.hostname ? URI.buildHost(this._parts) : '';
    } else {
      var res = URI.parseHost(v, this._parts);
      if (res !== '/') {
        throw new TypeError('Hostname "' + v + '" contains characters other than [A-Z0-9.-]');
      }

      this.build(!build);
      return this;
    }
  };
  p.authority = function(v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (v === undefined) {
      return this._parts.hostname ? URI.buildAuthority(this._parts) : '';
    } else {
      var res = URI.parseAuthority(v, this._parts);
      if (res !== '/') {
        throw new TypeError('Hostname "' + v + '" contains characters other than [A-Z0-9.-]');
      }

      this.build(!build);
      return this;
    }
  };
  p.userinfo = function(v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (v === undefined) {
      var t = URI.buildUserinfo(this._parts);
      return t ? t.substring(0, t.length -1) : t;
    } else {
      if (v[v.length-1] !== '@') {
        v += '@';
      }

      URI.parseUserinfo(v, this._parts);
      this.build(!build);
      return this;
    }
  };
  p.resource = function(v, build) {
    var parts;

    if (v === undefined) {
      return this.path() + this.search() + this.hash();
    }

    parts = URI.parse(v);
    this._parts.path = parts.path;
    this._parts.query = parts.query;
    this._parts.fragment = parts.fragment;
    this.build(!build);
    return this;
  };

  // fraction accessors
  p.subdomain = function(v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    // convenience, return "www" from "www.example.org"
    if (v === undefined) {
      if (!this._parts.hostname || this.is('IP')) {
        return '';
      }

      // grab domain and add another segment
      var end = this._parts.hostname.length - this.domain().length - 1;
      return this._parts.hostname.substring(0, end) || '';
    } else {
      var e = this._parts.hostname.length - this.domain().length;
      var sub = this._parts.hostname.substring(0, e);
      var replace = new RegExp('^' + escapeRegEx(sub));

      if (v && v.charAt(v.length - 1) !== '.') {
        v += '.';
      }

      if (v) {
        URI.ensureValidHostname(v);
      }

      this._parts.hostname = this._parts.hostname.replace(replace, v);
      this.build(!build);
      return this;
    }
  };
  p.domain = function(v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (typeof v === 'boolean') {
      build = v;
      v = undefined;
    }

    // convenience, return "example.org" from "www.example.org"
    if (v === undefined) {
      if (!this._parts.hostname || this.is('IP')) {
        return '';
      }

      // if hostname consists of 1 or 2 segments, it must be the domain
      var t = this._parts.hostname.match(/\./g);
      if (t && t.length < 2) {
        return this._parts.hostname;
      }

      // grab tld and add another segment
      var end = this._parts.hostname.length - this.tld(build).length - 1;
      end = this._parts.hostname.lastIndexOf('.', end -1) + 1;
      return this._parts.hostname.substring(end) || '';
    } else {
      if (!v) {
        throw new TypeError('cannot set domain empty');
      }

      URI.ensureValidHostname(v);

      if (!this._parts.hostname || this.is('IP')) {
        this._parts.hostname = v;
      } else {
        var replace = new RegExp(escapeRegEx(this.domain()) + '$');
        this._parts.hostname = this._parts.hostname.replace(replace, v);
      }

      this.build(!build);
      return this;
    }
  };
  p.tld = function(v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (typeof v === 'boolean') {
      build = v;
      v = undefined;
    }

    // return "org" from "www.example.org"
    if (v === undefined) {
      if (!this._parts.hostname || this.is('IP')) {
        return '';
      }

      var pos = this._parts.hostname.lastIndexOf('.');
      var tld = this._parts.hostname.substring(pos + 1);

      if (build !== true && SLD && SLD.list[tld.toLowerCase()]) {
        return SLD.get(this._parts.hostname) || tld;
      }

      return tld;
    } else {
      var replace;

      if (!v) {
        throw new TypeError('cannot set TLD empty');
      } else if (v.match(/[^a-zA-Z0-9-]/)) {
        if (SLD && SLD.is(v)) {
          replace = new RegExp(escapeRegEx(this.tld()) + '$');
          this._parts.hostname = this._parts.hostname.replace(replace, v);
        } else {
          throw new TypeError('TLD "' + v + '" contains characters other than [A-Z0-9]');
        }
      } else if (!this._parts.hostname || this.is('IP')) {
        throw new ReferenceError('cannot set TLD on non-domain host');
      } else {
        replace = new RegExp(escapeRegEx(this.tld()) + '$');
        this._parts.hostname = this._parts.hostname.replace(replace, v);
      }

      this.build(!build);
      return this;
    }
  };
  p.directory = function(v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (v === undefined || v === true) {
      if (!this._parts.path && !this._parts.hostname) {
        return '';
      }

      if (this._parts.path === '/') {
        return '/';
      }

      var end = this._parts.path.length - this.filename().length - 1;
      var res = this._parts.path.substring(0, end) || (this._parts.hostname ? '/' : '');

      return v ? URI.decodePath(res) : res;

    } else {
      var e = this._parts.path.length - this.filename().length;
      var directory = this._parts.path.substring(0, e);
      var replace = new RegExp('^' + escapeRegEx(directory));

      // fully qualifier directories begin with a slash
      if (!this.is('relative')) {
        if (!v) {
          v = '/';
        }

        if (v.charAt(0) !== '/') {
          v = '/' + v;
        }
      }

      // directories always end with a slash
      if (v && v.charAt(v.length - 1) !== '/') {
        v += '/';
      }

      v = URI.recodePath(v);
      this._parts.path = this._parts.path.replace(replace, v);
      this.build(!build);
      return this;
    }
  };
  p.filename = function(v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (v === undefined || v === true) {
      if (!this._parts.path || this._parts.path === '/') {
        return '';
      }

      var pos = this._parts.path.lastIndexOf('/');
      var res = this._parts.path.substring(pos+1);

      return v ? URI.decodePathSegment(res) : res;
    } else {
      var mutatedDirectory = false;

      if (v.charAt(0) === '/') {
        v = v.substring(1);
      }

      if (v.match(/\.?\//)) {
        mutatedDirectory = true;
      }

      var replace = new RegExp(escapeRegEx(this.filename()) + '$');
      v = URI.recodePath(v);
      this._parts.path = this._parts.path.replace(replace, v);

      if (mutatedDirectory) {
        this.normalizePath(build);
      } else {
        this.build(!build);
      }

      return this;
    }
  };
  p.suffix = function(v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (v === undefined || v === true) {
      if (!this._parts.path || this._parts.path === '/') {
        return '';
      }

      var filename = this.filename();
      var pos = filename.lastIndexOf('.');
      var s, res;

      if (pos === -1) {
        return '';
      }

      // suffix may only contain alnum characters (yup, I made this up.)
      s = filename.substring(pos+1);
      res = (/^[a-z0-9%]+$/i).test(s) ? s : '';
      return v ? URI.decodePathSegment(res) : res;
    } else {
      if (v.charAt(0) === '.') {
        v = v.substring(1);
      }

      var suffix = this.suffix();
      var replace;

      if (!suffix) {
        if (!v) {
          return this;
        }

        this._parts.path += '.' + URI.recodePath(v);
      } else if (!v) {
        replace = new RegExp(escapeRegEx('.' + suffix) + '$');
      } else {
        replace = new RegExp(escapeRegEx(suffix) + '$');
      }

      if (replace) {
        v = URI.recodePath(v);
        this._parts.path = this._parts.path.replace(replace, v);
      }

      this.build(!build);
      return this;
    }
  };
  p.segment = function(segment, v, build) {
    var separator = this._parts.urn ? ':' : '/';
    var path = this.path();
    var absolute = path.substring(0, 1) === '/';
    var segments = path.split(separator);

    if (segment !== undefined && typeof segment !== 'number') {
      build = v;
      v = segment;
      segment = undefined;
    }

    if (segment !== undefined && typeof segment !== 'number') {
      throw new Error('Bad segment "' + segment + '", must be 0-based integer');
    }

    if (absolute) {
      segments.shift();
    }

    if (segment < 0) {
      // allow negative indexes to address from the end
      segment = Math.max(segments.length + segment, 0);
    }

    if (v === undefined) {
      /*jshint laxbreak: true */
      return segment === undefined
        ? segments
        : segments[segment];
      /*jshint laxbreak: false */
    } else if (segment === null || segments[segment] === undefined) {
      if (isArray(v)) {
        segments = [];
        // collapse empty elements within array
        for (var i=0, l=v.length; i < l; i++) {
          if (!v[i].length && (!segments.length || !segments[segments.length -1].length)) {
            continue;
          }

          if (segments.length && !segments[segments.length -1].length) {
            segments.pop();
          }

          segments.push(trimSlashes(v[i]));
        }
      } else if (v || typeof v === 'string') {
        v = trimSlashes(v);
        if (segments[segments.length -1] === '') {
          // empty trailing elements have to be overwritten
          // to prevent results such as /foo//bar
          segments[segments.length -1] = v;
        } else {
          segments.push(v);
        }
      }
    } else {
      if (v) {
        segments[segment] = trimSlashes(v);
      } else {
        segments.splice(segment, 1);
      }
    }

    if (absolute) {
      segments.unshift('');
    }

    return this.path(segments.join(separator), build);
  };
  p.segmentCoded = function(segment, v, build) {
    var segments, i, l;

    if (typeof segment !== 'number') {
      build = v;
      v = segment;
      segment = undefined;
    }

    if (v === undefined) {
      segments = this.segment(segment, v, build);
      if (!isArray(segments)) {
        segments = segments !== undefined ? URI.decode(segments) : undefined;
      } else {
        for (i = 0, l = segments.length; i < l; i++) {
          segments[i] = URI.decode(segments[i]);
        }
      }

      return segments;
    }

    if (!isArray(v)) {
      v = (typeof v === 'string' || v instanceof String) ? URI.encode(v) : v;
    } else {
      for (i = 0, l = v.length; i < l; i++) {
        v[i] = URI.encode(v[i]);
      }
    }

    return this.segment(segment, v, build);
  };

  // mutating query string
  var q = p.query;
  p.query = function(v, build) {
    if (v === true) {
      return URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
    } else if (typeof v === 'function') {
      var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
      var result = v.call(this, data);
      this._parts.query = URI.buildQuery(result || data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
      this.build(!build);
      return this;
    } else if (v !== undefined && typeof v !== 'string') {
      this._parts.query = URI.buildQuery(v, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
      this.build(!build);
      return this;
    } else {
      return q.call(this, v, build);
    }
  };
  p.setQuery = function(name, value, build) {
    var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);

    if (typeof name === 'string' || name instanceof String) {
      data[name] = value !== undefined ? value : null;
    } else if (typeof name === 'object') {
      for (var key in name) {
        if (hasOwn.call(name, key)) {
          data[key] = name[key];
        }
      }
    } else {
      throw new TypeError('URI.addQuery() accepts an object, string as the name parameter');
    }

    this._parts.query = URI.buildQuery(data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
    if (typeof name !== 'string') {
      build = value;
    }

    this.build(!build);
    return this;
  };
  p.addQuery = function(name, value, build) {
    var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
    URI.addQuery(data, name, value === undefined ? null : value);
    this._parts.query = URI.buildQuery(data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
    if (typeof name !== 'string') {
      build = value;
    }

    this.build(!build);
    return this;
  };
  p.removeQuery = function(name, value, build) {
    var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
    URI.removeQuery(data, name, value);
    this._parts.query = URI.buildQuery(data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
    if (typeof name !== 'string') {
      build = value;
    }

    this.build(!build);
    return this;
  };
  p.hasQuery = function(name, value, withinArray) {
    var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
    return URI.hasQuery(data, name, value, withinArray);
  };
  p.setSearch = p.setQuery;
  p.addSearch = p.addQuery;
  p.removeSearch = p.removeQuery;
  p.hasSearch = p.hasQuery;

  // sanitizing URLs
  p.normalize = function() {
    if (this._parts.urn) {
      return this
        .normalizeProtocol(false)
        .normalizePath(false)
        .normalizeQuery(false)
        .normalizeFragment(false)
        .build();
    }

    return this
      .normalizeProtocol(false)
      .normalizeHostname(false)
      .normalizePort(false)
      .normalizePath(false)
      .normalizeQuery(false)
      .normalizeFragment(false)
      .build();
  };
  p.normalizeProtocol = function(build) {
    if (typeof this._parts.protocol === 'string') {
      this._parts.protocol = this._parts.protocol.toLowerCase();
      this.build(!build);
    }

    return this;
  };
  p.normalizeHostname = function(build) {
    if (this._parts.hostname) {
      if (this.is('IDN') && punycode) {
        this._parts.hostname = punycode.toASCII(this._parts.hostname);
      } else if (this.is('IPv6') && IPv6) {
        this._parts.hostname = IPv6.best(this._parts.hostname);
      }

      this._parts.hostname = this._parts.hostname.toLowerCase();
      this.build(!build);
    }

    return this;
  };
  p.normalizePort = function(build) {
    // remove port of it's the protocol's default
    if (typeof this._parts.protocol === 'string' && this._parts.port === URI.defaultPorts[this._parts.protocol]) {
      this._parts.port = null;
      this.build(!build);
    }

    return this;
  };
  p.normalizePath = function(build) {
    var _path = this._parts.path;
    if (!_path) {
      return this;
    }

    if (this._parts.urn) {
      this._parts.path = URI.recodeUrnPath(this._parts.path);
      this.build(!build);
      return this;
    }

    if (this._parts.path === '/') {
      return this;
    }

    _path = URI.recodePath(_path);

    var _was_relative;
    var _leadingParents = '';
    var _parent, _pos;

    // handle relative paths
    if (_path.charAt(0) !== '/') {
      _was_relative = true;
      _path = '/' + _path;
    }

    // handle relative files (as opposed to directories)
    if (_path.slice(-3) === '/..' || _path.slice(-2) === '/.') {
      _path += '/';
    }

    // resolve simples
    _path = _path
      .replace(/(\/(\.\/)+)|(\/\.$)/g, '/')
      .replace(/\/{2,}/g, '/');

    // remember leading parents
    if (_was_relative) {
      _leadingParents = _path.substring(1).match(/^(\.\.\/)+/) || '';
      if (_leadingParents) {
        _leadingParents = _leadingParents[0];
      }
    }

    // resolve parents
    while (true) {
      _parent = _path.search(/\/\.\.(\/|$)/);
      if (_parent === -1) {
        // no more ../ to resolve
        break;
      } else if (_parent === 0) {
        // top level cannot be relative, skip it
        _path = _path.substring(3);
        continue;
      }

      _pos = _path.substring(0, _parent).lastIndexOf('/');
      if (_pos === -1) {
        _pos = _parent;
      }
      _path = _path.substring(0, _pos) + _path.substring(_parent + 3);
    }

    // revert to relative
    if (_was_relative && this.is('relative')) {
      _path = _leadingParents + _path.substring(1);
    }

    this._parts.path = _path;
    this.build(!build);
    return this;
  };
  p.normalizePathname = p.normalizePath;
  p.normalizeQuery = function(build) {
    if (typeof this._parts.query === 'string') {
      if (!this._parts.query.length) {
        this._parts.query = null;
      } else {
        this.query(URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace));
      }

      this.build(!build);
    }

    return this;
  };
  p.normalizeFragment = function(build) {
    if (!this._parts.fragment) {
      this._parts.fragment = null;
      this.build(!build);
    }

    return this;
  };
  p.normalizeSearch = p.normalizeQuery;
  p.normalizeHash = p.normalizeFragment;

  p.iso8859 = function() {
    // expect unicode input, iso8859 output
    var e = URI.encode;
    var d = URI.decode;

    URI.encode = escape;
    URI.decode = decodeURIComponent;
    try {
      this.normalize();
    } finally {
      URI.encode = e;
      URI.decode = d;
    }
    return this;
  };

  p.unicode = function() {
    // expect iso8859 input, unicode output
    var e = URI.encode;
    var d = URI.decode;

    URI.encode = strictEncodeURIComponent;
    URI.decode = unescape;
    try {
      this.normalize();
    } finally {
      URI.encode = e;
      URI.decode = d;
    }
    return this;
  };

  p.readable = function() {
    var uri = this.clone();
    // removing username, password, because they shouldn't be displayed according to RFC 3986
    uri.username('').password('').normalize();
    var t = '';
    if (uri._parts.protocol) {
      t += uri._parts.protocol + '://';
    }

    if (uri._parts.hostname) {
      if (uri.is('punycode') && punycode) {
        t += punycode.toUnicode(uri._parts.hostname);
        if (uri._parts.port) {
          t += ':' + uri._parts.port;
        }
      } else {
        t += uri.host();
      }
    }

    if (uri._parts.hostname && uri._parts.path && uri._parts.path.charAt(0) !== '/') {
      t += '/';
    }

    t += uri.path(true);
    if (uri._parts.query) {
      var q = '';
      for (var i = 0, qp = uri._parts.query.split('&'), l = qp.length; i < l; i++) {
        var kv = (qp[i] || '').split('=');
        q += '&' + URI.decodeQuery(kv[0], this._parts.escapeQuerySpace)
          .replace(/&/g, '%26');

        if (kv[1] !== undefined) {
          q += '=' + URI.decodeQuery(kv[1], this._parts.escapeQuerySpace)
            .replace(/&/g, '%26');
        }
      }
      t += '?' + q.substring(1);
    }

    t += URI.decodeQuery(uri.hash(), true);
    return t;
  };

  // resolving relative and absolute URLs
  p.absoluteTo = function(base) {
    var resolved = this.clone();
    var properties = ['protocol', 'username', 'password', 'hostname', 'port'];
    var basedir, i, p;

    if (this._parts.urn) {
      throw new Error('URNs do not have any generally defined hierarchical components');
    }

    if (!(base instanceof URI)) {
      base = new URI(base);
    }

    if (!resolved._parts.protocol) {
      resolved._parts.protocol = base._parts.protocol;
    }

    if (this._parts.hostname) {
      return resolved;
    }

    for (i = 0; (p = properties[i]); i++) {
      resolved._parts[p] = base._parts[p];
    }

    if (!resolved._parts.path) {
      resolved._parts.path = base._parts.path;
      if (!resolved._parts.query) {
        resolved._parts.query = base._parts.query;
      }
    } else if (resolved._parts.path.substring(-2) === '..') {
      resolved._parts.path += '/';
    }

    if (resolved.path().charAt(0) !== '/') {
      basedir = base.directory();
      basedir = basedir ? basedir : base.path().indexOf('/') === 0 ? '/' : '';
      resolved._parts.path = (basedir ? (basedir + '/') : '') + resolved._parts.path;
      resolved.normalizePath();
    }

    resolved.build();
    return resolved;
  };
  p.relativeTo = function(base) {
    var relative = this.clone().normalize();
    var relativeParts, baseParts, common, relativePath, basePath;

    if (relative._parts.urn) {
      throw new Error('URNs do not have any generally defined hierarchical components');
    }

    base = new URI(base).normalize();
    relativeParts = relative._parts;
    baseParts = base._parts;
    relativePath = relative.path();
    basePath = base.path();

    if (relativePath.charAt(0) !== '/') {
      throw new Error('URI is already relative');
    }

    if (basePath.charAt(0) !== '/') {
      throw new Error('Cannot calculate a URI relative to another relative URI');
    }

    if (relativeParts.protocol === baseParts.protocol) {
      relativeParts.protocol = null;
    }

    if (relativeParts.username !== baseParts.username || relativeParts.password !== baseParts.password) {
      return relative.build();
    }

    if (relativeParts.protocol !== null || relativeParts.username !== null || relativeParts.password !== null) {
      return relative.build();
    }

    if (relativeParts.hostname === baseParts.hostname && relativeParts.port === baseParts.port) {
      relativeParts.hostname = null;
      relativeParts.port = null;
    } else {
      return relative.build();
    }

    if (relativePath === basePath) {
      relativeParts.path = '';
      return relative.build();
    }

    // determine common sub path
    common = URI.commonPath(relativePath, basePath);

    // If the paths have nothing in common, return a relative URL with the absolute path.
    if (!common) {
      return relative.build();
    }

    var parents = baseParts.path
      .substring(common.length)
      .replace(/[^\/]*$/, '')
      .replace(/.*?\//g, '../');

    relativeParts.path = (parents + relativeParts.path.substring(common.length)) || './';

    return relative.build();
  };

  // comparing URIs
  p.equals = function(uri) {
    var one = this.clone();
    var two = new URI(uri);
    var one_map = {};
    var two_map = {};
    var checked = {};
    var one_query, two_query, key;

    one.normalize();
    two.normalize();

    // exact match
    if (one.toString() === two.toString()) {
      return true;
    }

    // extract query string
    one_query = one.query();
    two_query = two.query();
    one.query('');
    two.query('');

    // definitely not equal if not even non-query parts match
    if (one.toString() !== two.toString()) {
      return false;
    }

    // query parameters have the same length, even if they're permuted
    if (one_query.length !== two_query.length) {
      return false;
    }

    one_map = URI.parseQuery(one_query, this._parts.escapeQuerySpace);
    two_map = URI.parseQuery(two_query, this._parts.escapeQuerySpace);

    for (key in one_map) {
      if (hasOwn.call(one_map, key)) {
        if (!isArray(one_map[key])) {
          if (one_map[key] !== two_map[key]) {
            return false;
          }
        } else if (!arraysEqual(one_map[key], two_map[key])) {
          return false;
        }

        checked[key] = true;
      }
    }

    for (key in two_map) {
      if (hasOwn.call(two_map, key)) {
        if (!checked[key]) {
          // two contains a parameter not present in one
          return false;
        }
      }
    }

    return true;
  };

  // state
  p.duplicateQueryParameters = function(v) {
    this._parts.duplicateQueryParameters = !!v;
    return this;
  };

  p.escapeQuerySpace = function(v) {
    this._parts.escapeQuerySpace = !!v;
    return this;
  };

  return URI;
}));

},{"./IPv6":3,"./SecondLevelDomains":4,"./punycode":6}],6:[function(require,module,exports){
(function (global){
/*! https://mths.be/punycode v1.4.0 by @mathias */
;(function(root) {

	/** Detect free variables */
	var freeExports = typeof exports == 'object' && exports &&
		!exports.nodeType && exports;
	var freeModule = typeof module == 'object' && module &&
		!module.nodeType && module;
	var freeGlobal = typeof global == 'object' && global;
	if (
		freeGlobal.global === freeGlobal ||
		freeGlobal.window === freeGlobal ||
		freeGlobal.self === freeGlobal
	) {
		root = freeGlobal;
	}

	/**
	 * The `punycode` object.
	 * @name punycode
	 * @type Object
	 */
	var punycode,

	/** Highest positive signed 32-bit float value */
	maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

	/** Bootstring parameters */
	base = 36,
	tMin = 1,
	tMax = 26,
	skew = 38,
	damp = 700,
	initialBias = 72,
	initialN = 128, // 0x80
	delimiter = '-', // '\x2D'

	/** Regular expressions */
	regexPunycode = /^xn--/,
	regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
	regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

	/** Error messages */
	errors = {
		'overflow': 'Overflow: input needs wider integers to process',
		'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
		'invalid-input': 'Invalid input'
	},

	/** Convenience shortcuts */
	baseMinusTMin = base - tMin,
	floor = Math.floor,
	stringFromCharCode = String.fromCharCode,

	/** Temporary variable */
	key;

	/*--------------------------------------------------------------------------*/

	/**
	 * A generic error utility function.
	 * @private
	 * @param {String} type The error type.
	 * @returns {Error} Throws a `RangeError` with the applicable error message.
	 */
	function error(type) {
		throw new RangeError(errors[type]);
	}

	/**
	 * A generic `Array#map` utility function.
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} callback The function that gets called for every array
	 * item.
	 * @returns {Array} A new array of values returned by the callback function.
	 */
	function map(array, fn) {
		var length = array.length;
		var result = [];
		while (length--) {
			result[length] = fn(array[length]);
		}
		return result;
	}

	/**
	 * A simple `Array#map`-like wrapper to work with domain name strings or email
	 * addresses.
	 * @private
	 * @param {String} domain The domain name or email address.
	 * @param {Function} callback The function that gets called for every
	 * character.
	 * @returns {Array} A new string of characters returned by the callback
	 * function.
	 */
	function mapDomain(string, fn) {
		var parts = string.split('@');
		var result = '';
		if (parts.length > 1) {
			// In email addresses, only the domain name should be punycoded. Leave
			// the local part (i.e. everything up to `@`) intact.
			result = parts[0] + '@';
			string = parts[1];
		}
		// Avoid `split(regex)` for IE8 compatibility. See #17.
		string = string.replace(regexSeparators, '\x2E');
		var labels = string.split('.');
		var encoded = map(labels, fn).join('.');
		return result + encoded;
	}

	/**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 * @see `punycode.ucs2.encode`
	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode.ucs2
	 * @name decode
	 * @param {String} string The Unicode input string (UCS-2).
	 * @returns {Array} The new array of code points.
	 */
	function ucs2decode(string) {
		var output = [],
		    counter = 0,
		    length = string.length,
		    value,
		    extra;
		while (counter < length) {
			value = string.charCodeAt(counter++);
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
				// high surrogate, and there is a next character
				extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) { // low surrogate
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
				} else {
					// unmatched surrogate; only append this code unit, in case the next
					// code unit is the high surrogate of a surrogate pair
					output.push(value);
					counter--;
				}
			} else {
				output.push(value);
			}
		}
		return output;
	}

	/**
	 * Creates a string based on an array of numeric code points.
	 * @see `punycode.ucs2.decode`
	 * @memberOf punycode.ucs2
	 * @name encode
	 * @param {Array} codePoints The array of numeric code points.
	 * @returns {String} The new Unicode string (UCS-2).
	 */
	function ucs2encode(array) {
		return map(array, function(value) {
			var output = '';
			if (value > 0xFFFF) {
				value -= 0x10000;
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
				value = 0xDC00 | value & 0x3FF;
			}
			output += stringFromCharCode(value);
			return output;
		}).join('');
	}

	/**
	 * Converts a basic code point into a digit/integer.
	 * @see `digitToBasic()`
	 * @private
	 * @param {Number} codePoint The basic numeric code point value.
	 * @returns {Number} The numeric value of a basic code point (for use in
	 * representing integers) in the range `0` to `base - 1`, or `base` if
	 * the code point does not represent a value.
	 */
	function basicToDigit(codePoint) {
		if (codePoint - 48 < 10) {
			return codePoint - 22;
		}
		if (codePoint - 65 < 26) {
			return codePoint - 65;
		}
		if (codePoint - 97 < 26) {
			return codePoint - 97;
		}
		return base;
	}

	/**
	 * Converts a digit/integer into a basic code point.
	 * @see `basicToDigit()`
	 * @private
	 * @param {Number} digit The numeric value of a basic code point.
	 * @returns {Number} The basic code point whose value (when used for
	 * representing integers) is `digit`, which needs to be in the range
	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	 * used; else, the lowercase form is used. The behavior is undefined
	 * if `flag` is non-zero and `digit` has no uppercase form.
	 */
	function digitToBasic(digit, flag) {
		//  0..25 map to ASCII a..z or A..Z
		// 26..35 map to ASCII 0..9
		return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
	}

	/**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * https://tools.ietf.org/html/rfc3492#section-3.4
	 * @private
	 */
	function adapt(delta, numPoints, firstTime) {
		var k = 0;
		delta = firstTime ? floor(delta / damp) : delta >> 1;
		delta += floor(delta / numPoints);
		for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
			delta = floor(delta / baseMinusTMin);
		}
		return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
	}

	/**
	 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The Punycode string of ASCII-only symbols.
	 * @returns {String} The resulting string of Unicode symbols.
	 */
	function decode(input) {
		// Don't use UCS-2
		var output = [],
		    inputLength = input.length,
		    out,
		    i = 0,
		    n = initialN,
		    bias = initialBias,
		    basic,
		    j,
		    index,
		    oldi,
		    w,
		    k,
		    digit,
		    t,
		    /** Cached calculation results */
		    baseMinusT;

		// Handle the basic code points: let `basic` be the number of input code
		// points before the last delimiter, or `0` if there is none, then copy
		// the first basic code points to the output.

		basic = input.lastIndexOf(delimiter);
		if (basic < 0) {
			basic = 0;
		}

		for (j = 0; j < basic; ++j) {
			// if it's not a basic code point
			if (input.charCodeAt(j) >= 0x80) {
				error('not-basic');
			}
			output.push(input.charCodeAt(j));
		}

		// Main decoding loop: start just after the last delimiter if any basic code
		// points were copied; start at the beginning otherwise.

		for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

			// `index` is the index of the next character to be consumed.
			// Decode a generalized variable-length integer into `delta`,
			// which gets added to `i`. The overflow checking is easier
			// if we increase `i` as we go, then subtract off its starting
			// value at the end to obtain `delta`.
			for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

				if (index >= inputLength) {
					error('invalid-input');
				}

				digit = basicToDigit(input.charCodeAt(index++));

				if (digit >= base || digit > floor((maxInt - i) / w)) {
					error('overflow');
				}

				i += digit * w;
				t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

				if (digit < t) {
					break;
				}

				baseMinusT = base - t;
				if (w > floor(maxInt / baseMinusT)) {
					error('overflow');
				}

				w *= baseMinusT;

			}

			out = output.length + 1;
			bias = adapt(i - oldi, out, oldi == 0);

			// `i` was supposed to wrap around from `out` to `0`,
			// incrementing `n` each time, so we'll fix that now:
			if (floor(i / out) > maxInt - n) {
				error('overflow');
			}

			n += floor(i / out);
			i %= out;

			// Insert `n` at position `i` of the output
			output.splice(i++, 0, n);

		}

		return ucs2encode(output);
	}

	/**
	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
	 * Punycode string of ASCII-only symbols.
	 * @memberOf punycode
	 * @param {String} input The string of Unicode symbols.
	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
	 */
	function encode(input) {
		var n,
		    delta,
		    handledCPCount,
		    basicLength,
		    bias,
		    j,
		    m,
		    q,
		    k,
		    t,
		    currentValue,
		    output = [],
		    /** `inputLength` will hold the number of code points in `input`. */
		    inputLength,
		    /** Cached calculation results */
		    handledCPCountPlusOne,
		    baseMinusT,
		    qMinusT;

		// Convert the input in UCS-2 to Unicode
		input = ucs2decode(input);

		// Cache the length
		inputLength = input.length;

		// Initialize the state
		n = initialN;
		delta = 0;
		bias = initialBias;

		// Handle the basic code points
		for (j = 0; j < inputLength; ++j) {
			currentValue = input[j];
			if (currentValue < 0x80) {
				output.push(stringFromCharCode(currentValue));
			}
		}

		handledCPCount = basicLength = output.length;

		// `handledCPCount` is the number of code points that have been handled;
		// `basicLength` is the number of basic code points.

		// Finish the basic string - if it is not empty - with a delimiter
		if (basicLength) {
			output.push(delimiter);
		}

		// Main encoding loop:
		while (handledCPCount < inputLength) {

			// All non-basic code points < n have been handled already. Find the next
			// larger one:
			for (m = maxInt, j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue >= n && currentValue < m) {
					m = currentValue;
				}
			}

			// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
			// but guard against overflow
			handledCPCountPlusOne = handledCPCount + 1;
			if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
				error('overflow');
			}

			delta += (m - n) * handledCPCountPlusOne;
			n = m;

			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];

				if (currentValue < n && ++delta > maxInt) {
					error('overflow');
				}

				if (currentValue == n) {
					// Represent delta as a generalized variable-length integer
					for (q = delta, k = base; /* no condition */; k += base) {
						t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
						if (q < t) {
							break;
						}
						qMinusT = q - t;
						baseMinusT = base - t;
						output.push(
							stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
						);
						q = floor(qMinusT / baseMinusT);
					}

					output.push(stringFromCharCode(digitToBasic(q, 0)));
					bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
					delta = 0;
					++handledCPCount;
				}
			}

			++delta;
			++n;

		}
		return output.join('');
	}

	/**
	 * Converts a Punycode string representing a domain name or an email address
	 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
	 * it doesn't matter if you call it on a string that has already been
	 * converted to Unicode.
	 * @memberOf punycode
	 * @param {String} input The Punycoded domain name or email address to
	 * convert to Unicode.
	 * @returns {String} The Unicode representation of the given Punycode
	 * string.
	 */
	function toUnicode(input) {
		return mapDomain(input, function(string) {
			return regexPunycode.test(string)
				? decode(string.slice(4).toLowerCase())
				: string;
		});
	}

	/**
	 * Converts a Unicode string representing a domain name or an email address to
	 * Punycode. Only the non-ASCII parts of the domain name will be converted,
	 * i.e. it doesn't matter if you call it with a domain that's already in
	 * ASCII.
	 * @memberOf punycode
	 * @param {String} input The domain name or email address to convert, as a
	 * Unicode string.
	 * @returns {String} The Punycode representation of the given domain name or
	 * email address.
	 */
	function toASCII(input) {
		return mapDomain(input, function(string) {
			return regexNonASCII.test(string)
				? 'xn--' + encode(string)
				: string;
		});
	}

	/*--------------------------------------------------------------------------*/

	/** Define the public API */
	punycode = {
		/**
		 * A string representing the current Punycode.js version number.
		 * @memberOf punycode
		 * @type String
		 */
		'version': '1.3.2',
		/**
		 * An object of methods to convert from JavaScript's internal character
		 * representation (UCS-2) to Unicode code points, and back.
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode
		 * @type Object
		 */
		'ucs2': {
			'decode': ucs2decode,
			'encode': ucs2encode
		},
		'decode': decode,
		'encode': encode,
		'toASCII': toASCII,
		'toUnicode': toUnicode
	};

	/** Expose `punycode` */
	// Some AMD build optimizers, like r.js, check for specific condition patterns
	// like the following:
	if (
		typeof define == 'function' &&
		typeof define.amd == 'object' &&
		define.amd
	) {
		define('punycode', function() {
			return punycode;
		});
	} else if (freeExports && freeModule) {
		if (module.exports == freeExports) {
			// in Node.js, io.js, or RingoJS v0.8.0+
			freeModule.exports = punycode;
		} else {
			// in Narwhal or RingoJS v0.7.0-
			for (key in punycode) {
				punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
			}
		}
	} else {
		// in Rhino or a web browser
		root.punycode = punycode;
	}

}(this));

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],7:[function(require,module,exports){
'use strict';Object.defineProperty(exports,"__esModule",{value:true});exports.default=activate;var _HypertyDiscovery=require('service-framework/dist/HypertyDiscovery');var _HypertyDiscovery2=_interopRequireDefault(_HypertyDiscovery);var _urijs=require('urijs');var _urijs2=_interopRequireDefault(_urijs);var _Syncher=require('service-framework/dist/Syncher');var _GroupChat=require('./GroupChat');var _GroupChat2=_interopRequireDefault(_GroupChat);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var Communication=function Communication(name){_classCallCheck(this,Communication);this.startingTime=Date.now();this.lastModified=Date.now();this.status="pending";this.resources=[];this.children=[];this.name=name;};var GroupChatHyperty={_getHyFor:function _getHyFor(participants){var _this=this;return Promise.all(participants.map(function(p){return _this.hypertyDiscoveryService.discoverHypertiesPerUser(p.email,p.domain).then(function(hyperties){return Object.keys(hyperties).map(function(key){return {key:key,descriptor:hyperties[key].descriptor,lastModified:hyperties[key].lastModified};}).filter(function(desc){return desc.descriptor.endsWith('GroupChat');}).sort(function(a,b){return new Date(a.lastModified)<new Date(b.lastModified)?1:-1;}).shift().key;});}));},_createSyncher:function _createSyncher(name,hyperties){return this.syncher.create(this.objectDescURL,hyperties,new Communication(name));},create:function create(name,participants){var _this2=this;return this._getHyFor(participants).then(function(hyperties){return _this2._createSyncher(name,hyperties);}).then(function(dataObjectReporter){dataObjectReporter.onSubscription(function(event){return event.accept();});return (0,_GroupChat2.default)(dataObjectReporter,_this2._position.data);});},onInvite:function onInvite(callback){var _this3=this;return this.syncher.onNotification(function(event){if(event.schema===_this3.locationDescURL){_this3.syncher.subscribe(_this3.locationDescURL,event.url).then(function(dataObject){_this3._position=dataObject;});}else if(event.schema===_this3.objectDescURL){_this3.syncher.subscribe(_this3.objectDescURL,event.url).then(function(dataObject){return callback((0,_GroupChat2.default)(dataObject,_this3._position.data));});}});}};var groupChatFactory=function groupChatFactory(hypertyURL,bus,config){var syncher=new _Syncher.Syncher(hypertyURL,bus,config);var hypertyDiscovery=new _HypertyDiscovery2.default(hypertyURL,bus);var uri=new _urijs2.default(hypertyURL);return Object.assign(Object.create(GroupChatHyperty),{'_position':{data:{value:{coords:{}}}},'syncher':syncher,'hypertyDiscoveryService':hypertyDiscovery,'objectDescURL':'hyperty-catalogue://'+uri.hostname()+'/.well-known/dataschemas/Communication','locationDescURL':'hyperty-catalogue://'+uri.hostname()+'/.well-known/dataschemas/ContextDataSchema'});};function activate(hypertyURL,bus,config){return {name:'GroupChat',instance:groupChatFactory(hypertyURL,bus,config)};}module.exports=exports['default'];

},{"./GroupChat":8,"service-framework/dist/HypertyDiscovery":1,"service-framework/dist/Syncher":2,"urijs":5}],8:[function(require,module,exports){
'use strict';Object.defineProperty(exports,"__esModule",{value:true});exports.default=function(dataObject,position){return Object.assign(Object.create(GroupChat),{_dataObject:dataObject,name:dataObject.data.name,startingTime:dataObject.data.startingTime,messages:[],position:position});};var _GroupChatMessage=require('./GroupChatMessage');var _GroupChatMessage2=_interopRequireDefault(_GroupChatMessage);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var GroupChat={sendMessage:function sendMessage(message,distance){var _this=this;return this._dataObject.addChild('chatmessages',{chatMessage:message,distance:distance,position:this.position.value.coords}).then(function(child){_this.messages.push((0,_GroupChatMessage2.default)(child,true));return _this.messages[_this.messages.length-1];});},onMessage:function onMessage(callback){var _this2=this;this._dataObject.onAddChild(function(child){var childData=child.data?child.data:child.value;if(childData.distance&&_this2._distance(_this2.position.coords,childData.position)>distance)return;_this2.messages.push((0,_GroupChatMessage2.default)(child,false));callback(_this2.messages[_this2.messages.length-1]);});},_distance:function _distance(lat1,lon1,lat2,lon2,unit){var radlat1=Math.PI*lat1/180;var radlat2=Math.PI*lat2/180;var theta=lon1-lon2;var radtheta=Math.PI*theta/180;var dist=Math.sin(radlat1)*Math.sin(radlat2)+Math.cos(radlat1)*Math.cos(radlat2)*Math.cos(radtheta);dist=Math.acos(dist);dist=dist*180/Math.PI;dist=dist*60*1.1515;if(unit=="K"){dist=dist*1.609344;}if(unit=="N"){dist=dist*0.8684;}return dist;}};module.exports=exports['default'];

},{"./GroupChatMessage":9}],9:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.default=function(dataObjectChild,isMe){return Object.assign(Object.create(GroupChatMessage),{_dataObjectChild:dataObjectChild,isMe:isMe,text:dataObjectChild.data?dataObjectChild.data.chatMessage:dataObjectChild.value.chatMessage});};var GroupChatMessage={};module.exports=exports['default'];

},{}]},{},[7])(7)
});",
      "sourceCodeClassname": "GroupChat",
      "encoding": "base64",
      "signature": ""
    },
    "cguid": 10005,
    "type": "Hyperties",
    "version": "0.1",
    "description": "Description of GroupChat",
    "objectName": "GroupChat",
    "configuration": {},
    "sourcePackageURL": "/sourcePackage",
    "language": "javascript",
    "signature": "",
    "messageSchemas": "",
    "dataObjects": [],
    "accessControlPolicy": "somePolicy"
  },
  "LocationHyperty": {
    "sourcePackage": {
      "sourceCode": "(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.activate = f().default}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Copyright 2016 PT Inovação e Sistemas SA
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Copyright 2016 INESC-ID
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Copyright 2016 QUOBIS NETWORKS SL
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Copyright 2016 ORANGE SA
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Copyright 2016 Deutsche Telekom AG
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Copyright 2016 Apizee
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Licensed under the Apache License, Version 2.0 (the "License");
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * you may not use this file except in compliance with the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * You may obtain a copy of the License at
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *   http://www.apache.org/licenses/LICENSE-2.0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Unless required by applicable law or agreed to in writing, software
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * distributed under the License is distributed on an "AS IS" BASIS,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * See the License for the specific language governing permissions and
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * limitations under the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     **/

var _SyncObject = require('./SyncObject');

var _SyncObject2 = _interopRequireDefault(_SyncObject);

var _DataObjectChild = require('./DataObjectChild');

var _DataObjectChild2 = _interopRequireDefault(_DataObjectChild);

var _utils = require('../utils/utils.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Main extension class for observers and reporters, with common properties and methods.
 * Children management is common for observers and reporters.
 */

var DataObject = function () {
  /* private
  _version: number
   _owner: HypertyURL
  _url: ObjectURL
  _schema: Schema
  _bus: MiniBus
  _status: on | paused
  _syncObj: SyncData
   _children: { id: DataObjectChild }
  _childrenListeners: [MsgListener]
   ----event handlers----
  _onAddChildHandler: (event) => void
  */

  /**
   * @ignore
   * Should not be used directly by Hyperties. It's called by the Syncher create or subscribe method's
   */

  function DataObject(syncher, url, schema, initialStatus, initialData, childrens) {
    _classCallCheck(this, DataObject);

    var _this = this;

    _this._syncher = syncher;
    _this._url = url;
    _this._schema = schema;
    _this._status = initialStatus;
    _this._syncObj = new _SyncObject2.default(initialData);
    _this._childrens = childrens;

    _this._version = 0;
    _this._childId = 0;
    _this._childrenObjects = {};
    _this._childrenListeners = [];

    _this._owner = syncher._owner;
    _this._bus = syncher._bus;
  }

  _createClass(DataObject, [{
    key: '_allocateListeners',
    value: function _allocateListeners() {
      var _this2 = this;

      var _this = this;

      var childBaseURL = _this._url + '/children/';
      if (_this._childrens) {
        _this._childrens.forEach(function (child) {
          var childURL = childBaseURL + child;
          var listener = _this._bus.addListener(childURL, function (msg) {
            //ignore msg sent by himself
            if (msg.from !== _this2._owner) {
              console.log('DataObject-Children-RCV: ', msg);
              switch (msg.type) {
                case 'create':
                  _this._onChildCreate(msg);break;
                case 'delete':
                  console.log(msg);break;
                default:
                  _this._changeChildren(msg);break;
              }
            }
          });

          _this._childrenListeners.push(listener);
        });
      }
    }
  }, {
    key: '_releaseListeners',
    value: function _releaseListeners() {
      var _this = this;

      _this._childrenListeners.forEach(function (listener) {
        listener.remove();
      });

      Object.keys(_this._childrenObjects).forEach(function (key) {
        _this._childrenObjects[key]._releaseListeners();
      });
    }

    /**
     * Object URL of reporter or observer
     * @type {ObjectURL}
     */

  }, {
    key: 'pause',


    /**
     * @ignore
     */
    value: function pause() {
      //TODO: this feature needs more analise
      throw 'Not implemented';
    }

    /**
     * @ignore
     */

  }, {
    key: 'resume',
    value: function resume() {
      //TODO: this feature needs more analise
      throw 'Not implemented';
    }

    /**
     * @ignore
     */

  }, {
    key: 'stop',
    value: function stop() {
      //TODO: should remove the subscription and send message unsubscribe?
      throw 'Not implemented';
    }

    /**
     * Create and add a children to the subscription group.
     * @param {String} resource - Resource name, one of the items in the schema.properties.scheme of the parent object.
     * @param {JSON} initialData - Initial data of the child
     * @return {Promise<DataObjectChild>} - Return Promise to a new Children.
     */

  }, {
    key: 'addChild',
    value: function addChild(resource, initialData) {
      var _this = this;

      //create new child unique ID, based on hypertyURL
      _this._childId++;
      var msgChildId = _this._owner + '#' + _this._childId;
      var msgChildPath = _this._url + '/children/' + resource;

      var requestMsg = {
        type: 'create', from: _this._owner, to: msgChildPath,
        body: { resource: msgChildId, value: initialData }
      };

      //returns promise, in the future, the API may change to asynchronous call
      return new Promise(function (resolve) {
        var msgId = _this._bus.postMessage(requestMsg);

        console.log('create-reporter-child( ' + _this._owner + ' ): ', requestMsg);
        var newChild = new _DataObjectChild2.default(_this, msgChildId, initialData, _this._owner, msgId);
        newChild.onChange(function (event) {
          _this._onChange(event, { path: msgChildPath, childId: msgChildId });
        });

        _this._childrenObjects[msgChildId] = newChild;

        resolve(newChild);
      });
    }

    /**
     * Setup the callback to process create and delete childrens
     * @param {function(event: MsgEvent)} callback
     */

  }, {
    key: 'onAddChild',
    value: function onAddChild(callback) {
      this._onAddChildrenHandler = callback;
    }
  }, {
    key: '_onChildCreate',
    value: function _onChildCreate(msg) {
      var _this = this;
      var msgChildId = msg.body.resource;

      console.log('create-observer-child( ' + _this._owner + ' ): ', msg);
      var newChild = new _DataObjectChild2.default(_this, msgChildId, msg.body.value);
      _this._childrenObjects[msgChildId] = newChild;

      setTimeout(function () {
        _this._bus.postMessage({
          id: msg.id, type: 'response', from: msg.to, to: msg.from,
          body: { code: 200, source: _this._owner }
        });
      });

      var event = {
        type: msg.type,
        from: msg.from,
        url: msg.to,
        value: msg.body.value,
        childId: msgChildId,
        identity: msg.body.identity
      };

      if (_this._onAddChildrenHandler) {
        console.log('ADD-CHILDREN-EVENT: ', event);
        _this._onAddChildrenHandler(event);
      }
    }

    //send delta messages to subscriptions

  }, {
    key: '_onChange',
    value: function _onChange(event, childInfo) {
      var _this = this;

      _this._version++;

      if (_this._status === 'on') {
        var changeMsg = {
          type: 'update', from: _this._url, to: _this._url + '/changes',
          body: { version: _this._version, source: _this._owner, attribute: event.field }
        };

        if (event.oType === _SyncObject.ObjectType.OBJECT) {
          if (event.cType !== _SyncObject.ChangeType.REMOVE) {
            changeMsg.body.value = event.data;
          }
        } else {
          changeMsg.body.attributeType = event.oType;
          changeMsg.body.value = event.data;
          if (event.cType !== _SyncObject.ChangeType.UPDATE) {
            changeMsg.body.operation = event.cType;
          }
        }

        //childInfo must have (path, childId)
        if (childInfo) {
          changeMsg.to = childInfo.path;
          changeMsg.body.resource = childInfo.childId;
        }

        _this._bus.postMessage(changeMsg);
      }
    }

    //receive and process delta messages

  }, {
    key: '_changeObject',
    value: function _changeObject(syncObj, msg) {
      var _this = this;

      //TODO: update version ?
      //how to handle an incorrect version ? Example: receive a version 3 when the observer is in version 1, where is the version 2 ?
      //will we need to confirm the reception ?
      if (_this._version + 1 === msg.body.version) {
        _this._version++;
        var path = msg.body.attribute;
        var value = (0, _utils.deepClone)(msg.body.value);
        var findResult = syncObj.findBefore(path);

        if (msg.body.attributeType === _SyncObject.ObjectType.ARRAY) {
          if (msg.body.operation === _SyncObject.ChangeType.ADD) {
            var arr = findResult.obj;
            var index = findResult.last;
            Array.prototype.splice.apply(arr, [index, 0].concat(value));
          } else if (msg.body.operation === _SyncObject.ChangeType.REMOVE) {
            var _arr = findResult.obj;
            var _index = findResult.last;
            _arr.splice(_index, value);
          } else {
            findResult.obj[findResult.last] = value; // UPDATE
          }
        } else {
            if (msg.body.value) {
              findResult.obj[findResult.last] = value; // UPDATE or ADD
            } else {
                delete findResult.obj[findResult.last]; // REMOVE
              }
          }
      } else {
          //TODO: how to handle unsynchronized versions?
          console.log('UNSYNCHRONIZED VERSION: (data => ' + _this._version + ', msg => ' + msg.body.version + ')');
        }
    }
  }, {
    key: '_changeChildren',
    value: function _changeChildren(msg) {
      var _this = this;
      console.log('Change children: ', _this._owner, msg);

      var childId = msg.body.resource;
      var children = _this._childrenObjects[childId];

      if (children) {
        _this._changeObject(children._syncObj, msg);
      } else {
        console.log('No children found for: ', childId);
      }
    }
  }, {
    key: 'url',
    get: function get() {
      return this._url;
    }

    /**
     * Object schema URL (this field is not yet stable, and is subsject to change)
     * @type {SchemaURL}
     */

  }, {
    key: 'schema',
    get: function get() {
      return this._schema;
    }

    /**
     * Status of the reporter or observer connection (this field is not yet stable, and is subsject to change)
     * @type {Status} - Enum of: on | paused
     */

  }, {
    key: 'status',
    get: function get() {
      return this._status;
    }

    /**
     * Data structure to be synchronized.
     * @type {JSON} - JSON structure that should follow the defined schema, if any.
     */

  }, {
    key: 'data',
    get: function get() {
      return this._syncObj.data;
    }

    /**
     * All created children's since the subscription, doesn't contain all children's since reporter creation.
     * @type {Object<ChildId, DataObjectChild>}
     */

  }, {
    key: 'childrens',
    get: function get() {
      return this._childrenObjects;
    }
  }]);

  return DataObject;
}();

exports.default = DataObject;

},{"../utils/utils.js":8,"./DataObjectChild":2,"./SyncObject":6}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Copyright 2016 PT Inovação e Sistemas SA
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Copyright 2016 INESC-ID
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Copyright 2016 QUOBIS NETWORKS SL
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Copyright 2016 ORANGE SA
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Copyright 2016 Deutsche Telekom AG
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Copyright 2016 Apizee
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Licensed under the Apache License, Version 2.0 (the "License");
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * you may not use this file except in compliance with the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * You may obtain a copy of the License at
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *   http://www.apache.org/licenses/LICENSE-2.0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Unless required by applicable law or agreed to in writing, software
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * distributed under the License is distributed on an "AS IS" BASIS,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * See the License for the specific language governing permissions and
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * limitations under the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     **/

var _SyncObject = require('./SyncObject');

var _SyncObject2 = _interopRequireDefault(_SyncObject);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * The class returned from the DataObject addChildren call or from onAddChildren if remotely created.
 * Children object synchronization is a a fast forward mechanism, no need for direct subscriptions, it uses the already authorized subscription from the parent DataObject.
 */

var DataObjectChild /* implements SyncStatus */ = function () {
  /* private
   ----event handlers----
  _onResponseHandler: (event) => void
  */

  /**
   * @ignore
   * Should not be used directly by Hyperties. It's called by the DataObject.addChildren
   */

  function DataObjectChild(parent, childId, initialData, owner, msgId) {
    _classCallCheck(this, DataObjectChild);

    var _this = this;

    _this._parent = parent;
    _this._childId = childId;
    _this._owner = owner;
    _this._msgId = msgId;

    _this._syncObj = new _SyncObject2.default(initialData);

    _this._bus = parent._bus;
    _this._allocateListeners();
  }

  _createClass(DataObjectChild, [{
    key: '_allocateListeners',
    value: function _allocateListeners() {
      var _this = this;

      //this is only needed for children reporters
      if (_this._owner) {
        _this._listener = _this._bus.addListener(_this._owner, function (msg) {
          if (msg.type === 'response' && msg.id === _this._msgId) {
            console.log('DataObjectChild.onResponse:', msg);
            _this._onResponse(msg);
          }
        });
      }
    }
  }, {
    key: '_releaseListeners',
    value: function _releaseListeners() {
      var _this = this;

      if (_this._listener) {
        _this._listener.remove();
      }
    }

    /**
     * Release and delete object data
     */

  }, {
    key: 'delete',
    value: function _delete() {
      var _this = this;

      delete _this._parent._children[_this._childId];

      _this._releaseListeners();

      //TODO: send delete message ?
    }

    /**
     * Children ID generated on addChildren. Unique identifier
     * @type {URL} - URL of the format <HypertyURL>#<numeric-sequence>
     */

  }, {
    key: 'onChange',


    /**
     * Register the change listeners sent by the reporter child
     * @param {function(event: MsgEvent)} callback
     */
    value: function onChange(callback) {
      this._syncObj.observe(function (event) {
        callback(event);
      });
    }

    /**
     * Setup the callback to process response notifications of the creates
     * @param {function(event: MsgEvent)} callback
     */

  }, {
    key: 'onResponse',
    value: function onResponse(callback) {
      this._onResponseHandler = callback;
    }
  }, {
    key: '_onResponse',
    value: function _onResponse(msg) {
      var _this = this;

      var event = {
        type: msg.type,
        url: msg.body.source,
        code: msg.body.code
      };

      if (_this._onResponseHandler) {
        _this._onResponseHandler(event);
      }
    }
  }, {
    key: 'childId',
    get: function get() {
      return this._childId;
    }

    /**
     * Data Structure to be synchronized.
     * @type {JSON} - JSON structure that should follow the defined schema, if any.
     */

  }, {
    key: 'data',
    get: function get() {
      return this._syncObj.data;
    }
  }]);

  return DataObjectChild;
}();

exports.default = DataObjectChild;

},{"./SyncObject":6}],3:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _DataObject2 = require('./DataObject');

var _DataObject3 = _interopRequireDefault(_DataObject2);

var _DataObjectChild = require('./DataObjectChild');

var _DataObjectChild2 = _interopRequireDefault(_DataObjectChild);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Copyright 2016 PT Inovação e Sistemas SA
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Copyright 2016 INESC-ID
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Copyright 2016 QUOBIS NETWORKS SL
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Copyright 2016 ORANGE SA
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Copyright 2016 Deutsche Telekom AG
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Copyright 2016 Apizee
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Licensed under the Apache License, Version 2.0 (the "License");
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * you may not use this file except in compliance with the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * You may obtain a copy of the License at
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *   http://www.apache.org/licenses/LICENSE-2.0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Unless required by applicable law or agreed to in writing, software
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * distributed under the License is distributed on an "AS IS" BASIS,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * See the License for the specific language governing permissions and
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * limitations under the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               **/

var FilterType = { ANY: 'any', START: 'start', EXACT: 'exact' };

/**
 * The class returned from the Syncher subscribe call.
 * To be used as an observation point from a DataObjectReporter change.
 */

var DataObjectObserver = function (_DataObject) {
  _inherits(DataObjectObserver, _DataObject);

  /* private
  _changeListener: MsgListener
   ----event handlers----
  _filters: {<filter>: {type: <start, exact>, callback: <function>} }
  */

  /**
   * @ignore
   * Should not be used directly by Hyperties. It's called by the Syncher.subscribe method
   */

  function DataObjectObserver(syncher, url, schema, initialStatus, initialData, childrens, initialVersion) {
    _classCallCheck(this, DataObjectObserver);

    var _this2 = _possibleConstructorReturn(this, Object.getPrototypeOf(DataObjectObserver).call(this, syncher, url, schema, initialStatus, initialData.data, childrens));

    var _this = _this2;

    _this._version = initialVersion;
    _this._filters = {};

    _this._syncObj.observe(function (event) {
      _this._onFilter(event);
    });

    //setup childrens data from subscription
    Object.keys(initialData.childrens).forEach(function (childId) {
      var childData = initialData.childrens[childId];
      _this._childrenObjects[childId] = new _DataObjectChild2.default(_this, childId, childData);
    });

    _this._allocateListeners();
    return _this2;
  }

  _createClass(DataObjectObserver, [{
    key: '_allocateListeners',
    value: function _allocateListeners() {
      _get(Object.getPrototypeOf(DataObjectObserver.prototype), '_allocateListeners', this).call(this);
      var _this = this;

      _this._changeListener = _this._bus.addListener(_this._url + '/changes', function (msg) {
        if (msg.type === 'update') {
          console.log('DataObjectObserver-' + _this._url + '-RCV: ', msg);
          _this._changeObject(_this._syncObj, msg);
        }
      });
    }
  }, {
    key: '_releaseListeners',
    value: function _releaseListeners() {
      _get(Object.getPrototypeOf(DataObjectObserver.prototype), '_releaseListeners', this).call(this);
      var _this = this;

      _this._changeListener.remove();
    }

    /**
     * Release and delete object data
     */

  }, {
    key: 'delete',
    value: function _delete() {
      var _this = this;

      _this._releaseListeners();
      delete _this._syncher._observers[_this._url];
    }

    /**
     * Release and delete object data
     */

  }, {
    key: 'unsubscribe',
    value: function unsubscribe() {
      var _this = this;

      var unSubscribeMsg = {
        type: 'unsubscribe', from: _this._owner, to: _this._syncher._subURL,
        body: { resource: _this._url }
      };

      _this._bus.postMessage(unSubscribeMsg, function (reply) {
        console.log('DataObjectObserver-UNSUBSCRIBE: ', reply);
        if (reply.body.code === 200) {
          _this._releaseListeners();
          delete _this._syncher._observers[_this._url];
        }
      });
    }

    /**
     * Register the change listeners sent by the reporter
     * @param {string} filter - Filter that identifies the field (separeted dot path). Accepts * at the end for a more unrestricted filtering.
     * @param {function(event: MsgEvent)} callback
     */

  }, {
    key: 'onChange',
    value: function onChange(filter, callback) {
      var key = filter;
      var filterObj = {
        type: FilterType.EXACT,
        callback: callback
      };

      var idx = filter.indexOf('*');
      if (idx === filter.length - 1) {
        if (idx === 0) {
          filterObj.type = FilterType.ANY;
        } else {
          filterObj.type = FilterType.START;
          key = filter.substr(0, filter.length - 1);
        }
      }

      this._filters[key] = filterObj;
    }
  }, {
    key: '_onFilter',
    value: function _onFilter(event) {
      var _this = this;

      Object.keys(_this._filters).forEach(function (key) {
        var filter = _this._filters[key];
        if (filter.type === FilterType.ANY) {
          //match anything
          filter.callback(event);
        } else if (filter.type === FilterType.START) {
          //if starts with filter...
          if (event.field.indexOf(key) === 0) {
            filter.callback(event);
          }
        } else if (filter.type === FilterType.EXACT) {
          //exact match
          if (event.field === key) {
            filter.callback(event);
          }
        }
      });
    }
  }]);

  return DataObjectObserver;
}(_DataObject3.default /* implements SyncStatus */);

exports.default = DataObjectObserver;

},{"./DataObject":1,"./DataObjectChild":2}],4:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _DataObject2 = require('./DataObject');

var _DataObject3 = _interopRequireDefault(_DataObject2);

var _utils = require('../utils/utils.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Copyright 2016 PT Inovação e Sistemas SA
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Copyright 2016 INESC-ID
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Copyright 2016 QUOBIS NETWORKS SL
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Copyright 2016 ORANGE SA
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Copyright 2016 Deutsche Telekom AG
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Copyright 2016 Apizee
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Licensed under the Apache License, Version 2.0 (the "License");
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * you may not use this file except in compliance with the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * You may obtain a copy of the License at
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *   http://www.apache.org/licenses/LICENSE-2.0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Unless required by applicable law or agreed to in writing, software
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * distributed under the License is distributed on an "AS IS" BASIS,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * See the License for the specific language governing permissions and
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * limitations under the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               **/

/**
 * The class returned from the Syncher create call.
 * To be used as a reporter point, changes will be submited to DataObjectObserver instances.
 */

var DataObjectReporter = function (_DataObject) {
  _inherits(DataObjectReporter, _DataObject);

  /* private
  _subscriptions: <hypertyUrl: { status: string } }>
   ----event handlers----
  _onSubscriptionHandler: (event) => void
  _onResponseHandler: (event) => void
  */

  /**
   * @ignore
   * Should not be used directly by Hyperties. It's called by the Syncher.create method
   */

  function DataObjectReporter(syncher, url, schema, initialStatus, initialData, childrens) {
    _classCallCheck(this, DataObjectReporter);

    var _this2 = _possibleConstructorReturn(this, Object.getPrototypeOf(DataObjectReporter).call(this, syncher, url, schema, initialStatus, initialData, childrens));

    var _this = _this2;

    _this._subscriptions = {};

    _this._syncObj.observe(function (event) {
      console.log('DataObjectReporter-' + url + '-SEND: ', event);
      _this._onChange(event);
    });

    _this._allocateListeners();
    return _this2;
  }

  _createClass(DataObjectReporter, [{
    key: '_allocateListeners',
    value: function _allocateListeners() {
      _get(Object.getPrototypeOf(DataObjectReporter.prototype), '_allocateListeners', this).call(this);
      var _this = this;

      _this._responseListener = _this._bus.addListener(_this._url, function (msg) {
        if (msg.type === 'response') {
          _this._onResponse(msg);
        }
      });
    }
  }, {
    key: '_releaseListeners',
    value: function _releaseListeners() {
      _get(Object.getPrototypeOf(DataObjectReporter.prototype), '_releaseListeners', this).call(this);
      var _this = this;

      _this._responseListener.remove();
    }
  }, {
    key: 'inviteObservers',
    value: function inviteObservers(observers) {
      var _this = this;

      var inviteMsg = {
        type: 'create', from: _this._syncher._owner, to: _this._syncher._subURL,
        body: { resource: _this._url, schema: _this._schema, value: _this._syncObj.data, authorise: observers }
      };

      _this._bus.postMessage(inviteMsg);
    }

    /**
     * Release and delete object data
     */

  }, {
    key: 'delete',
    value: function _delete() {
      var _this = this;

      var deleteMsg = {
        type: 'delete', from: _this._owner, to: _this._syncher._subURL,
        body: { resource: _this._url }
      };

      _this._bus.postMessage(deleteMsg, function (reply) {
        console.log('DataObjectReporter-DELETE: ', reply);
        if (reply.body.code === 200) {
          _this._releaseListeners();
          delete _this._syncher._reporters[_this._url];
        }
      });
    }

    /**
     * Subscriptions requested and accepted to this reporter
     * @type {Object<HypertyURL, SyncSubscription>}
     */

  }, {
    key: 'onSubscription',


    /**
     * Setup the callback to process subscribe and unsubscribe notifications
     * @param {function(event: MsgEvent)} callback
     */
    value: function onSubscription(callback) {
      this._onSubscriptionHandler = callback;
    }

    /**
     * Setup the callback to process response notifications of the create's
     * @param {function(event: MsgEvent)} callback
     */

  }, {
    key: 'onResponse',
    value: function onResponse(callback) {
      this._onResponseHandler = callback;
    }
  }, {
    key: '_onForward',
    value: function _onForward(msg) {
      var _this = this;

      console.log('DataObjectReporter-RCV: ', msg);
      switch (msg.body.type) {
        case 'subscribe':
          _this._onSubscribe(msg);break;
        case 'unsubscribe':
          _this._onUnSubscribe(msg);break;
      }
    }
  }, {
    key: '_onSubscribe',
    value: function _onSubscribe(msg) {
      var _this = this;
      var hypertyUrl = msg.body.from;

      var event = {
        type: msg.body.type,
        url: hypertyUrl,

        accept: function accept() {
          //create new subscription
          var sub = { url: hypertyUrl, status: 'on' };
          _this._subscriptions[hypertyUrl] = sub;

          //process and send childrens data
          var childrenValues = {};
          Object.keys(_this._childrenObjects).forEach(function (childId) {
            var childData = _this._childrenObjects[childId].data;
            childrenValues[childId] = (0, _utils.deepClone)(childData);
          });

          //send ok response message
          _this._bus.postMessage({
            id: msg.id, type: 'response', from: msg.to, to: msg.from,
            body: { code: 200, schema: _this._schema, version: _this._version, value: { data: (0, _utils.deepClone)(_this.data), childrens: childrenValues } }
          });

          return sub;
        },

        reject: function reject(reason) {
          //send reject response message
          _this._bus.postMessage({
            id: msg.id, type: 'response', from: msg.to, to: msg.from,
            body: { code: 403, desc: reason }
          });
        }
      };

      if (_this._onSubscriptionHandler) {
        console.log('SUBSCRIPTION-EVENT: ', event);
        _this._onSubscriptionHandler(event);
      }
    }
  }, {
    key: '_onUnSubscribe',
    value: function _onUnSubscribe(msg) {
      var _this = this;
      var hypertyUrl = msg.body.from;

      var sub = _this._subscriptions[hypertyUrl];
      delete _this._subscriptions[hypertyUrl];

      var event = {
        type: msg.body.type,
        url: hypertyUrl,
        object: sub
      };

      if (_this._onSubscriptionHandler) {
        console.log('UN-SUBSCRIPTION-EVENT: ', event);
        _this._onSubscriptionHandler(event);
      }
    }
  }, {
    key: '_onResponse',
    value: function _onResponse(msg) {
      var _this = this;

      var event = {
        type: msg.type,
        url: msg.from,
        code: msg.body.code
      };

      if (_this._onResponseHandler) {
        console.log('RESPONSE-EVENT: ', event);
        _this._onResponseHandler(event);
      }
    }
  }, {
    key: 'subscriptions',
    get: function get() {
      return this._subscriptions;
    }
  }]);

  return DataObjectReporter;
}(_DataObject3.default /* implements SyncStatus */);

exports.default = DataObjectReporter;

},{"../utils/utils.js":8,"./DataObject":1}],5:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/

/**
 * @access private
 */

var DataProvisional = function () {
  /* private
  _childrenListeners: [MsgListener]
  _listener: MsgListener
   _changes: []
  */

  function DataProvisional(owner, url, bus, children) {
    _classCallCheck(this, DataProvisional);

    var _this = this;

    _this._owner = owner;
    _this._url = url;
    _this._bus = bus;
    _this._children = children;

    _this._changes = [];
    _this._allocateListeners();
  }

  _createClass(DataProvisional, [{
    key: '_allocateListeners',
    value: function _allocateListeners() {
      var _this = this;

      _this._listener = _this._bus.addListener(_this._url, function (msg) {
        console.log('DataProvisional-' + _this._url + '-RCV: ', msg);
        _this._changes.push(msg);
      });

      /*
      _this._childrenListeners = [];
      if (_this._children) {
        let childBaseURL = url + '/children/';
        _this._children.forEach((child) => {
          let childURL = childBaseURL + child;
          let listener = _this._bus.addListener(childURL, (msg) => {
            //ignore msg sent by himself
            if (msg.from !== owner) {
              console.log(msg);
            }
          });
           _this._childrenListeners.push(listener);
        });
      }*/
    }
  }, {
    key: '_releaseListeners',
    value: function _releaseListeners() {
      var _this = this;

      _this._listener.remove();

      /*_this._childrenListeners.forEach((listener) => {
        listener.remove();
      });*/
    }
  }, {
    key: 'apply',
    value: function apply(observer) {
      var _this = this;
      _this._changes.forEach(function (change) {
        observer._changeObject(observer._syncObj, change);
      });
    }
  }, {
    key: 'children',
    get: function get() {
      return this._children;
    }
  }]);

  return DataProvisional;
}();

exports.default = DataProvisional;

},{}],6:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ObjectType = exports.ChangeType = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Copyright 2016 PT Inovação e Sistemas SA
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Copyright 2016 INESC-ID
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Copyright 2016 QUOBIS NETWORKS SL
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Copyright 2016 ORANGE SA
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Copyright 2016 Deutsche Telekom AG
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Copyright 2016 Apizee
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Licensed under the Apache License, Version 2.0 (the "License");
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * you may not use this file except in compliance with the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * You may obtain a copy of the License at
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *   http://www.apache.org/licenses/LICENSE-2.0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Unless required by applicable law or agreed to in writing, software
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * distributed under the License is distributed on an "AS IS" BASIS,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * See the License for the specific language governing permissions and
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * limitations under the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     **/

var _utils = require('../utils/utils.js');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * @access private
 */

var SyncObject = function () {
  /* private
    _data: any;
    _observers: ((event: ChangeEvent) => void)[]
  */

  function SyncObject(initialData) {
    _classCallCheck(this, SyncObject);

    var _this = this;

    _this._observers = [];
    _this._filters = {};

    if (initialData) {
      _this._data = (0, _utils.deepClone)(initialData);
    } else {
      _this._data = {};
    }

    _this._internalObserve(new Path(), _this._data);
  }

  _createClass(SyncObject, [{
    key: 'observe',
    value: function observe(callback) {
      this._observers.push(callback);
    }
  }, {
    key: 'find',
    value: function find(path) {
      var list = path.split('.');

      return this._findWithSplit(list);
    }
  }, {
    key: 'findBefore',
    value: function findBefore(path) {
      var result = {};
      var list = path.split('.');
      result.last = list.pop();
      result.obj = this._findWithSplit(list);

      return result;
    }
  }, {
    key: '_findWithSplit',
    value: function _findWithSplit(list) {
      var obj = this._data;
      list.forEach(function (value) {
        obj = obj[value];
      });

      return obj;
    }
  }, {
    key: '_fireEvent',
    value: function _fireEvent(event) {
      this._observers.forEach(function (callback) {
        callback(event);
      });
    }
  }, {
    key: '_isObservable',
    value: function _isObservable(obj) {
      if (obj.constructor === Object || obj.constructor === Array) {
        return true;
      }

      return false;
    }
  }, {
    key: '_internalObserve',
    value: function _internalObserve(path, obj) {
      var _this = this;

      if (_this._isObservable(obj)) {
        var handler = function handler(changes) {
          _this._onChanges(path, changes);
        };

        if (obj.constructor === Object) {
          Object.observe(obj, handler);
          for (var prop in obj) {
            if (_this._isObservable(obj[prop])) {
              _this._internalObserve(path.new(prop), obj[prop]);
            }
          }
        } else if (obj.constructor === Array) {
          Array.observe(obj, handler);
          for (var _prop in obj) {
            if (_this._isObservable(obj[_prop])) {
              var np = path.new(new ArrayIndex(obj[_prop], _prop));
              _this._internalObserve(np, obj[_prop]);
            }
          }
        }
      }
    }
  }, {
    key: '_onChanges',
    value: function _onChanges(path, changes) {
      var _this2 = this;

      for (var i in changes) {
        var obj = changes[i].object;
        var objType = void 0;

        if (obj.constructor === Object) {
          objType = ObjectType.OBJECT;
        }

        if (obj.constructor === Array) {
          objType = ObjectType.ARRAY;
        }

        if (changes[i].type === 'splice') {
          (function () {
            var idx = changes[i].index;
            var field = path.new('' + idx);
            var fieldString = field.toString();

            var removeSize = changes[i].removed.length;
            if (removeSize !== 0) {
              var removeValues = changes[i].removed;
              removeValues.forEach(function (value, index) {
                if (_this2._isObservable(value)) {
                  path.removeIndex(idx + index);
                }
              });

              _this2._fireEvent({
                cType: ChangeType.REMOVE,
                oType: objType,
                field: fieldString,
                data: removeSize
              });
            }

            var addSize = changes[i].addedCount;
            if (addSize !== 0) {
              var addValues = obj.slice(idx, idx + addSize);
              addValues.forEach(function (value, index) {
                if (_this2._isObservable(value)) {
                  var np = path.new(new ArrayIndex(value, idx + index));
                  _this2._internalObserve(np, value);
                }
              });

              _this2._fireEvent({
                cType: ChangeType.ADD,
                oType: objType,
                field: fieldString,
                data: (0, _utils.deepClone)(addValues)
              });
            }

            //re-define paths...
            if (idx !== obj.length - 1) {
              path.reIndexFrom(obj);
            }
          })();
        } else {
          var _field = path.new(changes[i].name);
          var _fieldString = _field.toString();

          if (_fieldString.indexOf('Symbol') !== -1) {
            //hack for PhantomJS2
            //console.log('SYMBOL: ', changes[i]);
            continue;
          }

          //let oldValue = changes[i].oldValue;
          var newValue = obj[changes[i].name];
          if (changes[i].type === 'update') {
            this._fireEvent({
              cType: ChangeType.UPDATE,
              oType: objType,
              field: _fieldString,
              data: (0, _utils.deepClone)(newValue)
            });
          }

          if (changes[i].type === 'add') {
            this._internalObserve(_field, newValue);
            this._fireEvent({
              cType: ChangeType.ADD,
              oType: objType,
              field: _fieldString,
              data: (0, _utils.deepClone)(newValue)
            });
          }

          if (changes[i].type === 'delete') {
            this._fireEvent({
              cType: ChangeType.REMOVE,
              oType: objType,
              field: _fieldString
            });
          }
        }
      }
    }
  }, {
    key: 'data',
    get: function get() {
      return this._data;
    }
  }]);

  return SyncObject;
}();

//dynamic path for Array index...


var Path = function () {
  function Path() {
    _classCallCheck(this, Path);

    this._path = [];
    this._observables = {}; //<index:ArrayIndex>
  }

  _createClass(Path, [{
    key: 'removeIndex',
    value: function removeIndex(idx) {
      //console.log('REMOVE-PATH ' + idx);
      delete this._observables[idx];
    }
  }, {
    key: 'reIndexFrom',
    value: function reIndexFrom(array) {
      var _this3 = this;

      Object.keys(this._observables).forEach(function (key) {
        var arrayIndex = _this3._observables[key];
        var idx = array.indexOf(arrayIndex.obj);
        if (arrayIndex.idx != idx) {
          //console.log('RE-INDEX: ' + key + '->' + idx);
          arrayIndex.idx = idx;
          delete _this3._observables[key];
          _this3._observables[idx] = arrayIndex;
        }
      });
    }
  }, {
    key: 'new',
    value: function _new(idx) {
      if (idx.constructor == ArrayIndex) {
        //console.log('PATH-OBSERV: ', idx);
        this._observables[idx.idx] = idx;
      }

      var nPath = this.clone();
      nPath._path.push(idx);

      return nPath;
    }
  }, {
    key: 'clone',
    value: function clone() {
      var nPath = new Path();
      this._path.forEach(function (value) {
        nPath._path.push(value);
      });

      return nPath;
    }
  }, {
    key: 'toString',
    value: function toString() {
      //TODO: optimize!!
      var str = '';
      this._path.forEach(function (value, index) {
        if (index === 0) {
          str = value.toString();
        } else {
          str += '.' + value.toString();
        }
      });

      return str;
    }
  }]);

  return Path;
}();

var ArrayIndex = function () {
  function ArrayIndex(obj, idx) {
    _classCallCheck(this, ArrayIndex);

    this.obj = obj;
    this.idx = idx;
  }

  _createClass(ArrayIndex, [{
    key: 'toString',
    value: function toString() {
      return this.idx.toString();
    }
  }]);

  return ArrayIndex;
}();

var ChangeType = exports.ChangeType = { UPDATE: 'update', ADD: 'add', REMOVE: 'remove' };
var ObjectType = exports.ObjectType = { OBJECT: 'object', ARRAY: 'array' };
exports.default = SyncObject;

},{"../utils/utils.js":8}],7:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Copyright 2016 PT Inovação e Sistemas SA
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Copyright 2016 INESC-ID
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Copyright 2016 QUOBIS NETWORKS SL
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Copyright 2016 ORANGE SA
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Copyright 2016 Deutsche Telekom AG
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Copyright 2016 Apizee
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Licensed under the Apache License, Version 2.0 (the "License");
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * you may not use this file except in compliance with the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * You may obtain a copy of the License at
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *   http://www.apache.org/licenses/LICENSE-2.0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Unless required by applicable law or agreed to in writing, software
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * distributed under the License is distributed on an "AS IS" BASIS,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * See the License for the specific language governing permissions and
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * limitations under the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     **/

var _DataObjectReporter = require('./DataObjectReporter');

var _DataObjectReporter2 = _interopRequireDefault(_DataObjectReporter);

var _DataObjectObserver = require('./DataObjectObserver');

var _DataObjectObserver2 = _interopRequireDefault(_DataObjectObserver);

var _DataProvisional = require('./DataProvisional');

var _DataProvisional2 = _interopRequireDefault(_DataProvisional);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * The main class for the syncher package.
 * The Syncher is a singleton class per Hyperty/URL and it is the owner of all created Data Sync Objects according to the Reporter - Observer pattern.
 * Main functionality is to create reporters and to subscribe to existing ones.
 */

var Syncher = function () {
  /* private
  _owner: URL
  _bus: MiniBus
   _subURL: URL
   _reporters: <url: DataObjectReporter>
  _observers: <url: DataObjectObserver>
  _provisionals: <url: DataProvisional>
   ----event handlers----
  _onNotificationHandler: (event) => void
  */

  /**
   * Constructor that should be used by the Hyperty owner
   * @param {HypertyURL} owner - Hyperty URL owner. An URL allocated by the runtime that uniquely identifies the Hyperty.
   * @param {MiniBus} bus - An instance of the MiniBus provided in the sandbox. When an object (Reporter or Observed) is created, the SyncherManager will add a listener in the MiniBus to receive/send Messages of that object.
   * @param {JSON} config - Configuration data. The only required field for now is the runtimeURL.
   */

  function Syncher(owner, bus, config) {
    _classCallCheck(this, Syncher);

    var _this = this;

    _this._owner = owner;
    _this._bus = bus;

    _this._subURL = config.runtimeURL + '/sm';

    _this._reporters = {};
    _this._observers = {};
    _this._provisionals = {};

    bus.addListener(owner, function (msg) {
      //ignore msg sent by himself
      if (msg.from !== owner) {
        console.log('Syncher-RCV: ', msg);
        switch (msg.type) {
          case 'forward':
            _this._onForward(msg);break;
          case 'create':
            _this._onRemoteCreate(msg);break;
          case 'delete':
            _this._onRemoteDelete(msg);break;
        }
      }
    });
  }

  /**
   * The owner of the Syncher and all created reporters.
   * @type {HypertyURL}
   */


  _createClass(Syncher, [{
    key: 'create',


    /**
     * Request a DataObjectReporter creation. The URL will be be requested by the allocation mechanism.
     * @param  {SchemaURL} schema - URL of the object descriptor
     * @param  {HypertyURL[]} observers - List of hyperties that are pre-authorized for subscription
     * @param  {JSON} initialData - Initial data of the reporter
     * @return {Promise<DataObjectReporter>} Return Promise to a new Reporter. The reporter can be accepted or rejected by the PEP
     */
    value: function create(schema, observers, initialData) {
      var _this = this;

      initialData.reporter = _this._owner;
      initialData.schema = schema;

      var requestMsg = {
        type: 'create', from: _this._owner, to: _this._subURL,
        body: { schema: schema, value: initialData, authorise: observers }
      };

      return new Promise(function (resolve, reject) {
        //request create to the Allocation system? Can be rejected by the PolicyEngine.
        _this._bus.postMessage(requestMsg, function (reply) {
          console.log('create-response: ', reply);
          if (reply.body.code === 200) {
            var objURL = reply.body.resource;

            //reporter creation accepted
            var newObj = new _DataObjectReporter2.default(_this, objURL, schema, 'on', initialData, reply.body.childrenResources);
            _this._reporters[objURL] = newObj;

            resolve(newObj);
          } else {
            //reporter creation rejected
            reject(reply.body.desc);
          }
        });
      });
    }

    /**
     * Request a subscription to an existent object.
     * @param {SchemaURL} schema - URL of the object descriptor
     * @param {ObjectURL} objURL - Address of the existent reporter object
     * @return {Promise<DataObjectObserver>} Return Promise to a new observer.
     */

  }, {
    key: 'subscribe',
    value: function subscribe(schema, objURL) {
      var _this = this;

      //TODO: validate if subscription already exists ?
      var subscribeMsg = {
        type: 'subscribe', from: _this._owner, to: _this._subURL,
        body: { schema: schema, resource: objURL }
      };

      return new Promise(function (resolve, reject) {
        //request subscription
        _this._bus.postMessage(subscribeMsg, function (reply) {
          console.log('subscribe-response: ', reply);
          var newProvisional = _this._provisionals[objURL];
          delete _this._provisionals[objURL];
          if (newProvisional) newProvisional._releaseListeners();

          if (reply.body.code < 200) {
            newProvisional = new _DataProvisional2.default(_this._owner, objURL, _this._bus, reply.body.childrenResources);
            _this._provisionals[objURL] = newProvisional;
          } else if (reply.body.code === 200) {
            var newObj = new _DataObjectObserver2.default(_this, objURL, schema, 'on', reply.body.value, newProvisional.children, reply.body.version);
            _this._observers[objURL] = newObj;

            resolve(newObj);
            newProvisional.apply(newObj);
          } else {
            reject(reply.body.desc);
          }
        });
      });
    }

    /**
     * Setup the callback to process create and delete events of remove Reporter objects.
     * This is releated to the messagens sent by create to the observers Hyperty array.
     * @param {function(event: MsgEvent)} callback
     */

  }, {
    key: 'onNotification',
    value: function onNotification(callback) {
      this._onNotificationHandler = callback;
    }
  }, {
    key: '_onForward',
    value: function _onForward(msg) {
      var _this = this;

      var reporter = _this._reporters[msg.body.to];
      reporter._onForward(msg);
    }
  }, {
    key: '_onRemoteCreate',
    value: function _onRemoteCreate(msg) {
      var _this = this;

      //remove "/subscription" from the URL
      var resource = msg.from.slice(0, -13);

      var event = {
        type: msg.type,
        from: msg.body.source,
        url: resource,
        schema: msg.body.schema,
        value: msg.body.value,
        identity: msg.body.identity,

        ack: function ack(type) {
          var lType = 200;
          if (type) {
            lType = type;
          }

          //send ack response message
          _this._bus.postMessage({
            id: msg.id, type: 'response', from: msg.to, to: msg.from,
            body: { code: lType }
          });
        }
      };

      if (_this._onNotificationHandler) {
        console.log('NOTIFICATION-EVENT: ', event);
        _this._onNotificationHandler(event);
      }
    }
  }, {
    key: '_onRemoteDelete',
    value: function _onRemoteDelete(msg) {
      var _this = this;

      //remove "/subscription" from the URL
      var resource = msg.body.resource;

      var object = _this._observers[resource];
      if (object) {
        var event = {
          type: msg.type,
          url: resource,
          identity: msg.body.identity,

          ack: function ack(type) {
            var lType = 200;
            if (type) {
              lType = type;
            }

            //TODO: any other different options for the release process, like accept but nor release local?
            if (lType === 200) {
              object.delete();
            }

            //send ack response message
            _this._bus.postMessage({
              id: msg.id, type: 'response', from: msg.to, to: msg.from,
              body: { code: lType, source: _this._owner }
            });
          }
        };

        if (_this._onNotificationHandler) {
          console.log('NOTIFICATION-EVENT: ', event);
          _this._onNotificationHandler(event);
        }
      } else {
        _this._bus.postMessage({
          id: msg.id, type: 'response', from: msg.to, to: msg.from,
          body: { code: 404, source: _this._owner }
        });
      }
    }
  }, {
    key: 'owner',
    get: function get() {
      return this._owner;
    }

    /**
     * All owned reporters, the ones that were created by a create
     * @type {Object<URL, DataObjectReporter>}
     */

  }, {
    key: 'reporters',
    get: function get() {
      return this._reporters;
    }

    /**
     * All owned observers, the ones that were created by a local subscription
     * @type {Object<URL, DataObjectObserver>}
     */

  }, {
    key: 'observers',
    get: function get() {
      return this._observers;
    }
  }]);

  return Syncher;
}();

exports.default = Syncher;

},{"./DataObjectObserver":3,"./DataObjectReporter":4,"./DataProvisional":5}],8:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.divideURL = divideURL;
exports.deepClone = deepClone;
/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/

/**
 * Support module with some functions will be useful
 * @module utils
 */

/**
 * @typedef divideURL
 * @type Object
 * @property {string} type The type of URL
 * @property {string} domain The domain of URL
 * @property {string} identity The identity of URL
 */

/**
 * Divide an url in type, domain and identity
 * @param  {URL.URL} url - url address
 * @return {divideURL} the result of divideURL
 */
function divideURL(url) {

  // let re = /([a-zA-Z-]*)?:\/\/(?:\.)?([-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b)*(\/[\/\d\w\.-]*)*(?:[\?])*(.+)*/gi;
  var re = /([a-zA-Z-]*):\/\/(?:\.)?([-a-zA-Z0-9@:%._\+~#=]{2,256})([-a-zA-Z0-9@:%._\+~#=\/]*)/gi;
  var subst = '$1,$2,$3';
  var parts = url.replace(re, subst).split(',');

  // If the url has no protocol, the default protocol set is https
  if (parts[0] === url) {
    parts[0] = 'https';
    parts[1] = url;
  }

  var result = {
    type: parts[0],
    domain: parts[1],
    identity: parts[2]
  };

  return result;
}

/**
 * Make a COPY of the original data
 * @param  {Object}  obj - object to be cloned
 * @return {Object}
 */
function deepClone(obj) {
  //TODO: simple but inefficient JSON deep clone...
  if (obj) return JSON.parse(JSON.stringify(obj));
}

},{}],9:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

/*!
 * URI.js - Mutating URLs
 * IPv6 Support
 *
 * Version: 1.18.0
 *
 * Author: Rodney Rehm
 * Web: http://medialize.github.io/URI.js/
 *
 * Licensed under
 *   MIT License http://www.opensource.org/licenses/mit-license
 *
 */

(function (root, factory) {
  'use strict';
  // https://github.com/umdjs/umd/blob/master/returnExports.js

  if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object') {
    // Node
    module.exports = factory();
  } else if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(factory);
  } else {
    // Browser globals (root is window)
    root.IPv6 = factory(root);
  }
})(undefined, function (root) {
  'use strict';

  /*
  var _in = "fe80:0000:0000:0000:0204:61ff:fe9d:f156";
  var _out = IPv6.best(_in);
  var _expected = "fe80::204:61ff:fe9d:f156";
   console.log(_in, _out, _expected, _out === _expected);
  */

  // save current IPv6 variable, if any

  var _IPv6 = root && root.IPv6;

  function bestPresentation(address) {
    // based on:
    // Javascript to test an IPv6 address for proper format, and to
    // present the "best text representation" according to IETF Draft RFC at
    // http://tools.ietf.org/html/draft-ietf-6man-text-addr-representation-04
    // 8 Feb 2010 Rich Brown, Dartware, LLC
    // Please feel free to use this code as long as you provide a link to
    // http://www.intermapper.com
    // http://intermapper.com/support/tools/IPV6-Validator.aspx
    // http://download.dartware.com/thirdparty/ipv6validator.js

    var _address = address.toLowerCase();
    var segments = _address.split(':');
    var length = segments.length;
    var total = 8;

    // trim colons (:: or ::a:b:c… or …a:b:c::)
    if (segments[0] === '' && segments[1] === '' && segments[2] === '') {
      // must have been ::
      // remove first two items
      segments.shift();
      segments.shift();
    } else if (segments[0] === '' && segments[1] === '') {
      // must have been ::xxxx
      // remove the first item
      segments.shift();
    } else if (segments[length - 1] === '' && segments[length - 2] === '') {
      // must have been xxxx::
      segments.pop();
    }

    length = segments.length;

    // adjust total segments for IPv4 trailer
    if (segments[length - 1].indexOf('.') !== -1) {
      // found a "." which means IPv4
      total = 7;
    }

    // fill empty segments them with "0000"
    var pos;
    for (pos = 0; pos < length; pos++) {
      if (segments[pos] === '') {
        break;
      }
    }

    if (pos < total) {
      segments.splice(pos, 1, '0000');
      while (segments.length < total) {
        segments.splice(pos, 0, '0000');
      }
    }

    // strip leading zeros
    var _segments;
    for (var i = 0; i < total; i++) {
      _segments = segments[i].split('');
      for (var j = 0; j < 3; j++) {
        if (_segments[0] === '0' && _segments.length > 1) {
          _segments.splice(0, 1);
        } else {
          break;
        }
      }

      segments[i] = _segments.join('');
    }

    // find longest sequence of zeroes and coalesce them into one segment
    var best = -1;
    var _best = 0;
    var _current = 0;
    var current = -1;
    var inzeroes = false;
    // i; already declared

    for (i = 0; i < total; i++) {
      if (inzeroes) {
        if (segments[i] === '0') {
          _current += 1;
        } else {
          inzeroes = false;
          if (_current > _best) {
            best = current;
            _best = _current;
          }
        }
      } else {
        if (segments[i] === '0') {
          inzeroes = true;
          current = i;
          _current = 1;
        }
      }
    }

    if (_current > _best) {
      best = current;
      _best = _current;
    }

    if (_best > 1) {
      segments.splice(best, _best, '');
    }

    length = segments.length;

    // assemble remaining segments
    var result = '';
    if (segments[0] === '') {
      result = ':';
    }

    for (i = 0; i < length; i++) {
      result += segments[i];
      if (i === length - 1) {
        break;
      }

      result += ':';
    }

    if (segments[length - 1] === '') {
      result += ':';
    }

    return result;
  }

  function noConflict() {
    /*jshint validthis: true */
    if (root.IPv6 === this) {
      root.IPv6 = _IPv6;
    }

    return this;
  }

  return {
    best: bestPresentation,
    noConflict: noConflict
  };
});

},{}],10:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

/*!
 * URI.js - Mutating URLs
 * Second Level Domain (SLD) Support
 *
 * Version: 1.18.0
 *
 * Author: Rodney Rehm
 * Web: http://medialize.github.io/URI.js/
 *
 * Licensed under
 *   MIT License http://www.opensource.org/licenses/mit-license
 *
 */

(function (root, factory) {
  'use strict';
  // https://github.com/umdjs/umd/blob/master/returnExports.js

  if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object') {
    // Node
    module.exports = factory();
  } else if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(factory);
  } else {
    // Browser globals (root is window)
    root.SecondLevelDomains = factory(root);
  }
})(undefined, function (root) {
  'use strict';

  // save current SecondLevelDomains variable, if any

  var _SecondLevelDomains = root && root.SecondLevelDomains;

  var SLD = {
    // list of known Second Level Domains
    // converted list of SLDs from https://github.com/gavingmiller/second-level-domains
    // ----
    // publicsuffix.org is more current and actually used by a couple of browsers internally.
    // downside is it also contains domains like "dyndns.org" - which is fine for the security
    // issues browser have to deal with (SOP for cookies, etc) - but is way overboard for URI.js
    // ----
    list: {
      'ac': ' com gov mil net org ',
      'ae': ' ac co gov mil name net org pro sch ',
      'af': ' com edu gov net org ',
      'al': ' com edu gov mil net org ',
      'ao': ' co ed gv it og pb ',
      'ar': ' com edu gob gov int mil net org tur ',
      'at': ' ac co gv or ',
      'au': ' asn com csiro edu gov id net org ',
      'ba': ' co com edu gov mil net org rs unbi unmo unsa untz unze ',
      'bb': ' biz co com edu gov info net org store tv ',
      'bh': ' biz cc com edu gov info net org ',
      'bn': ' com edu gov net org ',
      'bo': ' com edu gob gov int mil net org tv ',
      'br': ' adm adv agr am arq art ato b bio blog bmd cim cng cnt com coop ecn edu eng esp etc eti far flog fm fnd fot fst g12 ggf gov imb ind inf jor jus lel mat med mil mus net nom not ntr odo org ppg pro psc psi qsl rec slg srv tmp trd tur tv vet vlog wiki zlg ',
      'bs': ' com edu gov net org ',
      'bz': ' du et om ov rg ',
      'ca': ' ab bc mb nb nf nl ns nt nu on pe qc sk yk ',
      'ck': ' biz co edu gen gov info net org ',
      'cn': ' ac ah bj com cq edu fj gd gov gs gx gz ha hb he hi hl hn jl js jx ln mil net nm nx org qh sc sd sh sn sx tj tw xj xz yn zj ',
      'co': ' com edu gov mil net nom org ',
      'cr': ' ac c co ed fi go or sa ',
      'cy': ' ac biz com ekloges gov ltd name net org parliament press pro tm ',
      'do': ' art com edu gob gov mil net org sld web ',
      'dz': ' art asso com edu gov net org pol ',
      'ec': ' com edu fin gov info med mil net org pro ',
      'eg': ' com edu eun gov mil name net org sci ',
      'er': ' com edu gov ind mil net org rochest w ',
      'es': ' com edu gob nom org ',
      'et': ' biz com edu gov info name net org ',
      'fj': ' ac biz com info mil name net org pro ',
      'fk': ' ac co gov net nom org ',
      'fr': ' asso com f gouv nom prd presse tm ',
      'gg': ' co net org ',
      'gh': ' com edu gov mil org ',
      'gn': ' ac com gov net org ',
      'gr': ' com edu gov mil net org ',
      'gt': ' com edu gob ind mil net org ',
      'gu': ' com edu gov net org ',
      'hk': ' com edu gov idv net org ',
      'hu': ' 2000 agrar bolt casino city co erotica erotika film forum games hotel info ingatlan jogasz konyvelo lakas media news org priv reklam sex shop sport suli szex tm tozsde utazas video ',
      'id': ' ac co go mil net or sch web ',
      'il': ' ac co gov idf k12 muni net org ',
      'in': ' ac co edu ernet firm gen gov i ind mil net nic org res ',
      'iq': ' com edu gov i mil net org ',
      'ir': ' ac co dnssec gov i id net org sch ',
      'it': ' edu gov ',
      'je': ' co net org ',
      'jo': ' com edu gov mil name net org sch ',
      'jp': ' ac ad co ed go gr lg ne or ',
      'ke': ' ac co go info me mobi ne or sc ',
      'kh': ' com edu gov mil net org per ',
      'ki': ' biz com de edu gov info mob net org tel ',
      'km': ' asso com coop edu gouv k medecin mil nom notaires pharmaciens presse tm veterinaire ',
      'kn': ' edu gov net org ',
      'kr': ' ac busan chungbuk chungnam co daegu daejeon es gangwon go gwangju gyeongbuk gyeonggi gyeongnam hs incheon jeju jeonbuk jeonnam k kg mil ms ne or pe re sc seoul ulsan ',
      'kw': ' com edu gov net org ',
      'ky': ' com edu gov net org ',
      'kz': ' com edu gov mil net org ',
      'lb': ' com edu gov net org ',
      'lk': ' assn com edu gov grp hotel int ltd net ngo org sch soc web ',
      'lr': ' com edu gov net org ',
      'lv': ' asn com conf edu gov id mil net org ',
      'ly': ' com edu gov id med net org plc sch ',
      'ma': ' ac co gov m net org press ',
      'mc': ' asso tm ',
      'me': ' ac co edu gov its net org priv ',
      'mg': ' com edu gov mil nom org prd tm ',
      'mk': ' com edu gov inf name net org pro ',
      'ml': ' com edu gov net org presse ',
      'mn': ' edu gov org ',
      'mo': ' com edu gov net org ',
      'mt': ' com edu gov net org ',
      'mv': ' aero biz com coop edu gov info int mil museum name net org pro ',
      'mw': ' ac co com coop edu gov int museum net org ',
      'mx': ' com edu gob net org ',
      'my': ' com edu gov mil name net org sch ',
      'nf': ' arts com firm info net other per rec store web ',
      'ng': ' biz com edu gov mil mobi name net org sch ',
      'ni': ' ac co com edu gob mil net nom org ',
      'np': ' com edu gov mil net org ',
      'nr': ' biz com edu gov info net org ',
      'om': ' ac biz co com edu gov med mil museum net org pro sch ',
      'pe': ' com edu gob mil net nom org sld ',
      'ph': ' com edu gov i mil net ngo org ',
      'pk': ' biz com edu fam gob gok gon gop gos gov net org web ',
      'pl': ' art bialystok biz com edu gda gdansk gorzow gov info katowice krakow lodz lublin mil net ngo olsztyn org poznan pwr radom slupsk szczecin torun warszawa waw wroc wroclaw zgora ',
      'pr': ' ac biz com edu est gov info isla name net org pro prof ',
      'ps': ' com edu gov net org plo sec ',
      'pw': ' belau co ed go ne or ',
      'ro': ' arts com firm info nom nt org rec store tm www ',
      'rs': ' ac co edu gov in org ',
      'sb': ' com edu gov net org ',
      'sc': ' com edu gov net org ',
      'sh': ' co com edu gov net nom org ',
      'sl': ' com edu gov net org ',
      'st': ' co com consulado edu embaixada gov mil net org principe saotome store ',
      'sv': ' com edu gob org red ',
      'sz': ' ac co org ',
      'tr': ' av bbs bel biz com dr edu gen gov info k12 name net org pol tel tsk tv web ',
      'tt': ' aero biz cat co com coop edu gov info int jobs mil mobi museum name net org pro tel travel ',
      'tw': ' club com ebiz edu game gov idv mil net org ',
      'mu': ' ac co com gov net or org ',
      'mz': ' ac co edu gov org ',
      'na': ' co com ',
      'nz': ' ac co cri geek gen govt health iwi maori mil net org parliament school ',
      'pa': ' abo ac com edu gob ing med net nom org sld ',
      'pt': ' com edu gov int net nome org publ ',
      'py': ' com edu gov mil net org ',
      'qa': ' com edu gov mil net org ',
      're': ' asso com nom ',
      'ru': ' ac adygeya altai amur arkhangelsk astrakhan bashkiria belgorod bir bryansk buryatia cbg chel chelyabinsk chita chukotka chuvashia com dagestan e-burg edu gov grozny int irkutsk ivanovo izhevsk jar joshkar-ola kalmykia kaluga kamchatka karelia kazan kchr kemerovo khabarovsk khakassia khv kirov koenig komi kostroma kranoyarsk kuban kurgan kursk lipetsk magadan mari mari-el marine mil mordovia mosreg msk murmansk nalchik net nnov nov novosibirsk nsk omsk orenburg org oryol penza perm pp pskov ptz rnd ryazan sakhalin samara saratov simbirsk smolensk spb stavropol stv surgut tambov tatarstan tom tomsk tsaritsyn tsk tula tuva tver tyumen udm udmurtia ulan-ude vladikavkaz vladimir vladivostok volgograd vologda voronezh vrn vyatka yakutia yamal yekaterinburg yuzhno-sakhalinsk ',
      'rw': ' ac co com edu gouv gov int mil net ',
      'sa': ' com edu gov med net org pub sch ',
      'sd': ' com edu gov info med net org tv ',
      'se': ' a ac b bd c d e f g h i k l m n o org p parti pp press r s t tm u w x y z ',
      'sg': ' com edu gov idn net org per ',
      'sn': ' art com edu gouv org perso univ ',
      'sy': ' com edu gov mil net news org ',
      'th': ' ac co go in mi net or ',
      'tj': ' ac biz co com edu go gov info int mil name net nic org test web ',
      'tn': ' agrinet com defense edunet ens fin gov ind info intl mincom nat net org perso rnrt rns rnu tourism ',
      'tz': ' ac co go ne or ',
      'ua': ' biz cherkassy chernigov chernovtsy ck cn co com crimea cv dn dnepropetrovsk donetsk dp edu gov if in ivano-frankivsk kh kharkov kherson khmelnitskiy kiev kirovograd km kr ks kv lg lugansk lutsk lviv me mk net nikolaev od odessa org pl poltava pp rovno rv sebastopol sumy te ternopil uzhgorod vinnica vn zaporizhzhe zhitomir zp zt ',
      'ug': ' ac co go ne or org sc ',
      'uk': ' ac bl british-library co cym gov govt icnet jet lea ltd me mil mod national-library-scotland nel net nhs nic nls org orgn parliament plc police sch scot soc ',
      'us': ' dni fed isa kids nsn ',
      'uy': ' com edu gub mil net org ',
      've': ' co com edu gob info mil net org web ',
      'vi': ' co com k12 net org ',
      'vn': ' ac biz com edu gov health info int name net org pro ',
      'ye': ' co com gov ltd me net org plc ',
      'yu': ' ac co edu gov org ',
      'za': ' ac agric alt bourse city co cybernet db edu gov grondar iaccess imt inca landesign law mil net ngo nis nom olivetti org pix school tm web ',
      'zm': ' ac co com edu gov net org sch '
    },
    // gorhill 2013-10-25: Using indexOf() instead Regexp(). Significant boost
    // in both performance and memory footprint. No initialization required.
    // http://jsperf.com/uri-js-sld-regex-vs-binary-search/4
    // Following methods use lastIndexOf() rather than array.split() in order
    // to avoid any memory allocations.
    has: function has(domain) {
      var tldOffset = domain.lastIndexOf('.');
      if (tldOffset <= 0 || tldOffset >= domain.length - 1) {
        return false;
      }
      var sldOffset = domain.lastIndexOf('.', tldOffset - 1);
      if (sldOffset <= 0 || sldOffset >= tldOffset - 1) {
        return false;
      }
      var sldList = SLD.list[domain.slice(tldOffset + 1)];
      if (!sldList) {
        return false;
      }
      return sldList.indexOf(' ' + domain.slice(sldOffset + 1, tldOffset) + ' ') >= 0;
    },
    is: function is(domain) {
      var tldOffset = domain.lastIndexOf('.');
      if (tldOffset <= 0 || tldOffset >= domain.length - 1) {
        return false;
      }
      var sldOffset = domain.lastIndexOf('.', tldOffset - 1);
      if (sldOffset >= 0) {
        return false;
      }
      var sldList = SLD.list[domain.slice(tldOffset + 1)];
      if (!sldList) {
        return false;
      }
      return sldList.indexOf(' ' + domain.slice(0, tldOffset) + ' ') >= 0;
    },
    get: function get(domain) {
      var tldOffset = domain.lastIndexOf('.');
      if (tldOffset <= 0 || tldOffset >= domain.length - 1) {
        return null;
      }
      var sldOffset = domain.lastIndexOf('.', tldOffset - 1);
      if (sldOffset <= 0 || sldOffset >= tldOffset - 1) {
        return null;
      }
      var sldList = SLD.list[domain.slice(tldOffset + 1)];
      if (!sldList) {
        return null;
      }
      if (sldList.indexOf(' ' + domain.slice(sldOffset + 1, tldOffset) + ' ') < 0) {
        return null;
      }
      return domain.slice(sldOffset + 1);
    },
    noConflict: function noConflict() {
      if (root.SecondLevelDomains === this) {
        root.SecondLevelDomains = _SecondLevelDomains;
      }
      return this;
    }
  };

  return SLD;
});

},{}],11:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

/*!
 * URI.js - Mutating URLs
 *
 * Version: 1.18.0
 *
 * Author: Rodney Rehm
 * Web: http://medialize.github.io/URI.js/
 *
 * Licensed under
 *   MIT License http://www.opensource.org/licenses/mit-license
 *
 */
(function (root, factory) {
  'use strict';
  // https://github.com/umdjs/umd/blob/master/returnExports.js

  if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object') {
    // Node
    module.exports = factory(require('./punycode'), require('./IPv6'), require('./SecondLevelDomains'));
  } else if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['./punycode', './IPv6', './SecondLevelDomains'], factory);
  } else {
    // Browser globals (root is window)
    root.URI = factory(root.punycode, root.IPv6, root.SecondLevelDomains, root);
  }
})(undefined, function (punycode, IPv6, SLD, root) {
  'use strict';
  /*global location, escape, unescape */
  // FIXME: v2.0.0 renamce non-camelCase properties to uppercase
  /*jshint camelcase: false */

  // save current URI variable, if any

  var _URI = root && root.URI;

  function URI(url, base) {
    var _urlSupplied = arguments.length >= 1;
    var _baseSupplied = arguments.length >= 2;

    // Allow instantiation without the 'new' keyword
    if (!(this instanceof URI)) {
      if (_urlSupplied) {
        if (_baseSupplied) {
          return new URI(url, base);
        }

        return new URI(url);
      }

      return new URI();
    }

    if (url === undefined) {
      if (_urlSupplied) {
        throw new TypeError('undefined is not a valid argument for URI');
      }

      if (typeof location !== 'undefined') {
        url = location.href + '';
      } else {
        url = '';
      }
    }

    this.href(url);

    // resolve to base according to http://dvcs.w3.org/hg/url/raw-file/tip/Overview.html#constructor
    if (base !== undefined) {
      return this.absoluteTo(base);
    }

    return this;
  }

  URI.version = '1.18.0';

  var p = URI.prototype;
  var hasOwn = Object.prototype.hasOwnProperty;

  function escapeRegEx(string) {
    // https://github.com/medialize/URI.js/commit/85ac21783c11f8ccab06106dba9735a31a86924d#commitcomment-821963
    return string.replace(/([.*+?^=!:${}()|[\]\/\\])/g, '\\$1');
  }

  function getType(value) {
    // IE8 doesn't return [Object Undefined] but [Object Object] for undefined value
    if (value === undefined) {
      return 'Undefined';
    }

    return String(Object.prototype.toString.call(value)).slice(8, -1);
  }

  function isArray(obj) {
    return getType(obj) === 'Array';
  }

  function filterArrayValues(data, value) {
    var lookup = {};
    var i, length;

    if (getType(value) === 'RegExp') {
      lookup = null;
    } else if (isArray(value)) {
      for (i = 0, length = value.length; i < length; i++) {
        lookup[value[i]] = true;
      }
    } else {
      lookup[value] = true;
    }

    for (i = 0, length = data.length; i < length; i++) {
      /*jshint laxbreak: true */
      var _match = lookup && lookup[data[i]] !== undefined || !lookup && value.test(data[i]);
      /*jshint laxbreak: false */
      if (_match) {
        data.splice(i, 1);
        length--;
        i--;
      }
    }

    return data;
  }

  function arrayContains(list, value) {
    var i, length;

    // value may be string, number, array, regexp
    if (isArray(value)) {
      // Note: this can be optimized to O(n) (instead of current O(m * n))
      for (i = 0, length = value.length; i < length; i++) {
        if (!arrayContains(list, value[i])) {
          return false;
        }
      }

      return true;
    }

    var _type = getType(value);
    for (i = 0, length = list.length; i < length; i++) {
      if (_type === 'RegExp') {
        if (typeof list[i] === 'string' && list[i].match(value)) {
          return true;
        }
      } else if (list[i] === value) {
        return true;
      }
    }

    return false;
  }

  function arraysEqual(one, two) {
    if (!isArray(one) || !isArray(two)) {
      return false;
    }

    // arrays can't be equal if they have different amount of content
    if (one.length !== two.length) {
      return false;
    }

    one.sort();
    two.sort();

    for (var i = 0, l = one.length; i < l; i++) {
      if (one[i] !== two[i]) {
        return false;
      }
    }

    return true;
  }

  function trimSlashes(text) {
    var trim_expression = /^\/+|\/+$/g;
    return text.replace(trim_expression, '');
  }

  URI._parts = function () {
    return {
      protocol: null,
      username: null,
      password: null,
      hostname: null,
      urn: null,
      port: null,
      path: null,
      query: null,
      fragment: null,
      // state
      duplicateQueryParameters: URI.duplicateQueryParameters,
      escapeQuerySpace: URI.escapeQuerySpace
    };
  };
  // state: allow duplicate query parameters (a=1&a=1)
  URI.duplicateQueryParameters = false;
  // state: replaces + with %20 (space in query strings)
  URI.escapeQuerySpace = true;
  // static properties
  URI.protocol_expression = /^[a-z][a-z0-9.+-]*$/i;
  URI.idn_expression = /[^a-z0-9\.-]/i;
  URI.punycode_expression = /(xn--)/i;
  // well, 333.444.555.666 matches, but it sure ain't no IPv4 - do we care?
  URI.ip4_expression = /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/;
  // credits to Rich Brown
  // source: http://forums.intermapper.com/viewtopic.php?p=1096#1096
  // specification: http://www.ietf.org/rfc/rfc4291.txt
  URI.ip6_expression = /^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$/;
  // expression used is "gruber revised" (@gruber v2) determined to be the
  // best solution in a regex-golf we did a couple of ages ago at
  // * http://mathiasbynens.be/demo/url-regex
  // * http://rodneyrehm.de/t/url-regex.html
  URI.find_uri_expression = /\b((?:[a-z][\w-]+:(?:\/{1,3}|[a-z0-9%])|www\d{0,3}[.]|[a-z0-9.\-]+[.][a-z]{2,4}\/)(?:[^\s()<>]+|\(([^\s()<>]+|(\([^\s()<>]+\)))*\))+(?:\(([^\s()<>]+|(\([^\s()<>]+\)))*\)|[^\s`!()\[\]{};:'".,<>?«»“”‘’]))/ig;
  URI.findUri = {
    // valid "scheme://" or "www."
    start: /\b(?:([a-z][a-z0-9.+-]*:\/\/)|www\.)/gi,
    // everything up to the next whitespace
    end: /[\s\r\n]|$/,
    // trim trailing punctuation captured by end RegExp
    trim: /[`!()\[\]{};:'".,<>?«»“”„‘’]+$/
  };
  // http://www.iana.org/assignments/uri-schemes.html
  // http://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers#Well-known_ports
  URI.defaultPorts = {
    http: '80',
    https: '443',
    ftp: '21',
    gopher: '70',
    ws: '80',
    wss: '443'
  };
  // allowed hostname characters according to RFC 3986
  // ALPHA DIGIT "-" "." "_" "~" "!" "$" "&" "'" "(" ")" "*" "+" "," ";" "=" %encoded
  // I've never seen a (non-IDN) hostname other than: ALPHA DIGIT . -
  URI.invalid_hostname_characters = /[^a-zA-Z0-9\.-]/;
  // map DOM Elements to their URI attribute
  URI.domAttributes = {
    'a': 'href',
    'blockquote': 'cite',
    'link': 'href',
    'base': 'href',
    'script': 'src',
    'form': 'action',
    'img': 'src',
    'area': 'href',
    'iframe': 'src',
    'embed': 'src',
    'source': 'src',
    'track': 'src',
    'input': 'src', // but only if type="image"
    'audio': 'src',
    'video': 'src'
  };
  URI.getDomAttribute = function (node) {
    if (!node || !node.nodeName) {
      return undefined;
    }

    var nodeName = node.nodeName.toLowerCase();
    // <input> should only expose src for type="image"
    if (nodeName === 'input' && node.type !== 'image') {
      return undefined;
    }

    return URI.domAttributes[nodeName];
  };

  function escapeForDumbFirefox36(value) {
    // https://github.com/medialize/URI.js/issues/91
    return escape(value);
  }

  // encoding / decoding according to RFC3986
  function strictEncodeURIComponent(string) {
    // see https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/encodeURIComponent
    return encodeURIComponent(string).replace(/[!'()*]/g, escapeForDumbFirefox36).replace(/\*/g, '%2A');
  }
  URI.encode = strictEncodeURIComponent;
  URI.decode = decodeURIComponent;
  URI.iso8859 = function () {
    URI.encode = escape;
    URI.decode = unescape;
  };
  URI.unicode = function () {
    URI.encode = strictEncodeURIComponent;
    URI.decode = decodeURIComponent;
  };
  URI.characters = {
    pathname: {
      encode: {
        // RFC3986 2.1: For consistency, URI producers and normalizers should
        // use uppercase hexadecimal digits for all percent-encodings.
        expression: /%(24|26|2B|2C|3B|3D|3A|40)/ig,
        map: {
          // -._~!'()*
          '%24': '$',
          '%26': '&',
          '%2B': '+',
          '%2C': ',',
          '%3B': ';',
          '%3D': '=',
          '%3A': ':',
          '%40': '@'
        }
      },
      decode: {
        expression: /[\/\?#]/g,
        map: {
          '/': '%2F',
          '?': '%3F',
          '#': '%23'
        }
      }
    },
    reserved: {
      encode: {
        // RFC3986 2.1: For consistency, URI producers and normalizers should
        // use uppercase hexadecimal digits for all percent-encodings.
        expression: /%(21|23|24|26|27|28|29|2A|2B|2C|2F|3A|3B|3D|3F|40|5B|5D)/ig,
        map: {
          // gen-delims
          '%3A': ':',
          '%2F': '/',
          '%3F': '?',
          '%23': '#',
          '%5B': '[',
          '%5D': ']',
          '%40': '@',
          // sub-delims
          '%21': '!',
          '%24': '$',
          '%26': '&',
          '%27': '\'',
          '%28': '(',
          '%29': ')',
          '%2A': '*',
          '%2B': '+',
          '%2C': ',',
          '%3B': ';',
          '%3D': '='
        }
      }
    },
    urnpath: {
      // The characters under `encode` are the characters called out by RFC 2141 as being acceptable
      // for usage in a URN. RFC2141 also calls out "-", ".", and "_" as acceptable characters, but
      // these aren't encoded by encodeURIComponent, so we don't have to call them out here. Also
      // note that the colon character is not featured in the encoding map; this is because URI.js
      // gives the colons in URNs semantic meaning as the delimiters of path segements, and so it
      // should not appear unencoded in a segment itself.
      // See also the note above about RFC3986 and capitalalized hex digits.
      encode: {
        expression: /%(21|24|27|28|29|2A|2B|2C|3B|3D|40)/ig,
        map: {
          '%21': '!',
          '%24': '$',
          '%27': '\'',
          '%28': '(',
          '%29': ')',
          '%2A': '*',
          '%2B': '+',
          '%2C': ',',
          '%3B': ';',
          '%3D': '=',
          '%40': '@'
        }
      },
      // These characters are the characters called out by RFC2141 as "reserved" characters that
      // should never appear in a URN, plus the colon character (see note above).
      decode: {
        expression: /[\/\?#:]/g,
        map: {
          '/': '%2F',
          '?': '%3F',
          '#': '%23',
          ':': '%3A'
        }
      }
    }
  };
  URI.encodeQuery = function (string, escapeQuerySpace) {
    var escaped = URI.encode(string + '');
    if (escapeQuerySpace === undefined) {
      escapeQuerySpace = URI.escapeQuerySpace;
    }

    return escapeQuerySpace ? escaped.replace(/%20/g, '+') : escaped;
  };
  URI.decodeQuery = function (string, escapeQuerySpace) {
    string += '';
    if (escapeQuerySpace === undefined) {
      escapeQuerySpace = URI.escapeQuerySpace;
    }

    try {
      return URI.decode(escapeQuerySpace ? string.replace(/\+/g, '%20') : string);
    } catch (e) {
      // we're not going to mess with weird encodings,
      // give up and return the undecoded original string
      // see https://github.com/medialize/URI.js/issues/87
      // see https://github.com/medialize/URI.js/issues/92
      return string;
    }
  };
  // generate encode/decode path functions
  var _parts = { 'encode': 'encode', 'decode': 'decode' };
  var _part;
  var generateAccessor = function generateAccessor(_group, _part) {
    return function (string) {
      try {
        return URI[_part](string + '').replace(URI.characters[_group][_part].expression, function (c) {
          return URI.characters[_group][_part].map[c];
        });
      } catch (e) {
        // we're not going to mess with weird encodings,
        // give up and return the undecoded original string
        // see https://github.com/medialize/URI.js/issues/87
        // see https://github.com/medialize/URI.js/issues/92
        return string;
      }
    };
  };

  for (_part in _parts) {
    URI[_part + 'PathSegment'] = generateAccessor('pathname', _parts[_part]);
    URI[_part + 'UrnPathSegment'] = generateAccessor('urnpath', _parts[_part]);
  }

  var generateSegmentedPathFunction = function generateSegmentedPathFunction(_sep, _codingFuncName, _innerCodingFuncName) {
    return function (string) {
      // Why pass in names of functions, rather than the function objects themselves? The
      // definitions of some functions (but in particular, URI.decode) will occasionally change due
      // to URI.js having ISO8859 and Unicode modes. Passing in the name and getting it will ensure
      // that the functions we use here are "fresh".
      var actualCodingFunc;
      if (!_innerCodingFuncName) {
        actualCodingFunc = URI[_codingFuncName];
      } else {
        actualCodingFunc = function actualCodingFunc(string) {
          return URI[_codingFuncName](URI[_innerCodingFuncName](string));
        };
      }

      var segments = (string + '').split(_sep);

      for (var i = 0, length = segments.length; i < length; i++) {
        segments[i] = actualCodingFunc(segments[i]);
      }

      return segments.join(_sep);
    };
  };

  // This takes place outside the above loop because we don't want, e.g., encodeUrnPath functions.
  URI.decodePath = generateSegmentedPathFunction('/', 'decodePathSegment');
  URI.decodeUrnPath = generateSegmentedPathFunction(':', 'decodeUrnPathSegment');
  URI.recodePath = generateSegmentedPathFunction('/', 'encodePathSegment', 'decode');
  URI.recodeUrnPath = generateSegmentedPathFunction(':', 'encodeUrnPathSegment', 'decode');

  URI.encodeReserved = generateAccessor('reserved', 'encode');

  URI.parse = function (string, parts) {
    var pos;
    if (!parts) {
      parts = {};
    }
    // [protocol"://"[username[":"password]"@"]hostname[":"port]"/"?][path]["?"querystring]["#"fragment]

    // extract fragment
    pos = string.indexOf('#');
    if (pos > -1) {
      // escaping?
      parts.fragment = string.substring(pos + 1) || null;
      string = string.substring(0, pos);
    }

    // extract query
    pos = string.indexOf('?');
    if (pos > -1) {
      // escaping?
      parts.query = string.substring(pos + 1) || null;
      string = string.substring(0, pos);
    }

    // extract protocol
    if (string.substring(0, 2) === '//') {
      // relative-scheme
      parts.protocol = null;
      string = string.substring(2);
      // extract "user:pass@host:port"
      string = URI.parseAuthority(string, parts);
    } else {
      pos = string.indexOf(':');
      if (pos > -1) {
        parts.protocol = string.substring(0, pos) || null;
        if (parts.protocol && !parts.protocol.match(URI.protocol_expression)) {
          // : may be within the path
          parts.protocol = undefined;
        } else if (string.substring(pos + 1, pos + 3) === '//') {
          string = string.substring(pos + 3);

          // extract "user:pass@host:port"
          string = URI.parseAuthority(string, parts);
        } else {
          string = string.substring(pos + 1);
          parts.urn = true;
        }
      }
    }

    // what's left must be the path
    parts.path = string;

    // and we're done
    return parts;
  };
  URI.parseHost = function (string, parts) {
    // Copy chrome, IE, opera backslash-handling behavior.
    // Back slashes before the query string get converted to forward slashes
    // See: https://github.com/joyent/node/blob/386fd24f49b0e9d1a8a076592a404168faeecc34/lib/url.js#L115-L124
    // See: https://code.google.com/p/chromium/issues/detail?id=25916
    // https://github.com/medialize/URI.js/pull/233
    string = string.replace(/\\/g, '/');

    // extract host:port
    var pos = string.indexOf('/');
    var bracketPos;
    var t;

    if (pos === -1) {
      pos = string.length;
    }

    if (string.charAt(0) === '[') {
      // IPv6 host - http://tools.ietf.org/html/draft-ietf-6man-text-addr-representation-04#section-6
      // I claim most client software breaks on IPv6 anyways. To simplify things, URI only accepts
      // IPv6+port in the format [2001:db8::1]:80 (for the time being)
      bracketPos = string.indexOf(']');
      parts.hostname = string.substring(1, bracketPos) || null;
      parts.port = string.substring(bracketPos + 2, pos) || null;
      if (parts.port === '/') {
        parts.port = null;
      }
    } else {
      var firstColon = string.indexOf(':');
      var firstSlash = string.indexOf('/');
      var nextColon = string.indexOf(':', firstColon + 1);
      if (nextColon !== -1 && (firstSlash === -1 || nextColon < firstSlash)) {
        // IPv6 host contains multiple colons - but no port
        // this notation is actually not allowed by RFC 3986, but we're a liberal parser
        parts.hostname = string.substring(0, pos) || null;
        parts.port = null;
      } else {
        t = string.substring(0, pos).split(':');
        parts.hostname = t[0] || null;
        parts.port = t[1] || null;
      }
    }

    if (parts.hostname && string.substring(pos).charAt(0) !== '/') {
      pos++;
      string = '/' + string;
    }

    return string.substring(pos) || '/';
  };
  URI.parseAuthority = function (string, parts) {
    string = URI.parseUserinfo(string, parts);
    return URI.parseHost(string, parts);
  };
  URI.parseUserinfo = function (string, parts) {
    // extract username:password
    var firstSlash = string.indexOf('/');
    var pos = string.lastIndexOf('@', firstSlash > -1 ? firstSlash : string.length - 1);
    var t;

    // authority@ must come before /path
    if (pos > -1 && (firstSlash === -1 || pos < firstSlash)) {
      t = string.substring(0, pos).split(':');
      parts.username = t[0] ? URI.decode(t[0]) : null;
      t.shift();
      parts.password = t[0] ? URI.decode(t.join(':')) : null;
      string = string.substring(pos + 1);
    } else {
      parts.username = null;
      parts.password = null;
    }

    return string;
  };
  URI.parseQuery = function (string, escapeQuerySpace) {
    if (!string) {
      return {};
    }

    // throw out the funky business - "?"[name"="value"&"]+
    string = string.replace(/&+/g, '&').replace(/^\?*&*|&+$/g, '');

    if (!string) {
      return {};
    }

    var items = {};
    var splits = string.split('&');
    var length = splits.length;
    var v, name, value;

    for (var i = 0; i < length; i++) {
      v = splits[i].split('=');
      name = URI.decodeQuery(v.shift(), escapeQuerySpace);
      // no "=" is null according to http://dvcs.w3.org/hg/url/raw-file/tip/Overview.html#collect-url-parameters
      value = v.length ? URI.decodeQuery(v.join('='), escapeQuerySpace) : null;

      if (hasOwn.call(items, name)) {
        if (typeof items[name] === 'string' || items[name] === null) {
          items[name] = [items[name]];
        }

        items[name].push(value);
      } else {
        items[name] = value;
      }
    }

    return items;
  };

  URI.build = function (parts) {
    var t = '';

    if (parts.protocol) {
      t += parts.protocol + ':';
    }

    if (!parts.urn && (t || parts.hostname)) {
      t += '//';
    }

    t += URI.buildAuthority(parts) || '';

    if (typeof parts.path === 'string') {
      if (parts.path.charAt(0) !== '/' && typeof parts.hostname === 'string') {
        t += '/';
      }

      t += parts.path;
    }

    if (typeof parts.query === 'string' && parts.query) {
      t += '?' + parts.query;
    }

    if (typeof parts.fragment === 'string' && parts.fragment) {
      t += '#' + parts.fragment;
    }
    return t;
  };
  URI.buildHost = function (parts) {
    var t = '';

    if (!parts.hostname) {
      return '';
    } else if (URI.ip6_expression.test(parts.hostname)) {
      t += '[' + parts.hostname + ']';
    } else {
      t += parts.hostname;
    }

    if (parts.port) {
      t += ':' + parts.port;
    }

    return t;
  };
  URI.buildAuthority = function (parts) {
    return URI.buildUserinfo(parts) + URI.buildHost(parts);
  };
  URI.buildUserinfo = function (parts) {
    var t = '';

    if (parts.username) {
      t += URI.encode(parts.username);
    }

    if (parts.password) {
      t += ':' + URI.encode(parts.password);
    }

    if (t) {
      t += '@';
    }

    return t;
  };
  URI.buildQuery = function (data, duplicateQueryParameters, escapeQuerySpace) {
    // according to http://tools.ietf.org/html/rfc3986 or http://labs.apache.org/webarch/uri/rfc/rfc3986.html
    // being »-._~!$&'()*+,;=:@/?« %HEX and alnum are allowed
    // the RFC explicitly states ?/foo being a valid use case, no mention of parameter syntax!
    // URI.js treats the query string as being application/x-www-form-urlencoded
    // see http://www.w3.org/TR/REC-html40/interact/forms.html#form-content-type

    var t = '';
    var unique, key, i, length;
    for (key in data) {
      if (hasOwn.call(data, key) && key) {
        if (isArray(data[key])) {
          unique = {};
          for (i = 0, length = data[key].length; i < length; i++) {
            if (data[key][i] !== undefined && unique[data[key][i] + ''] === undefined) {
              t += '&' + URI.buildQueryParameter(key, data[key][i], escapeQuerySpace);
              if (duplicateQueryParameters !== true) {
                unique[data[key][i] + ''] = true;
              }
            }
          }
        } else if (data[key] !== undefined) {
          t += '&' + URI.buildQueryParameter(key, data[key], escapeQuerySpace);
        }
      }
    }

    return t.substring(1);
  };
  URI.buildQueryParameter = function (name, value, escapeQuerySpace) {
    // http://www.w3.org/TR/REC-html40/interact/forms.html#form-content-type -- application/x-www-form-urlencoded
    // don't append "=" for null values, according to http://dvcs.w3.org/hg/url/raw-file/tip/Overview.html#url-parameter-serialization
    return URI.encodeQuery(name, escapeQuerySpace) + (value !== null ? '=' + URI.encodeQuery(value, escapeQuerySpace) : '');
  };

  URI.addQuery = function (data, name, value) {
    if ((typeof name === 'undefined' ? 'undefined' : _typeof(name)) === 'object') {
      for (var key in name) {
        if (hasOwn.call(name, key)) {
          URI.addQuery(data, key, name[key]);
        }
      }
    } else if (typeof name === 'string') {
      if (data[name] === undefined) {
        data[name] = value;
        return;
      } else if (typeof data[name] === 'string') {
        data[name] = [data[name]];
      }

      if (!isArray(value)) {
        value = [value];
      }

      data[name] = (data[name] || []).concat(value);
    } else {
      throw new TypeError('URI.addQuery() accepts an object, string as the name parameter');
    }
  };
  URI.removeQuery = function (data, name, value) {
    var i, length, key;

    if (isArray(name)) {
      for (i = 0, length = name.length; i < length; i++) {
        data[name[i]] = undefined;
      }
    } else if (getType(name) === 'RegExp') {
      for (key in data) {
        if (name.test(key)) {
          data[key] = undefined;
        }
      }
    } else if ((typeof name === 'undefined' ? 'undefined' : _typeof(name)) === 'object') {
      for (key in name) {
        if (hasOwn.call(name, key)) {
          URI.removeQuery(data, key, name[key]);
        }
      }
    } else if (typeof name === 'string') {
      if (value !== undefined) {
        if (getType(value) === 'RegExp') {
          if (!isArray(data[name]) && value.test(data[name])) {
            data[name] = undefined;
          } else {
            data[name] = filterArrayValues(data[name], value);
          }
        } else if (data[name] === String(value) && (!isArray(value) || value.length === 1)) {
          data[name] = undefined;
        } else if (isArray(data[name])) {
          data[name] = filterArrayValues(data[name], value);
        }
      } else {
        data[name] = undefined;
      }
    } else {
      throw new TypeError('URI.removeQuery() accepts an object, string, RegExp as the first parameter');
    }
  };
  URI.hasQuery = function (data, name, value, withinArray) {
    switch (getType(name)) {
      case 'String':
        // Nothing to do here
        break;

      case 'RegExp':
        for (var key in data) {
          if (hasOwn.call(data, key)) {
            if (name.test(key) && (value === undefined || URI.hasQuery(data, key, value))) {
              return true;
            }
          }
        }

        return false;

      case 'Object':
        for (var _key in name) {
          if (hasOwn.call(name, _key)) {
            if (!URI.hasQuery(data, _key, name[_key])) {
              return false;
            }
          }
        }

        return true;

      default:
        throw new TypeError('URI.hasQuery() accepts a string, regular expression or object as the name parameter');
    }

    switch (getType(value)) {
      case 'Undefined':
        // true if exists (but may be empty)
        return name in data; // data[name] !== undefined;

      case 'Boolean':
        // true if exists and non-empty
        var _booly = Boolean(isArray(data[name]) ? data[name].length : data[name]);
        return value === _booly;

      case 'Function':
        // allow complex comparison
        return !!value(data[name], name, data);

      case 'Array':
        if (!isArray(data[name])) {
          return false;
        }

        var op = withinArray ? arrayContains : arraysEqual;
        return op(data[name], value);

      case 'RegExp':
        if (!isArray(data[name])) {
          return Boolean(data[name] && data[name].match(value));
        }

        if (!withinArray) {
          return false;
        }

        return arrayContains(data[name], value);

      case 'Number':
        value = String(value);
      /* falls through */
      case 'String':
        if (!isArray(data[name])) {
          return data[name] === value;
        }

        if (!withinArray) {
          return false;
        }

        return arrayContains(data[name], value);

      default:
        throw new TypeError('URI.hasQuery() accepts undefined, boolean, string, number, RegExp, Function as the value parameter');
    }
  };

  URI.joinPaths = function () {
    var input = [];
    var segments = [];
    var nonEmptySegments = 0;

    for (var i = 0; i < arguments.length; i++) {
      var url = new URI(arguments[i]);
      input.push(url);
      var _segments = url.segment();
      for (var s = 0; s < _segments.length; s++) {
        if (typeof _segments[s] === 'string') {
          segments.push(_segments[s]);
        }

        if (_segments[s]) {
          nonEmptySegments++;
        }
      }
    }

    if (!segments.length || !nonEmptySegments) {
      return new URI('');
    }

    var uri = new URI('').segment(segments);

    if (input[0].path() === '' || input[0].path().slice(0, 1) === '/') {
      uri.path('/' + uri.path());
    }

    return uri.normalize();
  };

  URI.commonPath = function (one, two) {
    var length = Math.min(one.length, two.length);
    var pos;

    // find first non-matching character
    for (pos = 0; pos < length; pos++) {
      if (one.charAt(pos) !== two.charAt(pos)) {
        pos--;
        break;
      }
    }

    if (pos < 1) {
      return one.charAt(0) === two.charAt(0) && one.charAt(0) === '/' ? '/' : '';
    }

    // revert to last /
    if (one.charAt(pos) !== '/' || two.charAt(pos) !== '/') {
      pos = one.substring(0, pos).lastIndexOf('/');
    }

    return one.substring(0, pos + 1);
  };

  URI.withinString = function (string, callback, options) {
    options || (options = {});
    var _start = options.start || URI.findUri.start;
    var _end = options.end || URI.findUri.end;
    var _trim = options.trim || URI.findUri.trim;
    var _attributeOpen = /[a-z0-9-]=["']?$/i;

    _start.lastIndex = 0;
    while (true) {
      var match = _start.exec(string);
      if (!match) {
        break;
      }

      var start = match.index;
      if (options.ignoreHtml) {
        // attribut(e=["']?$)
        var attributeOpen = string.slice(Math.max(start - 3, 0), start);
        if (attributeOpen && _attributeOpen.test(attributeOpen)) {
          continue;
        }
      }

      var end = start + string.slice(start).search(_end);
      var slice = string.slice(start, end).replace(_trim, '');
      if (options.ignore && options.ignore.test(slice)) {
        continue;
      }

      end = start + slice.length;
      var result = callback(slice, start, end, string);
      string = string.slice(0, start) + result + string.slice(end);
      _start.lastIndex = start + result.length;
    }

    _start.lastIndex = 0;
    return string;
  };

  URI.ensureValidHostname = function (v) {
    // Theoretically URIs allow percent-encoding in Hostnames (according to RFC 3986)
    // they are not part of DNS and therefore ignored by URI.js

    if (v.match(URI.invalid_hostname_characters)) {
      // test punycode
      if (!punycode) {
        throw new TypeError('Hostname "' + v + '" contains characters other than [A-Z0-9.-] and Punycode.js is not available');
      }

      if (punycode.toASCII(v).match(URI.invalid_hostname_characters)) {
        throw new TypeError('Hostname "' + v + '" contains characters other than [A-Z0-9.-]');
      }
    }
  };

  // noConflict
  URI.noConflict = function (removeAll) {
    if (removeAll) {
      var unconflicted = {
        URI: this.noConflict()
      };

      if (root.URITemplate && typeof root.URITemplate.noConflict === 'function') {
        unconflicted.URITemplate = root.URITemplate.noConflict();
      }

      if (root.IPv6 && typeof root.IPv6.noConflict === 'function') {
        unconflicted.IPv6 = root.IPv6.noConflict();
      }

      if (root.SecondLevelDomains && typeof root.SecondLevelDomains.noConflict === 'function') {
        unconflicted.SecondLevelDomains = root.SecondLevelDomains.noConflict();
      }

      return unconflicted;
    } else if (root.URI === this) {
      root.URI = _URI;
    }

    return this;
  };

  p.build = function (deferBuild) {
    if (deferBuild === true) {
      this._deferred_build = true;
    } else if (deferBuild === undefined || this._deferred_build) {
      this._string = URI.build(this._parts);
      this._deferred_build = false;
    }

    return this;
  };

  p.clone = function () {
    return new URI(this);
  };

  p.valueOf = p.toString = function () {
    return this.build(false)._string;
  };

  function generateSimpleAccessor(_part) {
    return function (v, build) {
      if (v === undefined) {
        return this._parts[_part] || '';
      } else {
        this._parts[_part] = v || null;
        this.build(!build);
        return this;
      }
    };
  }

  function generatePrefixAccessor(_part, _key) {
    return function (v, build) {
      if (v === undefined) {
        return this._parts[_part] || '';
      } else {
        if (v !== null) {
          v = v + '';
          if (v.charAt(0) === _key) {
            v = v.substring(1);
          }
        }

        this._parts[_part] = v;
        this.build(!build);
        return this;
      }
    };
  }

  p.protocol = generateSimpleAccessor('protocol');
  p.username = generateSimpleAccessor('username');
  p.password = generateSimpleAccessor('password');
  p.hostname = generateSimpleAccessor('hostname');
  p.port = generateSimpleAccessor('port');
  p.query = generatePrefixAccessor('query', '?');
  p.fragment = generatePrefixAccessor('fragment', '#');

  p.search = function (v, build) {
    var t = this.query(v, build);
    return typeof t === 'string' && t.length ? '?' + t : t;
  };
  p.hash = function (v, build) {
    var t = this.fragment(v, build);
    return typeof t === 'string' && t.length ? '#' + t : t;
  };

  p.pathname = function (v, build) {
    if (v === undefined || v === true) {
      var res = this._parts.path || (this._parts.hostname ? '/' : '');
      return v ? (this._parts.urn ? URI.decodeUrnPath : URI.decodePath)(res) : res;
    } else {
      if (this._parts.urn) {
        this._parts.path = v ? URI.recodeUrnPath(v) : '';
      } else {
        this._parts.path = v ? URI.recodePath(v) : '/';
      }
      this.build(!build);
      return this;
    }
  };
  p.path = p.pathname;
  p.href = function (href, build) {
    var key;

    if (href === undefined) {
      return this.toString();
    }

    this._string = '';
    this._parts = URI._parts();

    var _URI = href instanceof URI;
    var _object = (typeof href === 'undefined' ? 'undefined' : _typeof(href)) === 'object' && (href.hostname || href.path || href.pathname);
    if (href.nodeName) {
      var attribute = URI.getDomAttribute(href);
      href = href[attribute] || '';
      _object = false;
    }

    // window.location is reported to be an object, but it's not the sort
    // of object we're looking for:
    // * location.protocol ends with a colon
    // * location.query != object.search
    // * location.hash != object.fragment
    // simply serializing the unknown object should do the trick
    // (for location, not for everything...)
    if (!_URI && _object && href.pathname !== undefined) {
      href = href.toString();
    }

    if (typeof href === 'string' || href instanceof String) {
      this._parts = URI.parse(String(href), this._parts);
    } else if (_URI || _object) {
      var src = _URI ? href._parts : href;
      for (key in src) {
        if (hasOwn.call(this._parts, key)) {
          this._parts[key] = src[key];
        }
      }
    } else {
      throw new TypeError('invalid input');
    }

    this.build(!build);
    return this;
  };

  // identification accessors
  p.is = function (what) {
    var ip = false;
    var ip4 = false;
    var ip6 = false;
    var name = false;
    var sld = false;
    var idn = false;
    var punycode = false;
    var relative = !this._parts.urn;

    if (this._parts.hostname) {
      relative = false;
      ip4 = URI.ip4_expression.test(this._parts.hostname);
      ip6 = URI.ip6_expression.test(this._parts.hostname);
      ip = ip4 || ip6;
      name = !ip;
      sld = name && SLD && SLD.has(this._parts.hostname);
      idn = name && URI.idn_expression.test(this._parts.hostname);
      punycode = name && URI.punycode_expression.test(this._parts.hostname);
    }

    switch (what.toLowerCase()) {
      case 'relative':
        return relative;

      case 'absolute':
        return !relative;

      // hostname identification
      case 'domain':
      case 'name':
        return name;

      case 'sld':
        return sld;

      case 'ip':
        return ip;

      case 'ip4':
      case 'ipv4':
      case 'inet4':
        return ip4;

      case 'ip6':
      case 'ipv6':
      case 'inet6':
        return ip6;

      case 'idn':
        return idn;

      case 'url':
        return !this._parts.urn;

      case 'urn':
        return !!this._parts.urn;

      case 'punycode':
        return punycode;
    }

    return null;
  };

  // component specific input validation
  var _protocol = p.protocol;
  var _port = p.port;
  var _hostname = p.hostname;

  p.protocol = function (v, build) {
    if (v !== undefined) {
      if (v) {
        // accept trailing ://
        v = v.replace(/:(\/\/)?$/, '');

        if (!v.match(URI.protocol_expression)) {
          throw new TypeError('Protocol "' + v + '" contains characters other than [A-Z0-9.+-] or doesn\'t start with [A-Z]');
        }
      }
    }
    return _protocol.call(this, v, build);
  };
  p.scheme = p.protocol;
  p.port = function (v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (v !== undefined) {
      if (v === 0) {
        v = null;
      }

      if (v) {
        v += '';
        if (v.charAt(0) === ':') {
          v = v.substring(1);
        }

        if (v.match(/[^0-9]/)) {
          throw new TypeError('Port "' + v + '" contains characters other than [0-9]');
        }
      }
    }
    return _port.call(this, v, build);
  };
  p.hostname = function (v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (v !== undefined) {
      var x = {};
      var res = URI.parseHost(v, x);
      if (res !== '/') {
        throw new TypeError('Hostname "' + v + '" contains characters other than [A-Z0-9.-]');
      }

      v = x.hostname;
    }
    return _hostname.call(this, v, build);
  };

  // compound accessors
  p.origin = function (v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (v === undefined) {
      var protocol = this.protocol();
      var authority = this.authority();
      if (!authority) {
        return '';
      }

      return (protocol ? protocol + '://' : '') + this.authority();
    } else {
      var origin = URI(v);
      this.protocol(origin.protocol()).authority(origin.authority()).build(!build);
      return this;
    }
  };
  p.host = function (v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (v === undefined) {
      return this._parts.hostname ? URI.buildHost(this._parts) : '';
    } else {
      var res = URI.parseHost(v, this._parts);
      if (res !== '/') {
        throw new TypeError('Hostname "' + v + '" contains characters other than [A-Z0-9.-]');
      }

      this.build(!build);
      return this;
    }
  };
  p.authority = function (v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (v === undefined) {
      return this._parts.hostname ? URI.buildAuthority(this._parts) : '';
    } else {
      var res = URI.parseAuthority(v, this._parts);
      if (res !== '/') {
        throw new TypeError('Hostname "' + v + '" contains characters other than [A-Z0-9.-]');
      }

      this.build(!build);
      return this;
    }
  };
  p.userinfo = function (v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (v === undefined) {
      var t = URI.buildUserinfo(this._parts);
      return t ? t.substring(0, t.length - 1) : t;
    } else {
      if (v[v.length - 1] !== '@') {
        v += '@';
      }

      URI.parseUserinfo(v, this._parts);
      this.build(!build);
      return this;
    }
  };
  p.resource = function (v, build) {
    var parts;

    if (v === undefined) {
      return this.path() + this.search() + this.hash();
    }

    parts = URI.parse(v);
    this._parts.path = parts.path;
    this._parts.query = parts.query;
    this._parts.fragment = parts.fragment;
    this.build(!build);
    return this;
  };

  // fraction accessors
  p.subdomain = function (v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    // convenience, return "www" from "www.example.org"
    if (v === undefined) {
      if (!this._parts.hostname || this.is('IP')) {
        return '';
      }

      // grab domain and add another segment
      var end = this._parts.hostname.length - this.domain().length - 1;
      return this._parts.hostname.substring(0, end) || '';
    } else {
      var e = this._parts.hostname.length - this.domain().length;
      var sub = this._parts.hostname.substring(0, e);
      var replace = new RegExp('^' + escapeRegEx(sub));

      if (v && v.charAt(v.length - 1) !== '.') {
        v += '.';
      }

      if (v) {
        URI.ensureValidHostname(v);
      }

      this._parts.hostname = this._parts.hostname.replace(replace, v);
      this.build(!build);
      return this;
    }
  };
  p.domain = function (v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (typeof v === 'boolean') {
      build = v;
      v = undefined;
    }

    // convenience, return "example.org" from "www.example.org"
    if (v === undefined) {
      if (!this._parts.hostname || this.is('IP')) {
        return '';
      }

      // if hostname consists of 1 or 2 segments, it must be the domain
      var t = this._parts.hostname.match(/\./g);
      if (t && t.length < 2) {
        return this._parts.hostname;
      }

      // grab tld and add another segment
      var end = this._parts.hostname.length - this.tld(build).length - 1;
      end = this._parts.hostname.lastIndexOf('.', end - 1) + 1;
      return this._parts.hostname.substring(end) || '';
    } else {
      if (!v) {
        throw new TypeError('cannot set domain empty');
      }

      URI.ensureValidHostname(v);

      if (!this._parts.hostname || this.is('IP')) {
        this._parts.hostname = v;
      } else {
        var replace = new RegExp(escapeRegEx(this.domain()) + '$');
        this._parts.hostname = this._parts.hostname.replace(replace, v);
      }

      this.build(!build);
      return this;
    }
  };
  p.tld = function (v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (typeof v === 'boolean') {
      build = v;
      v = undefined;
    }

    // return "org" from "www.example.org"
    if (v === undefined) {
      if (!this._parts.hostname || this.is('IP')) {
        return '';
      }

      var pos = this._parts.hostname.lastIndexOf('.');
      var tld = this._parts.hostname.substring(pos + 1);

      if (build !== true && SLD && SLD.list[tld.toLowerCase()]) {
        return SLD.get(this._parts.hostname) || tld;
      }

      return tld;
    } else {
      var replace;

      if (!v) {
        throw new TypeError('cannot set TLD empty');
      } else if (v.match(/[^a-zA-Z0-9-]/)) {
        if (SLD && SLD.is(v)) {
          replace = new RegExp(escapeRegEx(this.tld()) + '$');
          this._parts.hostname = this._parts.hostname.replace(replace, v);
        } else {
          throw new TypeError('TLD "' + v + '" contains characters other than [A-Z0-9]');
        }
      } else if (!this._parts.hostname || this.is('IP')) {
        throw new ReferenceError('cannot set TLD on non-domain host');
      } else {
        replace = new RegExp(escapeRegEx(this.tld()) + '$');
        this._parts.hostname = this._parts.hostname.replace(replace, v);
      }

      this.build(!build);
      return this;
    }
  };
  p.directory = function (v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (v === undefined || v === true) {
      if (!this._parts.path && !this._parts.hostname) {
        return '';
      }

      if (this._parts.path === '/') {
        return '/';
      }

      var end = this._parts.path.length - this.filename().length - 1;
      var res = this._parts.path.substring(0, end) || (this._parts.hostname ? '/' : '');

      return v ? URI.decodePath(res) : res;
    } else {
      var e = this._parts.path.length - this.filename().length;
      var directory = this._parts.path.substring(0, e);
      var replace = new RegExp('^' + escapeRegEx(directory));

      // fully qualifier directories begin with a slash
      if (!this.is('relative')) {
        if (!v) {
          v = '/';
        }

        if (v.charAt(0) !== '/') {
          v = '/' + v;
        }
      }

      // directories always end with a slash
      if (v && v.charAt(v.length - 1) !== '/') {
        v += '/';
      }

      v = URI.recodePath(v);
      this._parts.path = this._parts.path.replace(replace, v);
      this.build(!build);
      return this;
    }
  };
  p.filename = function (v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (v === undefined || v === true) {
      if (!this._parts.path || this._parts.path === '/') {
        return '';
      }

      var pos = this._parts.path.lastIndexOf('/');
      var res = this._parts.path.substring(pos + 1);

      return v ? URI.decodePathSegment(res) : res;
    } else {
      var mutatedDirectory = false;

      if (v.charAt(0) === '/') {
        v = v.substring(1);
      }

      if (v.match(/\.?\//)) {
        mutatedDirectory = true;
      }

      var replace = new RegExp(escapeRegEx(this.filename()) + '$');
      v = URI.recodePath(v);
      this._parts.path = this._parts.path.replace(replace, v);

      if (mutatedDirectory) {
        this.normalizePath(build);
      } else {
        this.build(!build);
      }

      return this;
    }
  };
  p.suffix = function (v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (v === undefined || v === true) {
      if (!this._parts.path || this._parts.path === '/') {
        return '';
      }

      var filename = this.filename();
      var pos = filename.lastIndexOf('.');
      var s, res;

      if (pos === -1) {
        return '';
      }

      // suffix may only contain alnum characters (yup, I made this up.)
      s = filename.substring(pos + 1);
      res = /^[a-z0-9%]+$/i.test(s) ? s : '';
      return v ? URI.decodePathSegment(res) : res;
    } else {
      if (v.charAt(0) === '.') {
        v = v.substring(1);
      }

      var suffix = this.suffix();
      var replace;

      if (!suffix) {
        if (!v) {
          return this;
        }

        this._parts.path += '.' + URI.recodePath(v);
      } else if (!v) {
        replace = new RegExp(escapeRegEx('.' + suffix) + '$');
      } else {
        replace = new RegExp(escapeRegEx(suffix) + '$');
      }

      if (replace) {
        v = URI.recodePath(v);
        this._parts.path = this._parts.path.replace(replace, v);
      }

      this.build(!build);
      return this;
    }
  };
  p.segment = function (segment, v, build) {
    var separator = this._parts.urn ? ':' : '/';
    var path = this.path();
    var absolute = path.substring(0, 1) === '/';
    var segments = path.split(separator);

    if (segment !== undefined && typeof segment !== 'number') {
      build = v;
      v = segment;
      segment = undefined;
    }

    if (segment !== undefined && typeof segment !== 'number') {
      throw new Error('Bad segment "' + segment + '", must be 0-based integer');
    }

    if (absolute) {
      segments.shift();
    }

    if (segment < 0) {
      // allow negative indexes to address from the end
      segment = Math.max(segments.length + segment, 0);
    }

    if (v === undefined) {
      /*jshint laxbreak: true */
      return segment === undefined ? segments : segments[segment];
      /*jshint laxbreak: false */
    } else if (segment === null || segments[segment] === undefined) {
        if (isArray(v)) {
          segments = [];
          // collapse empty elements within array
          for (var i = 0, l = v.length; i < l; i++) {
            if (!v[i].length && (!segments.length || !segments[segments.length - 1].length)) {
              continue;
            }

            if (segments.length && !segments[segments.length - 1].length) {
              segments.pop();
            }

            segments.push(trimSlashes(v[i]));
          }
        } else if (v || typeof v === 'string') {
          v = trimSlashes(v);
          if (segments[segments.length - 1] === '') {
            // empty trailing elements have to be overwritten
            // to prevent results such as /foo//bar
            segments[segments.length - 1] = v;
          } else {
            segments.push(v);
          }
        }
      } else {
        if (v) {
          segments[segment] = trimSlashes(v);
        } else {
          segments.splice(segment, 1);
        }
      }

    if (absolute) {
      segments.unshift('');
    }

    return this.path(segments.join(separator), build);
  };
  p.segmentCoded = function (segment, v, build) {
    var segments, i, l;

    if (typeof segment !== 'number') {
      build = v;
      v = segment;
      segment = undefined;
    }

    if (v === undefined) {
      segments = this.segment(segment, v, build);
      if (!isArray(segments)) {
        segments = segments !== undefined ? URI.decode(segments) : undefined;
      } else {
        for (i = 0, l = segments.length; i < l; i++) {
          segments[i] = URI.decode(segments[i]);
        }
      }

      return segments;
    }

    if (!isArray(v)) {
      v = typeof v === 'string' || v instanceof String ? URI.encode(v) : v;
    } else {
      for (i = 0, l = v.length; i < l; i++) {
        v[i] = URI.encode(v[i]);
      }
    }

    return this.segment(segment, v, build);
  };

  // mutating query string
  var q = p.query;
  p.query = function (v, build) {
    if (v === true) {
      return URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
    } else if (typeof v === 'function') {
      var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
      var result = v.call(this, data);
      this._parts.query = URI.buildQuery(result || data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
      this.build(!build);
      return this;
    } else if (v !== undefined && typeof v !== 'string') {
      this._parts.query = URI.buildQuery(v, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
      this.build(!build);
      return this;
    } else {
      return q.call(this, v, build);
    }
  };
  p.setQuery = function (name, value, build) {
    var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);

    if (typeof name === 'string' || name instanceof String) {
      data[name] = value !== undefined ? value : null;
    } else if ((typeof name === 'undefined' ? 'undefined' : _typeof(name)) === 'object') {
      for (var key in name) {
        if (hasOwn.call(name, key)) {
          data[key] = name[key];
        }
      }
    } else {
      throw new TypeError('URI.addQuery() accepts an object, string as the name parameter');
    }

    this._parts.query = URI.buildQuery(data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
    if (typeof name !== 'string') {
      build = value;
    }

    this.build(!build);
    return this;
  };
  p.addQuery = function (name, value, build) {
    var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
    URI.addQuery(data, name, value === undefined ? null : value);
    this._parts.query = URI.buildQuery(data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
    if (typeof name !== 'string') {
      build = value;
    }

    this.build(!build);
    return this;
  };
  p.removeQuery = function (name, value, build) {
    var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
    URI.removeQuery(data, name, value);
    this._parts.query = URI.buildQuery(data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
    if (typeof name !== 'string') {
      build = value;
    }

    this.build(!build);
    return this;
  };
  p.hasQuery = function (name, value, withinArray) {
    var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
    return URI.hasQuery(data, name, value, withinArray);
  };
  p.setSearch = p.setQuery;
  p.addSearch = p.addQuery;
  p.removeSearch = p.removeQuery;
  p.hasSearch = p.hasQuery;

  // sanitizing URLs
  p.normalize = function () {
    if (this._parts.urn) {
      return this.normalizeProtocol(false).normalizePath(false).normalizeQuery(false).normalizeFragment(false).build();
    }

    return this.normalizeProtocol(false).normalizeHostname(false).normalizePort(false).normalizePath(false).normalizeQuery(false).normalizeFragment(false).build();
  };
  p.normalizeProtocol = function (build) {
    if (typeof this._parts.protocol === 'string') {
      this._parts.protocol = this._parts.protocol.toLowerCase();
      this.build(!build);
    }

    return this;
  };
  p.normalizeHostname = function (build) {
    if (this._parts.hostname) {
      if (this.is('IDN') && punycode) {
        this._parts.hostname = punycode.toASCII(this._parts.hostname);
      } else if (this.is('IPv6') && IPv6) {
        this._parts.hostname = IPv6.best(this._parts.hostname);
      }

      this._parts.hostname = this._parts.hostname.toLowerCase();
      this.build(!build);
    }

    return this;
  };
  p.normalizePort = function (build) {
    // remove port of it's the protocol's default
    if (typeof this._parts.protocol === 'string' && this._parts.port === URI.defaultPorts[this._parts.protocol]) {
      this._parts.port = null;
      this.build(!build);
    }

    return this;
  };
  p.normalizePath = function (build) {
    var _path = this._parts.path;
    if (!_path) {
      return this;
    }

    if (this._parts.urn) {
      this._parts.path = URI.recodeUrnPath(this._parts.path);
      this.build(!build);
      return this;
    }

    if (this._parts.path === '/') {
      return this;
    }

    _path = URI.recodePath(_path);

    var _was_relative;
    var _leadingParents = '';
    var _parent, _pos;

    // handle relative paths
    if (_path.charAt(0) !== '/') {
      _was_relative = true;
      _path = '/' + _path;
    }

    // handle relative files (as opposed to directories)
    if (_path.slice(-3) === '/..' || _path.slice(-2) === '/.') {
      _path += '/';
    }

    // resolve simples
    _path = _path.replace(/(\/(\.\/)+)|(\/\.$)/g, '/').replace(/\/{2,}/g, '/');

    // remember leading parents
    if (_was_relative) {
      _leadingParents = _path.substring(1).match(/^(\.\.\/)+/) || '';
      if (_leadingParents) {
        _leadingParents = _leadingParents[0];
      }
    }

    // resolve parents
    while (true) {
      _parent = _path.search(/\/\.\.(\/|$)/);
      if (_parent === -1) {
        // no more ../ to resolve
        break;
      } else if (_parent === 0) {
        // top level cannot be relative, skip it
        _path = _path.substring(3);
        continue;
      }

      _pos = _path.substring(0, _parent).lastIndexOf('/');
      if (_pos === -1) {
        _pos = _parent;
      }
      _path = _path.substring(0, _pos) + _path.substring(_parent + 3);
    }

    // revert to relative
    if (_was_relative && this.is('relative')) {
      _path = _leadingParents + _path.substring(1);
    }

    this._parts.path = _path;
    this.build(!build);
    return this;
  };
  p.normalizePathname = p.normalizePath;
  p.normalizeQuery = function (build) {
    if (typeof this._parts.query === 'string') {
      if (!this._parts.query.length) {
        this._parts.query = null;
      } else {
        this.query(URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace));
      }

      this.build(!build);
    }

    return this;
  };
  p.normalizeFragment = function (build) {
    if (!this._parts.fragment) {
      this._parts.fragment = null;
      this.build(!build);
    }

    return this;
  };
  p.normalizeSearch = p.normalizeQuery;
  p.normalizeHash = p.normalizeFragment;

  p.iso8859 = function () {
    // expect unicode input, iso8859 output
    var e = URI.encode;
    var d = URI.decode;

    URI.encode = escape;
    URI.decode = decodeURIComponent;
    try {
      this.normalize();
    } finally {
      URI.encode = e;
      URI.decode = d;
    }
    return this;
  };

  p.unicode = function () {
    // expect iso8859 input, unicode output
    var e = URI.encode;
    var d = URI.decode;

    URI.encode = strictEncodeURIComponent;
    URI.decode = unescape;
    try {
      this.normalize();
    } finally {
      URI.encode = e;
      URI.decode = d;
    }
    return this;
  };

  p.readable = function () {
    var uri = this.clone();
    // removing username, password, because they shouldn't be displayed according to RFC 3986
    uri.username('').password('').normalize();
    var t = '';
    if (uri._parts.protocol) {
      t += uri._parts.protocol + '://';
    }

    if (uri._parts.hostname) {
      if (uri.is('punycode') && punycode) {
        t += punycode.toUnicode(uri._parts.hostname);
        if (uri._parts.port) {
          t += ':' + uri._parts.port;
        }
      } else {
        t += uri.host();
      }
    }

    if (uri._parts.hostname && uri._parts.path && uri._parts.path.charAt(0) !== '/') {
      t += '/';
    }

    t += uri.path(true);
    if (uri._parts.query) {
      var q = '';
      for (var i = 0, qp = uri._parts.query.split('&'), l = qp.length; i < l; i++) {
        var kv = (qp[i] || '').split('=');
        q += '&' + URI.decodeQuery(kv[0], this._parts.escapeQuerySpace).replace(/&/g, '%26');

        if (kv[1] !== undefined) {
          q += '=' + URI.decodeQuery(kv[1], this._parts.escapeQuerySpace).replace(/&/g, '%26');
        }
      }
      t += '?' + q.substring(1);
    }

    t += URI.decodeQuery(uri.hash(), true);
    return t;
  };

  // resolving relative and absolute URLs
  p.absoluteTo = function (base) {
    var resolved = this.clone();
    var properties = ['protocol', 'username', 'password', 'hostname', 'port'];
    var basedir, i, p;

    if (this._parts.urn) {
      throw new Error('URNs do not have any generally defined hierarchical components');
    }

    if (!(base instanceof URI)) {
      base = new URI(base);
    }

    if (!resolved._parts.protocol) {
      resolved._parts.protocol = base._parts.protocol;
    }

    if (this._parts.hostname) {
      return resolved;
    }

    for (i = 0; p = properties[i]; i++) {
      resolved._parts[p] = base._parts[p];
    }

    if (!resolved._parts.path) {
      resolved._parts.path = base._parts.path;
      if (!resolved._parts.query) {
        resolved._parts.query = base._parts.query;
      }
    } else if (resolved._parts.path.substring(-2) === '..') {
      resolved._parts.path += '/';
    }

    if (resolved.path().charAt(0) !== '/') {
      basedir = base.directory();
      basedir = basedir ? basedir : base.path().indexOf('/') === 0 ? '/' : '';
      resolved._parts.path = (basedir ? basedir + '/' : '') + resolved._parts.path;
      resolved.normalizePath();
    }

    resolved.build();
    return resolved;
  };
  p.relativeTo = function (base) {
    var relative = this.clone().normalize();
    var relativeParts, baseParts, common, relativePath, basePath;

    if (relative._parts.urn) {
      throw new Error('URNs do not have any generally defined hierarchical components');
    }

    base = new URI(base).normalize();
    relativeParts = relative._parts;
    baseParts = base._parts;
    relativePath = relative.path();
    basePath = base.path();

    if (relativePath.charAt(0) !== '/') {
      throw new Error('URI is already relative');
    }

    if (basePath.charAt(0) !== '/') {
      throw new Error('Cannot calculate a URI relative to another relative URI');
    }

    if (relativeParts.protocol === baseParts.protocol) {
      relativeParts.protocol = null;
    }

    if (relativeParts.username !== baseParts.username || relativeParts.password !== baseParts.password) {
      return relative.build();
    }

    if (relativeParts.protocol !== null || relativeParts.username !== null || relativeParts.password !== null) {
      return relative.build();
    }

    if (relativeParts.hostname === baseParts.hostname && relativeParts.port === baseParts.port) {
      relativeParts.hostname = null;
      relativeParts.port = null;
    } else {
      return relative.build();
    }

    if (relativePath === basePath) {
      relativeParts.path = '';
      return relative.build();
    }

    // determine common sub path
    common = URI.commonPath(relativePath, basePath);

    // If the paths have nothing in common, return a relative URL with the absolute path.
    if (!common) {
      return relative.build();
    }

    var parents = baseParts.path.substring(common.length).replace(/[^\/]*$/, '').replace(/.*?\//g, '../');

    relativeParts.path = parents + relativeParts.path.substring(common.length) || './';

    return relative.build();
  };

  // comparing URIs
  p.equals = function (uri) {
    var one = this.clone();
    var two = new URI(uri);
    var one_map = {};
    var two_map = {};
    var checked = {};
    var one_query, two_query, key;

    one.normalize();
    two.normalize();

    // exact match
    if (one.toString() === two.toString()) {
      return true;
    }

    // extract query string
    one_query = one.query();
    two_query = two.query();
    one.query('');
    two.query('');

    // definitely not equal if not even non-query parts match
    if (one.toString() !== two.toString()) {
      return false;
    }

    // query parameters have the same length, even if they're permuted
    if (one_query.length !== two_query.length) {
      return false;
    }

    one_map = URI.parseQuery(one_query, this._parts.escapeQuerySpace);
    two_map = URI.parseQuery(two_query, this._parts.escapeQuerySpace);

    for (key in one_map) {
      if (hasOwn.call(one_map, key)) {
        if (!isArray(one_map[key])) {
          if (one_map[key] !== two_map[key]) {
            return false;
          }
        } else if (!arraysEqual(one_map[key], two_map[key])) {
          return false;
        }

        checked[key] = true;
      }
    }

    for (key in two_map) {
      if (hasOwn.call(two_map, key)) {
        if (!checked[key]) {
          // two contains a parameter not present in one
          return false;
        }
      }
    }

    return true;
  };

  // state
  p.duplicateQueryParameters = function (v) {
    this._parts.duplicateQueryParameters = !!v;
    return this;
  };

  p.escapeQuerySpace = function (v) {
    this._parts.escapeQuerySpace = !!v;
    return this;
  };

  return URI;
});

},{"./IPv6":9,"./SecondLevelDomains":10,"./punycode":12}],12:[function(require,module,exports){
(function (global){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

/*! https://mths.be/punycode v1.4.0 by @mathias */
;(function (root) {

	/** Detect free variables */
	var freeExports = (typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) == 'object' && exports && !exports.nodeType && exports;
	var freeModule = (typeof module === 'undefined' ? 'undefined' : _typeof(module)) == 'object' && module && !module.nodeType && module;
	var freeGlobal = (typeof global === 'undefined' ? 'undefined' : _typeof(global)) == 'object' && global;
	if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal) {
		root = freeGlobal;
	}

	/**
  * The `punycode` object.
  * @name punycode
  * @type Object
  */
	var punycode,


	/** Highest positive signed 32-bit float value */
	maxInt = 2147483647,
	    // aka. 0x7FFFFFFF or 2^31-1

	/** Bootstring parameters */
	base = 36,
	    tMin = 1,
	    tMax = 26,
	    skew = 38,
	    damp = 700,
	    initialBias = 72,
	    initialN = 128,
	    // 0x80
	delimiter = '-',
	    // '\x2D'

	/** Regular expressions */
	regexPunycode = /^xn--/,
	    regexNonASCII = /[^\x20-\x7E]/,
	    // unprintable ASCII chars + non-ASCII chars
	regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g,
	    // RFC 3490 separators

	/** Error messages */
	errors = {
		'overflow': 'Overflow: input needs wider integers to process',
		'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
		'invalid-input': 'Invalid input'
	},


	/** Convenience shortcuts */
	baseMinusTMin = base - tMin,
	    floor = Math.floor,
	    stringFromCharCode = String.fromCharCode,


	/** Temporary variable */
	key;

	/*--------------------------------------------------------------------------*/

	/**
  * A generic error utility function.
  * @private
  * @param {String} type The error type.
  * @returns {Error} Throws a `RangeError` with the applicable error message.
  */
	function error(type) {
		throw new RangeError(errors[type]);
	}

	/**
  * A generic `Array#map` utility function.
  * @private
  * @param {Array} array The array to iterate over.
  * @param {Function} callback The function that gets called for every array
  * item.
  * @returns {Array} A new array of values returned by the callback function.
  */
	function map(array, fn) {
		var length = array.length;
		var result = [];
		while (length--) {
			result[length] = fn(array[length]);
		}
		return result;
	}

	/**
  * A simple `Array#map`-like wrapper to work with domain name strings or email
  * addresses.
  * @private
  * @param {String} domain The domain name or email address.
  * @param {Function} callback The function that gets called for every
  * character.
  * @returns {Array} A new string of characters returned by the callback
  * function.
  */
	function mapDomain(string, fn) {
		var parts = string.split('@');
		var result = '';
		if (parts.length > 1) {
			// In email addresses, only the domain name should be punycoded. Leave
			// the local part (i.e. everything up to `@`) intact.
			result = parts[0] + '@';
			string = parts[1];
		}
		// Avoid `split(regex)` for IE8 compatibility. See #17.
		string = string.replace(regexSeparators, '\x2E');
		var labels = string.split('.');
		var encoded = map(labels, fn).join('.');
		return result + encoded;
	}

	/**
  * Creates an array containing the numeric code points of each Unicode
  * character in the string. While JavaScript uses UCS-2 internally,
  * this function will convert a pair of surrogate halves (each of which
  * UCS-2 exposes as separate characters) into a single code point,
  * matching UTF-16.
  * @see `punycode.ucs2.encode`
  * @see <https://mathiasbynens.be/notes/javascript-encoding>
  * @memberOf punycode.ucs2
  * @name decode
  * @param {String} string The Unicode input string (UCS-2).
  * @returns {Array} The new array of code points.
  */
	function ucs2decode(string) {
		var output = [],
		    counter = 0,
		    length = string.length,
		    value,
		    extra;
		while (counter < length) {
			value = string.charCodeAt(counter++);
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
				// high surrogate, and there is a next character
				extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) {
					// low surrogate
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
				} else {
					// unmatched surrogate; only append this code unit, in case the next
					// code unit is the high surrogate of a surrogate pair
					output.push(value);
					counter--;
				}
			} else {
				output.push(value);
			}
		}
		return output;
	}

	/**
  * Creates a string based on an array of numeric code points.
  * @see `punycode.ucs2.decode`
  * @memberOf punycode.ucs2
  * @name encode
  * @param {Array} codePoints The array of numeric code points.
  * @returns {String} The new Unicode string (UCS-2).
  */
	function ucs2encode(array) {
		return map(array, function (value) {
			var output = '';
			if (value > 0xFFFF) {
				value -= 0x10000;
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
				value = 0xDC00 | value & 0x3FF;
			}
			output += stringFromCharCode(value);
			return output;
		}).join('');
	}

	/**
  * Converts a basic code point into a digit/integer.
  * @see `digitToBasic()`
  * @private
  * @param {Number} codePoint The basic numeric code point value.
  * @returns {Number} The numeric value of a basic code point (for use in
  * representing integers) in the range `0` to `base - 1`, or `base` if
  * the code point does not represent a value.
  */
	function basicToDigit(codePoint) {
		if (codePoint - 48 < 10) {
			return codePoint - 22;
		}
		if (codePoint - 65 < 26) {
			return codePoint - 65;
		}
		if (codePoint - 97 < 26) {
			return codePoint - 97;
		}
		return base;
	}

	/**
  * Converts a digit/integer into a basic code point.
  * @see `basicToDigit()`
  * @private
  * @param {Number} digit The numeric value of a basic code point.
  * @returns {Number} The basic code point whose value (when used for
  * representing integers) is `digit`, which needs to be in the range
  * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
  * used; else, the lowercase form is used. The behavior is undefined
  * if `flag` is non-zero and `digit` has no uppercase form.
  */
	function digitToBasic(digit, flag) {
		//  0..25 map to ASCII a..z or A..Z
		// 26..35 map to ASCII 0..9
		return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
	}

	/**
  * Bias adaptation function as per section 3.4 of RFC 3492.
  * https://tools.ietf.org/html/rfc3492#section-3.4
  * @private
  */
	function adapt(delta, numPoints, firstTime) {
		var k = 0;
		delta = firstTime ? floor(delta / damp) : delta >> 1;
		delta += floor(delta / numPoints);
		for (; /* no initialization */delta > baseMinusTMin * tMax >> 1; k += base) {
			delta = floor(delta / baseMinusTMin);
		}
		return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
	}

	/**
  * Converts a Punycode string of ASCII-only symbols to a string of Unicode
  * symbols.
  * @memberOf punycode
  * @param {String} input The Punycode string of ASCII-only symbols.
  * @returns {String} The resulting string of Unicode symbols.
  */
	function decode(input) {
		// Don't use UCS-2
		var output = [],
		    inputLength = input.length,
		    out,
		    i = 0,
		    n = initialN,
		    bias = initialBias,
		    basic,
		    j,
		    index,
		    oldi,
		    w,
		    k,
		    digit,
		    t,

		/** Cached calculation results */
		baseMinusT;

		// Handle the basic code points: let `basic` be the number of input code
		// points before the last delimiter, or `0` if there is none, then copy
		// the first basic code points to the output.

		basic = input.lastIndexOf(delimiter);
		if (basic < 0) {
			basic = 0;
		}

		for (j = 0; j < basic; ++j) {
			// if it's not a basic code point
			if (input.charCodeAt(j) >= 0x80) {
				error('not-basic');
			}
			output.push(input.charCodeAt(j));
		}

		// Main decoding loop: start just after the last delimiter if any basic code
		// points were copied; start at the beginning otherwise.

		for (index = basic > 0 ? basic + 1 : 0; index < inputLength;) /* no final expression */{

			// `index` is the index of the next character to be consumed.
			// Decode a generalized variable-length integer into `delta`,
			// which gets added to `i`. The overflow checking is easier
			// if we increase `i` as we go, then subtract off its starting
			// value at the end to obtain `delta`.
			for (oldi = i, w = 1, k = base;; /* no condition */k += base) {

				if (index >= inputLength) {
					error('invalid-input');
				}

				digit = basicToDigit(input.charCodeAt(index++));

				if (digit >= base || digit > floor((maxInt - i) / w)) {
					error('overflow');
				}

				i += digit * w;
				t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;

				if (digit < t) {
					break;
				}

				baseMinusT = base - t;
				if (w > floor(maxInt / baseMinusT)) {
					error('overflow');
				}

				w *= baseMinusT;
			}

			out = output.length + 1;
			bias = adapt(i - oldi, out, oldi == 0);

			// `i` was supposed to wrap around from `out` to `0`,
			// incrementing `n` each time, so we'll fix that now:
			if (floor(i / out) > maxInt - n) {
				error('overflow');
			}

			n += floor(i / out);
			i %= out;

			// Insert `n` at position `i` of the output
			output.splice(i++, 0, n);
		}

		return ucs2encode(output);
	}

	/**
  * Converts a string of Unicode symbols (e.g. a domain name label) to a
  * Punycode string of ASCII-only symbols.
  * @memberOf punycode
  * @param {String} input The string of Unicode symbols.
  * @returns {String} The resulting Punycode string of ASCII-only symbols.
  */
	function encode(input) {
		var n,
		    delta,
		    handledCPCount,
		    basicLength,
		    bias,
		    j,
		    m,
		    q,
		    k,
		    t,
		    currentValue,
		    output = [],

		/** `inputLength` will hold the number of code points in `input`. */
		inputLength,

		/** Cached calculation results */
		handledCPCountPlusOne,
		    baseMinusT,
		    qMinusT;

		// Convert the input in UCS-2 to Unicode
		input = ucs2decode(input);

		// Cache the length
		inputLength = input.length;

		// Initialize the state
		n = initialN;
		delta = 0;
		bias = initialBias;

		// Handle the basic code points
		for (j = 0; j < inputLength; ++j) {
			currentValue = input[j];
			if (currentValue < 0x80) {
				output.push(stringFromCharCode(currentValue));
			}
		}

		handledCPCount = basicLength = output.length;

		// `handledCPCount` is the number of code points that have been handled;
		// `basicLength` is the number of basic code points.

		// Finish the basic string - if it is not empty - with a delimiter
		if (basicLength) {
			output.push(delimiter);
		}

		// Main encoding loop:
		while (handledCPCount < inputLength) {

			// All non-basic code points < n have been handled already. Find the next
			// larger one:
			for (m = maxInt, j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue >= n && currentValue < m) {
					m = currentValue;
				}
			}

			// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
			// but guard against overflow
			handledCPCountPlusOne = handledCPCount + 1;
			if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
				error('overflow');
			}

			delta += (m - n) * handledCPCountPlusOne;
			n = m;

			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];

				if (currentValue < n && ++delta > maxInt) {
					error('overflow');
				}

				if (currentValue == n) {
					// Represent delta as a generalized variable-length integer
					for (q = delta, k = base;; /* no condition */k += base) {
						t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
						if (q < t) {
							break;
						}
						qMinusT = q - t;
						baseMinusT = base - t;
						output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));
						q = floor(qMinusT / baseMinusT);
					}

					output.push(stringFromCharCode(digitToBasic(q, 0)));
					bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
					delta = 0;
					++handledCPCount;
				}
			}

			++delta;
			++n;
		}
		return output.join('');
	}

	/**
  * Converts a Punycode string representing a domain name or an email address
  * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
  * it doesn't matter if you call it on a string that has already been
  * converted to Unicode.
  * @memberOf punycode
  * @param {String} input The Punycoded domain name or email address to
  * convert to Unicode.
  * @returns {String} The Unicode representation of the given Punycode
  * string.
  */
	function toUnicode(input) {
		return mapDomain(input, function (string) {
			return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
		});
	}

	/**
  * Converts a Unicode string representing a domain name or an email address to
  * Punycode. Only the non-ASCII parts of the domain name will be converted,
  * i.e. it doesn't matter if you call it with a domain that's already in
  * ASCII.
  * @memberOf punycode
  * @param {String} input The domain name or email address to convert, as a
  * Unicode string.
  * @returns {String} The Punycode representation of the given domain name or
  * email address.
  */
	function toASCII(input) {
		return mapDomain(input, function (string) {
			return regexNonASCII.test(string) ? 'xn--' + encode(string) : string;
		});
	}

	/*--------------------------------------------------------------------------*/

	/** Define the public API */
	punycode = {
		/**
   * A string representing the current Punycode.js version number.
   * @memberOf punycode
   * @type String
   */
		'version': '1.3.2',
		/**
   * An object of methods to convert from JavaScript's internal character
   * representation (UCS-2) to Unicode code points, and back.
   * @see <https://mathiasbynens.be/notes/javascript-encoding>
   * @memberOf punycode
   * @type Object
   */
		'ucs2': {
			'decode': ucs2decode,
			'encode': ucs2encode
		},
		'decode': decode,
		'encode': encode,
		'toASCII': toASCII,
		'toUnicode': toUnicode
	};

	/** Expose `punycode` */
	// Some AMD build optimizers, like r.js, check for specific condition patterns
	// like the following:
	if (typeof define == 'function' && _typeof(define.amd) == 'object' && define.amd) {
		define('punycode', function () {
			return punycode;
		});
	} else if (freeExports && freeModule) {
		if (module.exports == freeExports) {
			// in Node.js, io.js, or RingoJS v0.8.0+
			freeModule.exports = punycode;
		} else {
			// in Narwhal or RingoJS v0.7.0-
			for (key in punycode) {
				punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
			}
		}
	} else {
		// in Rhino or a web browser
		root.punycode = punycode;
	}
})(undefined);

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],13:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = activate;

var _Syncher = require('service-framework/src/syncher/Syncher');

var _Syncher2 = _interopRequireDefault(_Syncher);

var _urijs = require('urijs');

var _urijs2 = _interopRequireDefault(_urijs);

var _position = require('./position');

var _position2 = _interopRequireDefault(_position);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var LocationHyperty = {
    getCurrentPosition: function getCurrentPosition() {
        return new Promise(function (resolve, reject) {
            return navigator.geolocation.getCurrentPosition(function (position) {
                return resolve(position);
            });
        });
    },
    startPositionBroadcast: function startPositionBroadcast(subscribers) {
        this._syncher.create(this._objectDescURL, subscribers, _position2.default).then(function (reporter) {
            reporter.onSubscription(function (event) {
                return event.accept();
            });
            navigator.geolocation.watchPosition(function (position) {
                reporter.data.value.coords = position.coords;
                reporter.data.value.timestamp = position.timestamp;
            });
        });
    }
};

var LocationHypertyFactory = function LocationHypertyFactory(hypertyURL, bus, config) {
    var uri = new _urijs2.default(hypertyURL);
    LocationHyperty._objectDescURL = 'hyperty-catalogue://' + uri.hostname() + '/.well-known/dataschemas/ContextDataSchema';
    LocationHyperty._syncher = new _Syncher2.default(hypertyURL, bus, config);

    return LocationHyperty;
};

function activate(hypertyURL, bus, config) {
    return {
        name: 'Location Hyperty',
        instance: LocationHypertyFactory(hypertyURL, bus, config)
    };
}

},{"./position":14,"service-framework/src/syncher/Syncher":7,"urijs":11}],14:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = {
    id: "LocationObject",
    type: "object",
    value: {
        coords: {
            latitude: 0,
            longitude: 0,
            altitude: 0,
            accuracy: 0,
            altitudeAccuracy: 0,
            heading: 0,
            speed: 0
        },
        timestamp: 0
    }
};

},{}]},{},[13])(13)
});",
      "sourceCodeClassname": "LocationHyperty",
      "encoding": "base64",
      "signature": ""
    },
    "cguid": 1,
    "type": "Hyperties",
    "version": "0.1",
    "description": "Description of LocationHyperty",
    "objectName": "LocationHyperty",
    "configuration": {},
    "sourcePackageURL": "/sourcePackage",
    "language": "javascript",
    "signature": "",
    "messageSchemas": "",
    "dataObjects": [],
    "accessControlPolicy": "somePolicy"
  },
  "FakeLocationObserverHyperty": {
    "sourcePackage": {
      "sourceCode": "(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.activate = f().default}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Copyright 2016 PT Inovação e Sistemas SA
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Copyright 2016 INESC-ID
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Copyright 2016 QUOBIS NETWORKS SL
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Copyright 2016 ORANGE SA
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Copyright 2016 Deutsche Telekom AG
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Copyright 2016 Apizee
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Licensed under the Apache License, Version 2.0 (the "License");
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * you may not use this file except in compliance with the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * You may obtain a copy of the License at
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *   http://www.apache.org/licenses/LICENSE-2.0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Unless required by applicable law or agreed to in writing, software
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * distributed under the License is distributed on an "AS IS" BASIS,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * See the License for the specific language governing permissions and
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * limitations under the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     **/

var _SyncObject = require('./SyncObject');

var _SyncObject2 = _interopRequireDefault(_SyncObject);

var _DataObjectChild = require('./DataObjectChild');

var _DataObjectChild2 = _interopRequireDefault(_DataObjectChild);

var _utils = require('../utils/utils.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Main extension class for observers and reporters, with common properties and methods.
 * Children management is common for observers and reporters.
 */

var DataObject = function () {
  /* private
  _version: number
   _owner: HypertyURL
  _url: ObjectURL
  _schema: Schema
  _bus: MiniBus
  _status: on | paused
  _syncObj: SyncData
   _children: { id: DataObjectChild }
  _childrenListeners: [MsgListener]
   ----event handlers----
  _onAddChildHandler: (event) => void
  */

  /**
   * @ignore
   * Should not be used directly by Hyperties. It's called by the Syncher create or subscribe method's
   */

  function DataObject(syncher, url, schema, initialStatus, initialData, childrens) {
    _classCallCheck(this, DataObject);

    var _this = this;

    _this._syncher = syncher;
    _this._url = url;
    _this._schema = schema;
    _this._status = initialStatus;
    _this._syncObj = new _SyncObject2.default(initialData);
    _this._childrens = childrens;

    _this._version = 0;
    _this._childId = 0;
    _this._childrenObjects = {};
    _this._childrenListeners = [];

    _this._owner = syncher._owner;
    _this._bus = syncher._bus;
  }

  _createClass(DataObject, [{
    key: '_allocateListeners',
    value: function _allocateListeners() {
      var _this2 = this;

      var _this = this;

      var childBaseURL = _this._url + '/children/';
      if (_this._childrens) {
        _this._childrens.forEach(function (child) {
          var childURL = childBaseURL + child;
          var listener = _this._bus.addListener(childURL, function (msg) {
            //ignore msg sent by himself
            if (msg.from !== _this2._owner) {
              console.log('DataObject-Children-RCV: ', msg);
              switch (msg.type) {
                case 'create':
                  _this._onChildCreate(msg);break;
                case 'delete':
                  console.log(msg);break;
                default:
                  _this._changeChildren(msg);break;
              }
            }
          });

          _this._childrenListeners.push(listener);
        });
      }
    }
  }, {
    key: '_releaseListeners',
    value: function _releaseListeners() {
      var _this = this;

      _this._childrenListeners.forEach(function (listener) {
        listener.remove();
      });

      Object.keys(_this._childrenObjects).forEach(function (key) {
        _this._childrenObjects[key]._releaseListeners();
      });
    }

    /**
     * Object URL of reporter or observer
     * @type {ObjectURL}
     */

  }, {
    key: 'pause',


    /**
     * @ignore
     */
    value: function pause() {
      //TODO: this feature needs more analise
      throw 'Not implemented';
    }

    /**
     * @ignore
     */

  }, {
    key: 'resume',
    value: function resume() {
      //TODO: this feature needs more analise
      throw 'Not implemented';
    }

    /**
     * @ignore
     */

  }, {
    key: 'stop',
    value: function stop() {
      //TODO: should remove the subscription and send message unsubscribe?
      throw 'Not implemented';
    }

    /**
     * Create and add a children to the subscription group.
     * @param {String} resource - Resource name, one of the items in the schema.properties.scheme of the parent object.
     * @param {JSON} initialData - Initial data of the child
     * @return {Promise<DataObjectChild>} - Return Promise to a new Children.
     */

  }, {
    key: 'addChild',
    value: function addChild(resource, initialData) {
      var _this = this;

      //create new child unique ID, based on hypertyURL
      _this._childId++;
      var msgChildId = _this._owner + '#' + _this._childId;
      var msgChildPath = _this._url + '/children/' + resource;

      var requestMsg = {
        type: 'create', from: _this._owner, to: msgChildPath,
        body: { resource: msgChildId, value: initialData }
      };

      //returns promise, in the future, the API may change to asynchronous call
      return new Promise(function (resolve) {
        var msgId = _this._bus.postMessage(requestMsg);

        console.log('create-reporter-child( ' + _this._owner + ' ): ', requestMsg);
        var newChild = new _DataObjectChild2.default(_this, msgChildId, initialData, _this._owner, msgId);
        newChild.onChange(function (event) {
          _this._onChange(event, { path: msgChildPath, childId: msgChildId });
        });

        _this._childrenObjects[msgChildId] = newChild;

        resolve(newChild);
      });
    }

    /**
     * Setup the callback to process create and delete childrens
     * @param {function(event: MsgEvent)} callback
     */

  }, {
    key: 'onAddChild',
    value: function onAddChild(callback) {
      this._onAddChildrenHandler = callback;
    }
  }, {
    key: '_onChildCreate',
    value: function _onChildCreate(msg) {
      var _this = this;
      var msgChildId = msg.body.resource;

      console.log('create-observer-child( ' + _this._owner + ' ): ', msg);
      var newChild = new _DataObjectChild2.default(_this, msgChildId, msg.body.value);
      _this._childrenObjects[msgChildId] = newChild;

      setTimeout(function () {
        _this._bus.postMessage({
          id: msg.id, type: 'response', from: msg.to, to: msg.from,
          body: { code: 200, source: _this._owner }
        });
      });

      var event = {
        type: msg.type,
        from: msg.from,
        url: msg.to,
        value: msg.body.value,
        childId: msgChildId,
        identity: msg.body.identity
      };

      if (_this._onAddChildrenHandler) {
        console.log('ADD-CHILDREN-EVENT: ', event);
        _this._onAddChildrenHandler(event);
      }
    }

    //send delta messages to subscriptions

  }, {
    key: '_onChange',
    value: function _onChange(event, childInfo) {
      var _this = this;

      _this._version++;

      if (_this._status === 'on') {
        var changeMsg = {
          type: 'update', from: _this._url, to: _this._url + '/changes',
          body: { version: _this._version, source: _this._owner, attribute: event.field }
        };

        if (event.oType === _SyncObject.ObjectType.OBJECT) {
          if (event.cType !== _SyncObject.ChangeType.REMOVE) {
            changeMsg.body.value = event.data;
          }
        } else {
          changeMsg.body.attributeType = event.oType;
          changeMsg.body.value = event.data;
          if (event.cType !== _SyncObject.ChangeType.UPDATE) {
            changeMsg.body.operation = event.cType;
          }
        }

        //childInfo must have (path, childId)
        if (childInfo) {
          changeMsg.to = childInfo.path;
          changeMsg.body.resource = childInfo.childId;
        }

        _this._bus.postMessage(changeMsg);
      }
    }

    //receive and process delta messages

  }, {
    key: '_changeObject',
    value: function _changeObject(syncObj, msg) {
      var _this = this;

      //TODO: update version ?
      //how to handle an incorrect version ? Example: receive a version 3 when the observer is in version 1, where is the version 2 ?
      //will we need to confirm the reception ?
      if (_this._version + 1 === msg.body.version) {
        _this._version++;
        var path = msg.body.attribute;
        var value = (0, _utils.deepClone)(msg.body.value);
        var findResult = syncObj.findBefore(path);

        if (msg.body.attributeType === _SyncObject.ObjectType.ARRAY) {
          if (msg.body.operation === _SyncObject.ChangeType.ADD) {
            var arr = findResult.obj;
            var index = findResult.last;
            Array.prototype.splice.apply(arr, [index, 0].concat(value));
          } else if (msg.body.operation === _SyncObject.ChangeType.REMOVE) {
            var _arr = findResult.obj;
            var _index = findResult.last;
            _arr.splice(_index, value);
          } else {
            findResult.obj[findResult.last] = value; // UPDATE
          }
        } else {
            if (msg.body.value) {
              findResult.obj[findResult.last] = value; // UPDATE or ADD
            } else {
                delete findResult.obj[findResult.last]; // REMOVE
              }
          }
      } else {
          //TODO: how to handle unsynchronized versions?
          console.log('UNSYNCHRONIZED VERSION: (data => ' + _this._version + ', msg => ' + msg.body.version + ')');
        }
    }
  }, {
    key: '_changeChildren',
    value: function _changeChildren(msg) {
      var _this = this;
      console.log('Change children: ', _this._owner, msg);

      var childId = msg.body.resource;
      var children = _this._childrenObjects[childId];

      if (children) {
        _this._changeObject(children._syncObj, msg);
      } else {
        console.log('No children found for: ', childId);
      }
    }
  }, {
    key: 'url',
    get: function get() {
      return this._url;
    }

    /**
     * Object schema URL (this field is not yet stable, and is subsject to change)
     * @type {SchemaURL}
     */

  }, {
    key: 'schema',
    get: function get() {
      return this._schema;
    }

    /**
     * Status of the reporter or observer connection (this field is not yet stable, and is subsject to change)
     * @type {Status} - Enum of: on | paused
     */

  }, {
    key: 'status',
    get: function get() {
      return this._status;
    }

    /**
     * Data structure to be synchronized.
     * @type {JSON} - JSON structure that should follow the defined schema, if any.
     */

  }, {
    key: 'data',
    get: function get() {
      return this._syncObj.data;
    }

    /**
     * All created children's since the subscription, doesn't contain all children's since reporter creation.
     * @type {Object<ChildId, DataObjectChild>}
     */

  }, {
    key: 'childrens',
    get: function get() {
      return this._childrenObjects;
    }
  }]);

  return DataObject;
}();

exports.default = DataObject;

},{"../utils/utils.js":8,"./DataObjectChild":2,"./SyncObject":6}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Copyright 2016 PT Inovação e Sistemas SA
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Copyright 2016 INESC-ID
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Copyright 2016 QUOBIS NETWORKS SL
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Copyright 2016 ORANGE SA
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Copyright 2016 Deutsche Telekom AG
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Copyright 2016 Apizee
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Licensed under the Apache License, Version 2.0 (the "License");
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * you may not use this file except in compliance with the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * You may obtain a copy of the License at
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *   http://www.apache.org/licenses/LICENSE-2.0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Unless required by applicable law or agreed to in writing, software
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * distributed under the License is distributed on an "AS IS" BASIS,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * See the License for the specific language governing permissions and
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * limitations under the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     **/

var _SyncObject = require('./SyncObject');

var _SyncObject2 = _interopRequireDefault(_SyncObject);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * The class returned from the DataObject addChildren call or from onAddChildren if remotely created.
 * Children object synchronization is a a fast forward mechanism, no need for direct subscriptions, it uses the already authorized subscription from the parent DataObject.
 */

var DataObjectChild /* implements SyncStatus */ = function () {
  /* private
   ----event handlers----
  _onResponseHandler: (event) => void
  */

  /**
   * @ignore
   * Should not be used directly by Hyperties. It's called by the DataObject.addChildren
   */

  function DataObjectChild(parent, childId, initialData, owner, msgId) {
    _classCallCheck(this, DataObjectChild);

    var _this = this;

    _this._parent = parent;
    _this._childId = childId;
    _this._owner = owner;
    _this._msgId = msgId;

    _this._syncObj = new _SyncObject2.default(initialData);

    _this._bus = parent._bus;
    _this._allocateListeners();
  }

  _createClass(DataObjectChild, [{
    key: '_allocateListeners',
    value: function _allocateListeners() {
      var _this = this;

      //this is only needed for children reporters
      if (_this._owner) {
        _this._listener = _this._bus.addListener(_this._owner, function (msg) {
          if (msg.type === 'response' && msg.id === _this._msgId) {
            console.log('DataObjectChild.onResponse:', msg);
            _this._onResponse(msg);
          }
        });
      }
    }
  }, {
    key: '_releaseListeners',
    value: function _releaseListeners() {
      var _this = this;

      if (_this._listener) {
        _this._listener.remove();
      }
    }

    /**
     * Release and delete object data
     */

  }, {
    key: 'delete',
    value: function _delete() {
      var _this = this;

      delete _this._parent._children[_this._childId];

      _this._releaseListeners();

      //TODO: send delete message ?
    }

    /**
     * Children ID generated on addChildren. Unique identifier
     * @type {URL} - URL of the format <HypertyURL>#<numeric-sequence>
     */

  }, {
    key: 'onChange',


    /**
     * Register the change listeners sent by the reporter child
     * @param {function(event: MsgEvent)} callback
     */
    value: function onChange(callback) {
      this._syncObj.observe(function (event) {
        callback(event);
      });
    }

    /**
     * Setup the callback to process response notifications of the creates
     * @param {function(event: MsgEvent)} callback
     */

  }, {
    key: 'onResponse',
    value: function onResponse(callback) {
      this._onResponseHandler = callback;
    }
  }, {
    key: '_onResponse',
    value: function _onResponse(msg) {
      var _this = this;

      var event = {
        type: msg.type,
        url: msg.body.source,
        code: msg.body.code
      };

      if (_this._onResponseHandler) {
        _this._onResponseHandler(event);
      }
    }
  }, {
    key: 'childId',
    get: function get() {
      return this._childId;
    }

    /**
     * Data Structure to be synchronized.
     * @type {JSON} - JSON structure that should follow the defined schema, if any.
     */

  }, {
    key: 'data',
    get: function get() {
      return this._syncObj.data;
    }
  }]);

  return DataObjectChild;
}();

exports.default = DataObjectChild;

},{"./SyncObject":6}],3:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _DataObject2 = require('./DataObject');

var _DataObject3 = _interopRequireDefault(_DataObject2);

var _DataObjectChild = require('./DataObjectChild');

var _DataObjectChild2 = _interopRequireDefault(_DataObjectChild);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Copyright 2016 PT Inovação e Sistemas SA
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Copyright 2016 INESC-ID
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Copyright 2016 QUOBIS NETWORKS SL
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Copyright 2016 ORANGE SA
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Copyright 2016 Deutsche Telekom AG
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Copyright 2016 Apizee
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Licensed under the Apache License, Version 2.0 (the "License");
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * you may not use this file except in compliance with the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * You may obtain a copy of the License at
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *   http://www.apache.org/licenses/LICENSE-2.0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Unless required by applicable law or agreed to in writing, software
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * distributed under the License is distributed on an "AS IS" BASIS,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * See the License for the specific language governing permissions and
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * limitations under the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               **/

var FilterType = { ANY: 'any', START: 'start', EXACT: 'exact' };

/**
 * The class returned from the Syncher subscribe call.
 * To be used as an observation point from a DataObjectReporter change.
 */

var DataObjectObserver = function (_DataObject) {
  _inherits(DataObjectObserver, _DataObject);

  /* private
  _changeListener: MsgListener
   ----event handlers----
  _filters: {<filter>: {type: <start, exact>, callback: <function>} }
  */

  /**
   * @ignore
   * Should not be used directly by Hyperties. It's called by the Syncher.subscribe method
   */

  function DataObjectObserver(syncher, url, schema, initialStatus, initialData, childrens, initialVersion) {
    _classCallCheck(this, DataObjectObserver);

    var _this2 = _possibleConstructorReturn(this, Object.getPrototypeOf(DataObjectObserver).call(this, syncher, url, schema, initialStatus, initialData.data, childrens));

    var _this = _this2;

    _this._version = initialVersion;
    _this._filters = {};

    _this._syncObj.observe(function (event) {
      _this._onFilter(event);
    });

    //setup childrens data from subscription
    Object.keys(initialData.childrens).forEach(function (childId) {
      var childData = initialData.childrens[childId];
      _this._childrenObjects[childId] = new _DataObjectChild2.default(_this, childId, childData);
    });

    _this._allocateListeners();
    return _this2;
  }

  _createClass(DataObjectObserver, [{
    key: '_allocateListeners',
    value: function _allocateListeners() {
      _get(Object.getPrototypeOf(DataObjectObserver.prototype), '_allocateListeners', this).call(this);
      var _this = this;

      _this._changeListener = _this._bus.addListener(_this._url + '/changes', function (msg) {
        if (msg.type === 'update') {
          console.log('DataObjectObserver-' + _this._url + '-RCV: ', msg);
          _this._changeObject(_this._syncObj, msg);
        }
      });
    }
  }, {
    key: '_releaseListeners',
    value: function _releaseListeners() {
      _get(Object.getPrototypeOf(DataObjectObserver.prototype), '_releaseListeners', this).call(this);
      var _this = this;

      _this._changeListener.remove();
    }

    /**
     * Release and delete object data
     */

  }, {
    key: 'delete',
    value: function _delete() {
      var _this = this;

      _this._releaseListeners();
      delete _this._syncher._observers[_this._url];
    }

    /**
     * Release and delete object data
     */

  }, {
    key: 'unsubscribe',
    value: function unsubscribe() {
      var _this = this;

      var unSubscribeMsg = {
        type: 'unsubscribe', from: _this._owner, to: _this._syncher._subURL,
        body: { resource: _this._url }
      };

      _this._bus.postMessage(unSubscribeMsg, function (reply) {
        console.log('DataObjectObserver-UNSUBSCRIBE: ', reply);
        if (reply.body.code === 200) {
          _this._releaseListeners();
          delete _this._syncher._observers[_this._url];
        }
      });
    }

    /**
     * Register the change listeners sent by the reporter
     * @param {string} filter - Filter that identifies the field (separeted dot path). Accepts * at the end for a more unrestricted filtering.
     * @param {function(event: MsgEvent)} callback
     */

  }, {
    key: 'onChange',
    value: function onChange(filter, callback) {
      var key = filter;
      var filterObj = {
        type: FilterType.EXACT,
        callback: callback
      };

      var idx = filter.indexOf('*');
      if (idx === filter.length - 1) {
        if (idx === 0) {
          filterObj.type = FilterType.ANY;
        } else {
          filterObj.type = FilterType.START;
          key = filter.substr(0, filter.length - 1);
        }
      }

      this._filters[key] = filterObj;
    }
  }, {
    key: '_onFilter',
    value: function _onFilter(event) {
      var _this = this;

      Object.keys(_this._filters).forEach(function (key) {
        var filter = _this._filters[key];
        if (filter.type === FilterType.ANY) {
          //match anything
          filter.callback(event);
        } else if (filter.type === FilterType.START) {
          //if starts with filter...
          if (event.field.indexOf(key) === 0) {
            filter.callback(event);
          }
        } else if (filter.type === FilterType.EXACT) {
          //exact match
          if (event.field === key) {
            filter.callback(event);
          }
        }
      });
    }
  }]);

  return DataObjectObserver;
}(_DataObject3.default /* implements SyncStatus */);

exports.default = DataObjectObserver;

},{"./DataObject":1,"./DataObjectChild":2}],4:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _DataObject2 = require('./DataObject');

var _DataObject3 = _interopRequireDefault(_DataObject2);

var _utils = require('../utils/utils.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Copyright 2016 PT Inovação e Sistemas SA
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Copyright 2016 INESC-ID
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Copyright 2016 QUOBIS NETWORKS SL
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Copyright 2016 ORANGE SA
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Copyright 2016 Deutsche Telekom AG
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Copyright 2016 Apizee
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Licensed under the Apache License, Version 2.0 (the "License");
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * you may not use this file except in compliance with the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * You may obtain a copy of the License at
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *   http://www.apache.org/licenses/LICENSE-2.0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Unless required by applicable law or agreed to in writing, software
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * distributed under the License is distributed on an "AS IS" BASIS,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * See the License for the specific language governing permissions and
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * limitations under the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               **/

/**
 * The class returned from the Syncher create call.
 * To be used as a reporter point, changes will be submited to DataObjectObserver instances.
 */

var DataObjectReporter = function (_DataObject) {
  _inherits(DataObjectReporter, _DataObject);

  /* private
  _subscriptions: <hypertyUrl: { status: string } }>
   ----event handlers----
  _onSubscriptionHandler: (event) => void
  _onResponseHandler: (event) => void
  */

  /**
   * @ignore
   * Should not be used directly by Hyperties. It's called by the Syncher.create method
   */

  function DataObjectReporter(syncher, url, schema, initialStatus, initialData, childrens) {
    _classCallCheck(this, DataObjectReporter);

    var _this2 = _possibleConstructorReturn(this, Object.getPrototypeOf(DataObjectReporter).call(this, syncher, url, schema, initialStatus, initialData, childrens));

    var _this = _this2;

    _this._subscriptions = {};

    _this._syncObj.observe(function (event) {
      console.log('DataObjectReporter-' + url + '-SEND: ', event);
      _this._onChange(event);
    });

    _this._allocateListeners();
    return _this2;
  }

  _createClass(DataObjectReporter, [{
    key: '_allocateListeners',
    value: function _allocateListeners() {
      _get(Object.getPrototypeOf(DataObjectReporter.prototype), '_allocateListeners', this).call(this);
      var _this = this;

      _this._responseListener = _this._bus.addListener(_this._url, function (msg) {
        if (msg.type === 'response') {
          _this._onResponse(msg);
        }
      });
    }
  }, {
    key: '_releaseListeners',
    value: function _releaseListeners() {
      _get(Object.getPrototypeOf(DataObjectReporter.prototype), '_releaseListeners', this).call(this);
      var _this = this;

      _this._responseListener.remove();
    }
  }, {
    key: 'inviteObservers',
    value: function inviteObservers(observers) {
      var _this = this;

      var inviteMsg = {
        type: 'create', from: _this._syncher._owner, to: _this._syncher._subURL,
        body: { resource: _this._url, schema: _this._schema, value: _this._syncObj.data, authorise: observers }
      };

      _this._bus.postMessage(inviteMsg);
    }

    /**
     * Release and delete object data
     */

  }, {
    key: 'delete',
    value: function _delete() {
      var _this = this;

      var deleteMsg = {
        type: 'delete', from: _this._owner, to: _this._syncher._subURL,
        body: { resource: _this._url }
      };

      _this._bus.postMessage(deleteMsg, function (reply) {
        console.log('DataObjectReporter-DELETE: ', reply);
        if (reply.body.code === 200) {
          _this._releaseListeners();
          delete _this._syncher._reporters[_this._url];
        }
      });
    }

    /**
     * Subscriptions requested and accepted to this reporter
     * @type {Object<HypertyURL, SyncSubscription>}
     */

  }, {
    key: 'onSubscription',


    /**
     * Setup the callback to process subscribe and unsubscribe notifications
     * @param {function(event: MsgEvent)} callback
     */
    value: function onSubscription(callback) {
      this._onSubscriptionHandler = callback;
    }

    /**
     * Setup the callback to process response notifications of the create's
     * @param {function(event: MsgEvent)} callback
     */

  }, {
    key: 'onResponse',
    value: function onResponse(callback) {
      this._onResponseHandler = callback;
    }
  }, {
    key: '_onForward',
    value: function _onForward(msg) {
      var _this = this;

      console.log('DataObjectReporter-RCV: ', msg);
      switch (msg.body.type) {
        case 'subscribe':
          _this._onSubscribe(msg);break;
        case 'unsubscribe':
          _this._onUnSubscribe(msg);break;
      }
    }
  }, {
    key: '_onSubscribe',
    value: function _onSubscribe(msg) {
      var _this = this;
      var hypertyUrl = msg.body.from;

      var event = {
        type: msg.body.type,
        url: hypertyUrl,

        accept: function accept() {
          //create new subscription
          var sub = { url: hypertyUrl, status: 'on' };
          _this._subscriptions[hypertyUrl] = sub;

          //process and send childrens data
          var childrenValues = {};
          Object.keys(_this._childrenObjects).forEach(function (childId) {
            var childData = _this._childrenObjects[childId].data;
            childrenValues[childId] = (0, _utils.deepClone)(childData);
          });

          //send ok response message
          _this._bus.postMessage({
            id: msg.id, type: 'response', from: msg.to, to: msg.from,
            body: { code: 200, schema: _this._schema, version: _this._version, value: { data: (0, _utils.deepClone)(_this.data), childrens: childrenValues } }
          });

          return sub;
        },

        reject: function reject(reason) {
          //send reject response message
          _this._bus.postMessage({
            id: msg.id, type: 'response', from: msg.to, to: msg.from,
            body: { code: 403, desc: reason }
          });
        }
      };

      if (_this._onSubscriptionHandler) {
        console.log('SUBSCRIPTION-EVENT: ', event);
        _this._onSubscriptionHandler(event);
      }
    }
  }, {
    key: '_onUnSubscribe',
    value: function _onUnSubscribe(msg) {
      var _this = this;
      var hypertyUrl = msg.body.from;

      var sub = _this._subscriptions[hypertyUrl];
      delete _this._subscriptions[hypertyUrl];

      var event = {
        type: msg.body.type,
        url: hypertyUrl,
        object: sub
      };

      if (_this._onSubscriptionHandler) {
        console.log('UN-SUBSCRIPTION-EVENT: ', event);
        _this._onSubscriptionHandler(event);
      }
    }
  }, {
    key: '_onResponse',
    value: function _onResponse(msg) {
      var _this = this;

      var event = {
        type: msg.type,
        url: msg.from,
        code: msg.body.code
      };

      if (_this._onResponseHandler) {
        console.log('RESPONSE-EVENT: ', event);
        _this._onResponseHandler(event);
      }
    }
  }, {
    key: 'subscriptions',
    get: function get() {
      return this._subscriptions;
    }
  }]);

  return DataObjectReporter;
}(_DataObject3.default /* implements SyncStatus */);

exports.default = DataObjectReporter;

},{"../utils/utils.js":8,"./DataObject":1}],5:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/

/**
 * @access private
 */

var DataProvisional = function () {
  /* private
  _childrenListeners: [MsgListener]
  _listener: MsgListener
   _changes: []
  */

  function DataProvisional(owner, url, bus, children) {
    _classCallCheck(this, DataProvisional);

    var _this = this;

    _this._owner = owner;
    _this._url = url;
    _this._bus = bus;
    _this._children = children;

    _this._changes = [];
    _this._allocateListeners();
  }

  _createClass(DataProvisional, [{
    key: '_allocateListeners',
    value: function _allocateListeners() {
      var _this = this;

      _this._listener = _this._bus.addListener(_this._url, function (msg) {
        console.log('DataProvisional-' + _this._url + '-RCV: ', msg);
        _this._changes.push(msg);
      });

      /*
      _this._childrenListeners = [];
      if (_this._children) {
        let childBaseURL = url + '/children/';
        _this._children.forEach((child) => {
          let childURL = childBaseURL + child;
          let listener = _this._bus.addListener(childURL, (msg) => {
            //ignore msg sent by himself
            if (msg.from !== owner) {
              console.log(msg);
            }
          });
           _this._childrenListeners.push(listener);
        });
      }*/
    }
  }, {
    key: '_releaseListeners',
    value: function _releaseListeners() {
      var _this = this;

      _this._listener.remove();

      /*_this._childrenListeners.forEach((listener) => {
        listener.remove();
      });*/
    }
  }, {
    key: 'apply',
    value: function apply(observer) {
      var _this = this;
      _this._changes.forEach(function (change) {
        observer._changeObject(observer._syncObj, change);
      });
    }
  }, {
    key: 'children',
    get: function get() {
      return this._children;
    }
  }]);

  return DataProvisional;
}();

exports.default = DataProvisional;

},{}],6:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ObjectType = exports.ChangeType = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Copyright 2016 PT Inovação e Sistemas SA
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Copyright 2016 INESC-ID
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Copyright 2016 QUOBIS NETWORKS SL
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Copyright 2016 ORANGE SA
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Copyright 2016 Deutsche Telekom AG
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Copyright 2016 Apizee
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Licensed under the Apache License, Version 2.0 (the "License");
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * you may not use this file except in compliance with the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * You may obtain a copy of the License at
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *   http://www.apache.org/licenses/LICENSE-2.0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Unless required by applicable law or agreed to in writing, software
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * distributed under the License is distributed on an "AS IS" BASIS,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * See the License for the specific language governing permissions and
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * limitations under the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     **/

var _utils = require('../utils/utils.js');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * @access private
 */

var SyncObject = function () {
  /* private
    _data: any;
    _observers: ((event: ChangeEvent) => void)[]
  */

  function SyncObject(initialData) {
    _classCallCheck(this, SyncObject);

    var _this = this;

    _this._observers = [];
    _this._filters = {};

    if (initialData) {
      _this._data = (0, _utils.deepClone)(initialData);
    } else {
      _this._data = {};
    }

    _this._internalObserve(new Path(), _this._data);
  }

  _createClass(SyncObject, [{
    key: 'observe',
    value: function observe(callback) {
      this._observers.push(callback);
    }
  }, {
    key: 'find',
    value: function find(path) {
      var list = path.split('.');

      return this._findWithSplit(list);
    }
  }, {
    key: 'findBefore',
    value: function findBefore(path) {
      var result = {};
      var list = path.split('.');
      result.last = list.pop();
      result.obj = this._findWithSplit(list);

      return result;
    }
  }, {
    key: '_findWithSplit',
    value: function _findWithSplit(list) {
      var obj = this._data;
      list.forEach(function (value) {
        obj = obj[value];
      });

      return obj;
    }
  }, {
    key: '_fireEvent',
    value: function _fireEvent(event) {
      this._observers.forEach(function (callback) {
        callback(event);
      });
    }
  }, {
    key: '_isObservable',
    value: function _isObservable(obj) {
      if (obj.constructor === Object || obj.constructor === Array) {
        return true;
      }

      return false;
    }
  }, {
    key: '_internalObserve',
    value: function _internalObserve(path, obj) {
      var _this = this;

      if (_this._isObservable(obj)) {
        var handler = function handler(changes) {
          _this._onChanges(path, changes);
        };

        if (obj.constructor === Object) {
          Object.observe(obj, handler);
          for (var prop in obj) {
            if (_this._isObservable(obj[prop])) {
              _this._internalObserve(path.new(prop), obj[prop]);
            }
          }
        } else if (obj.constructor === Array) {
          Array.observe(obj, handler);
          for (var _prop in obj) {
            if (_this._isObservable(obj[_prop])) {
              var np = path.new(new ArrayIndex(obj[_prop], _prop));
              _this._internalObserve(np, obj[_prop]);
            }
          }
        }
      }
    }
  }, {
    key: '_onChanges',
    value: function _onChanges(path, changes) {
      var _this2 = this;

      for (var i in changes) {
        var obj = changes[i].object;
        var objType = void 0;

        if (obj.constructor === Object) {
          objType = ObjectType.OBJECT;
        }

        if (obj.constructor === Array) {
          objType = ObjectType.ARRAY;
        }

        if (changes[i].type === 'splice') {
          (function () {
            var idx = changes[i].index;
            var field = path.new('' + idx);
            var fieldString = field.toString();

            var removeSize = changes[i].removed.length;
            if (removeSize !== 0) {
              var removeValues = changes[i].removed;
              removeValues.forEach(function (value, index) {
                if (_this2._isObservable(value)) {
                  path.removeIndex(idx + index);
                }
              });

              _this2._fireEvent({
                cType: ChangeType.REMOVE,
                oType: objType,
                field: fieldString,
                data: removeSize
              });
            }

            var addSize = changes[i].addedCount;
            if (addSize !== 0) {
              var addValues = obj.slice(idx, idx + addSize);
              addValues.forEach(function (value, index) {
                if (_this2._isObservable(value)) {
                  var np = path.new(new ArrayIndex(value, idx + index));
                  _this2._internalObserve(np, value);
                }
              });

              _this2._fireEvent({
                cType: ChangeType.ADD,
                oType: objType,
                field: fieldString,
                data: (0, _utils.deepClone)(addValues)
              });
            }

            //re-define paths...
            if (idx !== obj.length - 1) {
              path.reIndexFrom(obj);
            }
          })();
        } else {
          var _field = path.new(changes[i].name);
          var _fieldString = _field.toString();

          if (_fieldString.indexOf('Symbol') !== -1) {
            //hack for PhantomJS2
            //console.log('SYMBOL: ', changes[i]);
            continue;
          }

          //let oldValue = changes[i].oldValue;
          var newValue = obj[changes[i].name];
          if (changes[i].type === 'update') {
            this._fireEvent({
              cType: ChangeType.UPDATE,
              oType: objType,
              field: _fieldString,
              data: (0, _utils.deepClone)(newValue)
            });
          }

          if (changes[i].type === 'add') {
            this._internalObserve(_field, newValue);
            this._fireEvent({
              cType: ChangeType.ADD,
              oType: objType,
              field: _fieldString,
              data: (0, _utils.deepClone)(newValue)
            });
          }

          if (changes[i].type === 'delete') {
            this._fireEvent({
              cType: ChangeType.REMOVE,
              oType: objType,
              field: _fieldString
            });
          }
        }
      }
    }
  }, {
    key: 'data',
    get: function get() {
      return this._data;
    }
  }]);

  return SyncObject;
}();

//dynamic path for Array index...


var Path = function () {
  function Path() {
    _classCallCheck(this, Path);

    this._path = [];
    this._observables = {}; //<index:ArrayIndex>
  }

  _createClass(Path, [{
    key: 'removeIndex',
    value: function removeIndex(idx) {
      //console.log('REMOVE-PATH ' + idx);
      delete this._observables[idx];
    }
  }, {
    key: 'reIndexFrom',
    value: function reIndexFrom(array) {
      var _this3 = this;

      Object.keys(this._observables).forEach(function (key) {
        var arrayIndex = _this3._observables[key];
        var idx = array.indexOf(arrayIndex.obj);
        if (arrayIndex.idx != idx) {
          //console.log('RE-INDEX: ' + key + '->' + idx);
          arrayIndex.idx = idx;
          delete _this3._observables[key];
          _this3._observables[idx] = arrayIndex;
        }
      });
    }
  }, {
    key: 'new',
    value: function _new(idx) {
      if (idx.constructor == ArrayIndex) {
        //console.log('PATH-OBSERV: ', idx);
        this._observables[idx.idx] = idx;
      }

      var nPath = this.clone();
      nPath._path.push(idx);

      return nPath;
    }
  }, {
    key: 'clone',
    value: function clone() {
      var nPath = new Path();
      this._path.forEach(function (value) {
        nPath._path.push(value);
      });

      return nPath;
    }
  }, {
    key: 'toString',
    value: function toString() {
      //TODO: optimize!!
      var str = '';
      this._path.forEach(function (value, index) {
        if (index === 0) {
          str = value.toString();
        } else {
          str += '.' + value.toString();
        }
      });

      return str;
    }
  }]);

  return Path;
}();

var ArrayIndex = function () {
  function ArrayIndex(obj, idx) {
    _classCallCheck(this, ArrayIndex);

    this.obj = obj;
    this.idx = idx;
  }

  _createClass(ArrayIndex, [{
    key: 'toString',
    value: function toString() {
      return this.idx.toString();
    }
  }]);

  return ArrayIndex;
}();

var ChangeType = exports.ChangeType = { UPDATE: 'update', ADD: 'add', REMOVE: 'remove' };
var ObjectType = exports.ObjectType = { OBJECT: 'object', ARRAY: 'array' };
exports.default = SyncObject;

},{"../utils/utils.js":8}],7:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Copyright 2016 PT Inovação e Sistemas SA
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Copyright 2016 INESC-ID
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Copyright 2016 QUOBIS NETWORKS SL
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Copyright 2016 ORANGE SA
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Copyright 2016 Deutsche Telekom AG
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Copyright 2016 Apizee
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Licensed under the Apache License, Version 2.0 (the "License");
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * you may not use this file except in compliance with the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * You may obtain a copy of the License at
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *   http://www.apache.org/licenses/LICENSE-2.0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Unless required by applicable law or agreed to in writing, software
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * distributed under the License is distributed on an "AS IS" BASIS,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * See the License for the specific language governing permissions and
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * limitations under the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     **/

var _DataObjectReporter = require('./DataObjectReporter');

var _DataObjectReporter2 = _interopRequireDefault(_DataObjectReporter);

var _DataObjectObserver = require('./DataObjectObserver');

var _DataObjectObserver2 = _interopRequireDefault(_DataObjectObserver);

var _DataProvisional = require('./DataProvisional');

var _DataProvisional2 = _interopRequireDefault(_DataProvisional);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * The main class for the syncher package.
 * The Syncher is a singleton class per Hyperty/URL and it is the owner of all created Data Sync Objects according to the Reporter - Observer pattern.
 * Main functionality is to create reporters and to subscribe to existing ones.
 */

var Syncher = function () {
  /* private
  _owner: URL
  _bus: MiniBus
   _subURL: URL
   _reporters: <url: DataObjectReporter>
  _observers: <url: DataObjectObserver>
  _provisionals: <url: DataProvisional>
   ----event handlers----
  _onNotificationHandler: (event) => void
  */

  /**
   * Constructor that should be used by the Hyperty owner
   * @param {HypertyURL} owner - Hyperty URL owner. An URL allocated by the runtime that uniquely identifies the Hyperty.
   * @param {MiniBus} bus - An instance of the MiniBus provided in the sandbox. When an object (Reporter or Observed) is created, the SyncherManager will add a listener in the MiniBus to receive/send Messages of that object.
   * @param {JSON} config - Configuration data. The only required field for now is the runtimeURL.
   */

  function Syncher(owner, bus, config) {
    _classCallCheck(this, Syncher);

    var _this = this;

    _this._owner = owner;
    _this._bus = bus;

    _this._subURL = config.runtimeURL + '/sm';

    _this._reporters = {};
    _this._observers = {};
    _this._provisionals = {};

    bus.addListener(owner, function (msg) {
      //ignore msg sent by himself
      if (msg.from !== owner) {
        console.log('Syncher-RCV: ', msg);
        switch (msg.type) {
          case 'forward':
            _this._onForward(msg);break;
          case 'create':
            _this._onRemoteCreate(msg);break;
          case 'delete':
            _this._onRemoteDelete(msg);break;
        }
      }
    });
  }

  /**
   * The owner of the Syncher and all created reporters.
   * @type {HypertyURL}
   */


  _createClass(Syncher, [{
    key: 'create',


    /**
     * Request a DataObjectReporter creation. The URL will be be requested by the allocation mechanism.
     * @param  {SchemaURL} schema - URL of the object descriptor
     * @param  {HypertyURL[]} observers - List of hyperties that are pre-authorized for subscription
     * @param  {JSON} initialData - Initial data of the reporter
     * @return {Promise<DataObjectReporter>} Return Promise to a new Reporter. The reporter can be accepted or rejected by the PEP
     */
    value: function create(schema, observers, initialData) {
      var _this = this;

      initialData.reporter = _this._owner;
      initialData.schema = schema;

      var requestMsg = {
        type: 'create', from: _this._owner, to: _this._subURL,
        body: { schema: schema, value: initialData, authorise: observers }
      };

      return new Promise(function (resolve, reject) {
        //request create to the Allocation system? Can be rejected by the PolicyEngine.
        _this._bus.postMessage(requestMsg, function (reply) {
          console.log('create-response: ', reply);
          if (reply.body.code === 200) {
            var objURL = reply.body.resource;

            //reporter creation accepted
            var newObj = new _DataObjectReporter2.default(_this, objURL, schema, 'on', initialData, reply.body.childrenResources);
            _this._reporters[objURL] = newObj;

            resolve(newObj);
          } else {
            //reporter creation rejected
            reject(reply.body.desc);
          }
        });
      });
    }

    /**
     * Request a subscription to an existent object.
     * @param {SchemaURL} schema - URL of the object descriptor
     * @param {ObjectURL} objURL - Address of the existent reporter object
     * @return {Promise<DataObjectObserver>} Return Promise to a new observer.
     */

  }, {
    key: 'subscribe',
    value: function subscribe(schema, objURL) {
      var _this = this;

      //TODO: validate if subscription already exists ?
      var subscribeMsg = {
        type: 'subscribe', from: _this._owner, to: _this._subURL,
        body: { schema: schema, resource: objURL }
      };

      return new Promise(function (resolve, reject) {
        //request subscription
        _this._bus.postMessage(subscribeMsg, function (reply) {
          console.log('subscribe-response: ', reply);
          var newProvisional = _this._provisionals[objURL];
          delete _this._provisionals[objURL];
          if (newProvisional) newProvisional._releaseListeners();

          if (reply.body.code < 200) {
            newProvisional = new _DataProvisional2.default(_this._owner, objURL, _this._bus, reply.body.childrenResources);
            _this._provisionals[objURL] = newProvisional;
          } else if (reply.body.code === 200) {
            var newObj = new _DataObjectObserver2.default(_this, objURL, schema, 'on', reply.body.value, newProvisional.children, reply.body.version);
            _this._observers[objURL] = newObj;

            resolve(newObj);
            newProvisional.apply(newObj);
          } else {
            reject(reply.body.desc);
          }
        });
      });
    }

    /**
     * Setup the callback to process create and delete events of remove Reporter objects.
     * This is releated to the messagens sent by create to the observers Hyperty array.
     * @param {function(event: MsgEvent)} callback
     */

  }, {
    key: 'onNotification',
    value: function onNotification(callback) {
      this._onNotificationHandler = callback;
    }
  }, {
    key: '_onForward',
    value: function _onForward(msg) {
      var _this = this;

      var reporter = _this._reporters[msg.body.to];
      reporter._onForward(msg);
    }
  }, {
    key: '_onRemoteCreate',
    value: function _onRemoteCreate(msg) {
      var _this = this;

      //remove "/subscription" from the URL
      var resource = msg.from.slice(0, -13);

      var event = {
        type: msg.type,
        from: msg.body.source,
        url: resource,
        schema: msg.body.schema,
        value: msg.body.value,
        identity: msg.body.identity,

        ack: function ack(type) {
          var lType = 200;
          if (type) {
            lType = type;
          }

          //send ack response message
          _this._bus.postMessage({
            id: msg.id, type: 'response', from: msg.to, to: msg.from,
            body: { code: lType }
          });
        }
      };

      if (_this._onNotificationHandler) {
        console.log('NOTIFICATION-EVENT: ', event);
        _this._onNotificationHandler(event);
      }
    }
  }, {
    key: '_onRemoteDelete',
    value: function _onRemoteDelete(msg) {
      var _this = this;

      //remove "/subscription" from the URL
      var resource = msg.body.resource;

      var object = _this._observers[resource];
      if (object) {
        var event = {
          type: msg.type,
          url: resource,
          identity: msg.body.identity,

          ack: function ack(type) {
            var lType = 200;
            if (type) {
              lType = type;
            }

            //TODO: any other different options for the release process, like accept but nor release local?
            if (lType === 200) {
              object.delete();
            }

            //send ack response message
            _this._bus.postMessage({
              id: msg.id, type: 'response', from: msg.to, to: msg.from,
              body: { code: lType, source: _this._owner }
            });
          }
        };

        if (_this._onNotificationHandler) {
          console.log('NOTIFICATION-EVENT: ', event);
          _this._onNotificationHandler(event);
        }
      } else {
        _this._bus.postMessage({
          id: msg.id, type: 'response', from: msg.to, to: msg.from,
          body: { code: 404, source: _this._owner }
        });
      }
    }
  }, {
    key: 'owner',
    get: function get() {
      return this._owner;
    }

    /**
     * All owned reporters, the ones that were created by a create
     * @type {Object<URL, DataObjectReporter>}
     */

  }, {
    key: 'reporters',
    get: function get() {
      return this._reporters;
    }

    /**
     * All owned observers, the ones that were created by a local subscription
     * @type {Object<URL, DataObjectObserver>}
     */

  }, {
    key: 'observers',
    get: function get() {
      return this._observers;
    }
  }]);

  return Syncher;
}();

exports.default = Syncher;

},{"./DataObjectObserver":3,"./DataObjectReporter":4,"./DataProvisional":5}],8:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.divideURL = divideURL;
exports.deepClone = deepClone;
/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/

/**
 * Support module with some functions will be useful
 * @module utils
 */

/**
 * @typedef divideURL
 * @type Object
 * @property {string} type The type of URL
 * @property {string} domain The domain of URL
 * @property {string} identity The identity of URL
 */

/**
 * Divide an url in type, domain and identity
 * @param  {URL.URL} url - url address
 * @return {divideURL} the result of divideURL
 */
function divideURL(url) {

  // let re = /([a-zA-Z-]*)?:\/\/(?:\.)?([-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b)*(\/[\/\d\w\.-]*)*(?:[\?])*(.+)*/gi;
  var re = /([a-zA-Z-]*):\/\/(?:\.)?([-a-zA-Z0-9@:%._\+~#=]{2,256})([-a-zA-Z0-9@:%._\+~#=\/]*)/gi;
  var subst = '$1,$2,$3';
  var parts = url.replace(re, subst).split(',');

  // If the url has no protocol, the default protocol set is https
  if (parts[0] === url) {
    parts[0] = 'https';
    parts[1] = url;
  }

  var result = {
    type: parts[0],
    domain: parts[1],
    identity: parts[2]
  };

  return result;
}

/**
 * Make a COPY of the original data
 * @param  {Object}  obj - object to be cloned
 * @return {Object}
 */
function deepClone(obj) {
  //TODO: simple but inefficient JSON deep clone...
  if (obj) return JSON.parse(JSON.stringify(obj));
}

},{}],9:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = activate;

var _Syncher = require('service-framework/src/syncher/Syncher');

var _Syncher2 = _interopRequireDefault(_Syncher);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var FakeLocationObserverHyperty = {
    receivedPosition: false,

    position: undefined
};

var FakeLoacationFactory = function FakeLoacationFactory(hypertyURL, bus, configuration) {
    var objectDescURL = 'hyperty-catalogue://localhost/.well-known/dataschemas/LocationDataSchema';
    var syncher = new _Syncher2.default(hypertyURL, bus, configuration);

    syncher.onNotification(function (event) {
        event.ack();
        syncher.subscribe(objectDescURL, event.url).then(function (observer) {
            observer.onChange('*', function (event) {
                FakeLocationObserverHyperty.receivedPosition = true;
                FakeLocationObserverHyperty.position = event.data.geoposition;
            });
        });
    });

    return FakeLocationObserverHyperty;
};

function activate(hypertyURL, bus, configuration) {
    return {
        name: 'Fake location observer',
        instance: FakeLoacationFactory(hypertyURL, bus, configuration)
    };
}

},{"service-framework/src/syncher/Syncher":7}]},{},[9])(9)
});",
      "sourceCodeClassname": "FakeLocationObserverHyperty",
      "encoding": "base64",
      "signature": ""
    },
    "cguid": 1,
    "type": "Hyperties",
    "version": "0.1",
    "description": "Description of FakeLocationObserverHyperty",
    "objectName": "FakeLocationObserverHyperty",
    "configuration": {},
    "sourcePackageURL": "/sourcePackage",
    "language": "javascript",
    "signature": "",
    "messageSchemas": "",
    "dataObjects": [],
    "accessControlPolicy": "somePolicy"
  },
  "default": {
    "sourcePackage": {
      "sourceCode": "(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.activate = f().default}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

// shim for using process in browser

var process = module.exports = {};
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = setTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while (len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    clearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        setTimeout(drainQueue, 0);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () {
    return '/';
};
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function () {
    return 0;
};

},{}],2:[function(require,module,exports){
(function (global){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/

// Distribution file for HypertyDiscovery.js
// version: 0.2.0

!function (e) {
  if ("object" == (typeof exports === "undefined" ? "undefined" : _typeof(exports)) && "undefined" != typeof module) module.exports = e();else if ("function" == typeof define && define.amd) define([], e);else {
    var t;t = "undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : this, t.HypertyDiscovery = e();
  }
}(function () {
  return function e(t, r, n) {
    function o(c, s) {
      if (!r[c]) {
        if (!t[c]) {
          var u = "function" == typeof require && require;if (!s && u) return u(c, !0);if (i) return i(c, !0);var a = new Error("Cannot find module '" + c + "'");throw a.code = "MODULE_NOT_FOUND", a;
        }var f = r[c] = { exports: {} };t[c][0].call(f.exports, function (e) {
          var r = t[c][1][e];return o(r ? r : e);
        }, f, f.exports, e, t, r, n);
      }return r[c].exports;
    }for (var i = "function" == typeof require && require, c = 0; c < n.length; c++) {
      o(n[c]);
    }return o;
  }({ 1: [function (e, t, r) {
      t.exports = { "default": e("core-js/library/fn/json/stringify"), __esModule: !0 };
    }, { "core-js/library/fn/json/stringify": 6 }], 2: [function (e, t, r) {
      t.exports = { "default": e("core-js/library/fn/object/define-property"), __esModule: !0 };
    }, { "core-js/library/fn/object/define-property": 7 }], 3: [function (e, t, r) {
      t.exports = { "default": e("core-js/library/fn/promise"), __esModule: !0 };
    }, { "core-js/library/fn/promise": 8 }], 4: [function (e, t, r) {
      "use strict";
      r.__esModule = !0, r["default"] = function (e, t) {
        if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
      };
    }, {}], 5: [function (e, t, r) {
      "use strict";
      function n(e) {
        return e && e.__esModule ? e : { "default": e };
      }r.__esModule = !0;var o = e("babel-runtime/core-js/object/define-property"),
          i = n(o);r["default"] = function () {
        function e(e, t) {
          for (var r = 0; r < t.length; r++) {
            var n = t[r];n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), (0, i["default"])(e, n.key, n);
          }
        }return function (t, r, n) {
          return r && e(t.prototype, r), n && e(t, n), t;
        };
      }();
    }, { "babel-runtime/core-js/object/define-property": 2 }], 6: [function (e, t, r) {
      var n = e("../../modules/_core"),
          o = n.JSON || (n.JSON = { stringify: JSON.stringify });t.exports = function (e) {
        return o.stringify.apply(o, arguments);
      };
    }, { "../../modules/_core": 16 }], 7: [function (e, t, r) {
      e("../../modules/es6.object.define-property");var n = e("../../modules/_core").Object;t.exports = function (e, t, r) {
        return n.defineProperty(e, t, r);
      };
    }, { "../../modules/_core": 16, "../../modules/es6.object.define-property": 71 }], 8: [function (e, t, r) {
      e("../modules/es6.object.to-string"), e("../modules/es6.string.iterator"), e("../modules/web.dom.iterable"), e("../modules/es6.promise"), t.exports = e("../modules/_core").Promise;
    }, { "../modules/_core": 16, "../modules/es6.object.to-string": 72, "../modules/es6.promise": 73, "../modules/es6.string.iterator": 74, "../modules/web.dom.iterable": 75 }], 9: [function (e, t, r) {
      t.exports = function (e) {
        if ("function" != typeof e) throw TypeError(e + " is not a function!");return e;
      };
    }, {}], 10: [function (e, t, r) {
      t.exports = function () {};
    }, {}], 11: [function (e, t, r) {
      t.exports = function (e, t, r, n) {
        if (!(e instanceof t) || void 0 !== n && n in e) throw TypeError(r + ": incorrect invocation!");return e;
      };
    }, {}], 12: [function (e, t, r) {
      var n = e("./_is-object");t.exports = function (e) {
        if (!n(e)) throw TypeError(e + " is not an object!");return e;
      };
    }, { "./_is-object": 33 }], 13: [function (e, t, r) {
      var n = e("./_to-iobject"),
          o = e("./_to-length"),
          i = e("./_to-index");t.exports = function (e) {
        return function (t, r, c) {
          var s,
              u = n(t),
              a = o(u.length),
              f = i(c, a);if (e && r != r) {
            for (; a > f;) {
              if (s = u[f++], s != s) return !0;
            }
          } else for (; a > f; f++) {
            if ((e || f in u) && u[f] === r) return e || f || 0;
          }return !e && -1;
        };
      };
    }, { "./_to-index": 61, "./_to-iobject": 63, "./_to-length": 64 }], 14: [function (e, t, r) {
      var n = e("./_cof"),
          o = e("./_wks")("toStringTag"),
          i = "Arguments" == n(function () {
        return arguments;
      }()),
          c = function c(e, t) {
        try {
          return e[t];
        } catch (r) {}
      };t.exports = function (e) {
        var t, r, s;return void 0 === e ? "Undefined" : null === e ? "Null" : "string" == typeof (r = c(t = Object(e), o)) ? r : i ? n(t) : "Object" == (s = n(t)) && "function" == typeof t.callee ? "Arguments" : s;
      };
    }, { "./_cof": 15, "./_wks": 68 }], 15: [function (e, t, r) {
      var n = {}.toString;t.exports = function (e) {
        return n.call(e).slice(8, -1);
      };
    }, {}], 16: [function (e, t, r) {
      var n = t.exports = { version: "2.4.0" };"number" == typeof __e && (__e = n);
    }, {}], 17: [function (e, t, r) {
      var n = e("./_a-function");t.exports = function (e, t, r) {
        if (n(e), void 0 === t) return e;switch (r) {case 1:
            return function (r) {
              return e.call(t, r);
            };case 2:
            return function (r, n) {
              return e.call(t, r, n);
            };case 3:
            return function (r, n, o) {
              return e.call(t, r, n, o);
            };}return function () {
          return e.apply(t, arguments);
        };
      };
    }, { "./_a-function": 9 }], 18: [function (e, t, r) {
      t.exports = function (e) {
        if (void 0 == e) throw TypeError("Can't call method on  " + e);return e;
      };
    }, {}], 19: [function (e, t, r) {
      t.exports = !e("./_fails")(function () {
        return 7 != Object.defineProperty({}, "a", { get: function get() {
            return 7;
          } }).a;
      });
    }, { "./_fails": 23 }], 20: [function (e, t, r) {
      var n = e("./_is-object"),
          o = e("./_global").document,
          i = n(o) && n(o.createElement);t.exports = function (e) {
        return i ? o.createElement(e) : {};
      };
    }, { "./_global": 25, "./_is-object": 33 }], 21: [function (e, t, r) {
      t.exports = "constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",");
    }, {}], 22: [function (e, t, r) {
      var n = e("./_global"),
          o = e("./_core"),
          i = e("./_ctx"),
          c = e("./_hide"),
          s = "prototype",
          u = function u(e, t, r) {
        var a,
            f,
            _,
            l = e & u.F,
            d = e & u.G,
            p = e & u.S,
            v = e & u.P,
            y = e & u.B,
            h = e & u.W,
            b = d ? o : o[t] || (o[t] = {}),
            m = b[s],
            g = d ? n : p ? n[t] : (n[t] || {})[s];d && (r = t);for (a in r) {
          f = !l && g && void 0 !== g[a], f && a in b || (_ = f ? g[a] : r[a], b[a] = d && "function" != typeof g[a] ? r[a] : y && f ? i(_, n) : h && g[a] == _ ? function (e) {
            var t = function t(_t, r, n) {
              if (this instanceof e) {
                switch (arguments.length) {case 0:
                    return new e();case 1:
                    return new e(_t);case 2:
                    return new e(_t, r);}return new e(_t, r, n);
              }return e.apply(this, arguments);
            };return t[s] = e[s], t;
          }(_) : v && "function" == typeof _ ? i(Function.call, _) : _, v && ((b.virtual || (b.virtual = {}))[a] = _, e & u.R && m && !m[a] && c(m, a, _)));
        }
      };u.F = 1, u.G = 2, u.S = 4, u.P = 8, u.B = 16, u.W = 32, u.U = 64, u.R = 128, t.exports = u;
    }, { "./_core": 16, "./_ctx": 17, "./_global": 25, "./_hide": 27 }], 23: [function (e, t, r) {
      t.exports = function (e) {
        try {
          return !!e();
        } catch (t) {
          return !0;
        }
      };
    }, {}], 24: [function (e, t, r) {
      var n = e("./_ctx"),
          o = e("./_iter-call"),
          i = e("./_is-array-iter"),
          c = e("./_an-object"),
          s = e("./_to-length"),
          u = e("./core.get-iterator-method"),
          a = {},
          f = {},
          r = t.exports = function (e, t, r, _, l) {
        var d,
            p,
            v,
            y,
            h = l ? function () {
          return e;
        } : u(e),
            b = n(r, _, t ? 2 : 1),
            m = 0;if ("function" != typeof h) throw TypeError(e + " is not iterable!");if (i(h)) {
          for (d = s(e.length); d > m; m++) {
            if (y = t ? b(c(p = e[m])[0], p[1]) : b(e[m]), y === a || y === f) return y;
          }
        } else for (v = h.call(e); !(p = v.next()).done;) {
          if (y = o(v, b, p.value, t), y === a || y === f) return y;
        }
      };r.BREAK = a, r.RETURN = f;
    }, { "./_an-object": 12, "./_ctx": 17, "./_is-array-iter": 32, "./_iter-call": 34, "./_to-length": 64, "./core.get-iterator-method": 69 }], 25: [function (e, t, r) {
      var n = t.exports = "undefined" != typeof window && window.Math == Math ? window : "undefined" != typeof self && self.Math == Math ? self : Function("return this")();"number" == typeof __g && (__g = n);
    }, {}], 26: [function (e, t, r) {
      var n = {}.hasOwnProperty;t.exports = function (e, t) {
        return n.call(e, t);
      };
    }, {}], 27: [function (e, t, r) {
      var n = e("./_object-dp"),
          o = e("./_property-desc");t.exports = e("./_descriptors") ? function (e, t, r) {
        return n.f(e, t, o(1, r));
      } : function (e, t, r) {
        return e[t] = r, e;
      };
    }, { "./_descriptors": 19, "./_object-dp": 43, "./_property-desc": 50 }], 28: [function (e, t, r) {
      t.exports = e("./_global").document && document.documentElement;
    }, { "./_global": 25 }], 29: [function (e, t, r) {
      t.exports = !e("./_descriptors") && !e("./_fails")(function () {
        return 7 != Object.defineProperty(e("./_dom-create")("div"), "a", { get: function get() {
            return 7;
          } }).a;
      });
    }, { "./_descriptors": 19, "./_dom-create": 20, "./_fails": 23 }], 30: [function (e, t, r) {
      t.exports = function (e, t, r) {
        var n = void 0 === r;switch (t.length) {case 0:
            return n ? e() : e.call(r);case 1:
            return n ? e(t[0]) : e.call(r, t[0]);case 2:
            return n ? e(t[0], t[1]) : e.call(r, t[0], t[1]);case 3:
            return n ? e(t[0], t[1], t[2]) : e.call(r, t[0], t[1], t[2]);case 4:
            return n ? e(t[0], t[1], t[2], t[3]) : e.call(r, t[0], t[1], t[2], t[3]);}return e.apply(r, t);
      };
    }, {}], 31: [function (e, t, r) {
      var n = e("./_cof");t.exports = Object("z").propertyIsEnumerable(0) ? Object : function (e) {
        return "String" == n(e) ? e.split("") : Object(e);
      };
    }, { "./_cof": 15 }], 32: [function (e, t, r) {
      var n = e("./_iterators"),
          o = e("./_wks")("iterator"),
          i = Array.prototype;t.exports = function (e) {
        return void 0 !== e && (n.Array === e || i[o] === e);
      };
    }, { "./_iterators": 39, "./_wks": 68 }], 33: [function (e, t, r) {
      t.exports = function (e) {
        return "object" == (typeof e === "undefined" ? "undefined" : _typeof(e)) ? null !== e : "function" == typeof e;
      };
    }, {}], 34: [function (e, t, r) {
      var n = e("./_an-object");t.exports = function (e, t, r, o) {
        try {
          return o ? t(n(r)[0], r[1]) : t(r);
        } catch (i) {
          var c = e["return"];throw void 0 !== c && n(c.call(e)), i;
        }
      };
    }, { "./_an-object": 12 }], 35: [function (e, t, r) {
      "use strict";
      var n = e("./_object-create"),
          o = e("./_property-desc"),
          i = e("./_set-to-string-tag"),
          c = {};e("./_hide")(c, e("./_wks")("iterator"), function () {
        return this;
      }), t.exports = function (e, t, r) {
        e.prototype = n(c, { next: o(1, r) }), i(e, t + " Iterator");
      };
    }, { "./_hide": 27, "./_object-create": 42, "./_property-desc": 50, "./_set-to-string-tag": 55, "./_wks": 68 }], 36: [function (e, t, r) {
      "use strict";
      var n = e("./_library"),
          o = e("./_export"),
          i = e("./_redefine"),
          c = e("./_hide"),
          s = e("./_has"),
          u = e("./_iterators"),
          a = e("./_iter-create"),
          f = e("./_set-to-string-tag"),
          _ = e("./_object-gpo"),
          l = e("./_wks")("iterator"),
          d = !([].keys && "next" in [].keys()),
          p = "@@iterator",
          v = "keys",
          y = "values",
          h = function h() {
        return this;
      };t.exports = function (e, t, r, b, m, g, j) {
        a(r, t, b);var x,
            w,
            k,
            O = function O(e) {
          if (!d && e in E) return E[e];switch (e) {case v:
              return function () {
                return new r(this, e);
              };case y:
              return function () {
                return new r(this, e);
              };}return function () {
            return new r(this, e);
          };
        },
            M = t + " Iterator",
            P = m == y,
            S = !1,
            E = e.prototype,
            T = E[l] || E[p] || m && E[m],
            A = T || O(m),
            U = m ? P ? O("entries") : A : void 0,
            C = "Array" == t ? E.entries || T : T;if (C && (k = _(C.call(new e())), k !== Object.prototype && (f(k, M, !0), n || s(k, l) || c(k, l, h))), P && T && T.name !== y && (S = !0, A = function A() {
          return T.call(this);
        }), n && !j || !d && !S && E[l] || c(E, l, A), u[t] = A, u[M] = h, m) if (x = { values: P ? A : O(y), keys: g ? A : O(v), entries: U }, j) for (w in x) {
          w in E || i(E, w, x[w]);
        } else o(o.P + o.F * (d || S), t, x);return x;
      };
    }, { "./_export": 22, "./_has": 26, "./_hide": 27, "./_iter-create": 35, "./_iterators": 39, "./_library": 40, "./_object-gpo": 46, "./_redefine": 52, "./_set-to-string-tag": 55, "./_wks": 68 }], 37: [function (e, t, r) {
      var n = e("./_wks")("iterator"),
          o = !1;try {
        var i = [7][n]();i["return"] = function () {
          o = !0;
        }, Array.from(i, function () {
          throw 2;
        });
      } catch (c) {}t.exports = function (e, t) {
        if (!t && !o) return !1;var r = !1;try {
          var i = [7],
              c = i[n]();c.next = function () {
            return { done: r = !0 };
          }, i[n] = function () {
            return c;
          }, e(i);
        } catch (s) {}return r;
      };
    }, { "./_wks": 68 }], 38: [function (e, t, r) {
      t.exports = function (e, t) {
        return { value: t, done: !!e };
      };
    }, {}], 39: [function (e, t, r) {
      t.exports = {};
    }, {}], 40: [function (e, t, r) {
      t.exports = !0;
    }, {}], 41: [function (e, t, r) {
      var n = e("./_global"),
          o = e("./_task").set,
          i = n.MutationObserver || n.WebKitMutationObserver,
          c = n.process,
          s = n.Promise,
          u = "process" == e("./_cof")(c);t.exports = function () {
        var e,
            t,
            r,
            a = function a() {
          var n, o;for (u && (n = c.domain) && n.exit(); e;) {
            o = e.fn, e = e.next;try {
              o();
            } catch (i) {
              throw e ? r() : t = void 0, i;
            }
          }t = void 0, n && n.enter();
        };if (u) r = function r() {
          c.nextTick(a);
        };else if (i) {
          var f = !0,
              _ = document.createTextNode("");new i(a).observe(_, { characterData: !0 }), r = function r() {
            _.data = f = !f;
          };
        } else if (s && s.resolve) {
          var l = s.resolve();r = function r() {
            l.then(a);
          };
        } else r = function r() {
          o.call(n, a);
        };return function (n) {
          var o = { fn: n, next: void 0 };t && (t.next = o), e || (e = o, r()), t = o;
        };
      };
    }, { "./_cof": 15, "./_global": 25, "./_task": 60 }], 42: [function (e, t, r) {
      var n = e("./_an-object"),
          o = e("./_object-dps"),
          i = e("./_enum-bug-keys"),
          c = e("./_shared-key")("IE_PROTO"),
          s = function s() {},
          u = "prototype",
          _a = function a() {
        var t,
            r = e("./_dom-create")("iframe"),
            n = i.length,
            o = ">";for (r.style.display = "none", e("./_html").appendChild(r), r.src = "javascript:", t = r.contentWindow.document, t.open(), t.write("<script>document.F=Object</script" + o), t.close(), _a = t.F; n--;) {
          delete _a[u][i[n]];
        }return _a();
      };t.exports = Object.create || function (e, t) {
        var r;return null !== e ? (s[u] = n(e), r = new s(), s[u] = null, r[c] = e) : r = _a(), void 0 === t ? r : o(r, t);
      };
    }, { "./_an-object": 12, "./_dom-create": 20, "./_enum-bug-keys": 21, "./_html": 28, "./_object-dps": 44, "./_shared-key": 56 }], 43: [function (e, t, r) {
      var n = e("./_an-object"),
          o = e("./_ie8-dom-define"),
          i = e("./_to-primitive"),
          c = Object.defineProperty;r.f = e("./_descriptors") ? Object.defineProperty : function (e, t, r) {
        if (n(e), t = i(t, !0), n(r), o) try {
          return c(e, t, r);
        } catch (s) {}if ("get" in r || "set" in r) throw TypeError("Accessors not supported!");return "value" in r && (e[t] = r.value), e;
      };
    }, { "./_an-object": 12, "./_descriptors": 19, "./_ie8-dom-define": 29, "./_to-primitive": 66 }], 44: [function (e, t, r) {
      var n = e("./_object-dp"),
          o = e("./_an-object"),
          i = e("./_object-keys");t.exports = e("./_descriptors") ? Object.defineProperties : function (e, t) {
        o(e);for (var r, c = i(t), s = c.length, u = 0; s > u;) {
          n.f(e, r = c[u++], t[r]);
        }return e;
      };
    }, { "./_an-object": 12, "./_descriptors": 19, "./_object-dp": 43, "./_object-keys": 48 }], 45: [function (e, t, r) {
      var n = e("./_object-pie"),
          o = e("./_property-desc"),
          i = e("./_to-iobject"),
          c = e("./_to-primitive"),
          s = e("./_has"),
          u = e("./_ie8-dom-define"),
          a = Object.getOwnPropertyDescriptor;r.f = e("./_descriptors") ? a : function (e, t) {
        if (e = i(e), t = c(t, !0), u) try {
          return a(e, t);
        } catch (r) {}return s(e, t) ? o(!n.f.call(e, t), e[t]) : void 0;
      };
    }, { "./_descriptors": 19, "./_has": 26, "./_ie8-dom-define": 29, "./_object-pie": 49, "./_property-desc": 50, "./_to-iobject": 63, "./_to-primitive": 66 }], 46: [function (e, t, r) {
      var n = e("./_has"),
          o = e("./_to-object"),
          i = e("./_shared-key")("IE_PROTO"),
          c = Object.prototype;t.exports = Object.getPrototypeOf || function (e) {
        return e = o(e), n(e, i) ? e[i] : "function" == typeof e.constructor && e instanceof e.constructor ? e.constructor.prototype : e instanceof Object ? c : null;
      };
    }, { "./_has": 26, "./_shared-key": 56, "./_to-object": 65 }], 47: [function (e, t, r) {
      var n = e("./_has"),
          o = e("./_to-iobject"),
          i = e("./_array-includes")(!1),
          c = e("./_shared-key")("IE_PROTO");t.exports = function (e, t) {
        var r,
            s = o(e),
            u = 0,
            a = [];for (r in s) {
          r != c && n(s, r) && a.push(r);
        }for (; t.length > u;) {
          n(s, r = t[u++]) && (~i(a, r) || a.push(r));
        }return a;
      };
    }, { "./_array-includes": 13, "./_has": 26, "./_shared-key": 56, "./_to-iobject": 63 }], 48: [function (e, t, r) {
      var n = e("./_object-keys-internal"),
          o = e("./_enum-bug-keys");t.exports = Object.keys || function (e) {
        return n(e, o);
      };
    }, { "./_enum-bug-keys": 21, "./_object-keys-internal": 47 }], 49: [function (e, t, r) {
      r.f = {}.propertyIsEnumerable;
    }, {}], 50: [function (e, t, r) {
      t.exports = function (e, t) {
        return { enumerable: !(1 & e), configurable: !(2 & e), writable: !(4 & e), value: t };
      };
    }, {}], 51: [function (e, t, r) {
      var n = e("./_hide");t.exports = function (e, t, r) {
        for (var o in t) {
          r && e[o] ? e[o] = t[o] : n(e, o, t[o]);
        }return e;
      };
    }, { "./_hide": 27 }], 52: [function (e, t, r) {
      t.exports = e("./_hide");
    }, { "./_hide": 27 }], 53: [function (e, t, r) {
      var n = e("./_is-object"),
          o = e("./_an-object"),
          i = function i(e, t) {
        if (o(e), !n(t) && null !== t) throw TypeError(t + ": can't set as prototype!");
      };t.exports = { set: Object.setPrototypeOf || ("__proto__" in {} ? function (t, r, n) {
          try {
            n = e("./_ctx")(Function.call, e("./_object-gopd").f(Object.prototype, "__proto__").set, 2), n(t, []), r = !(t instanceof Array);
          } catch (o) {
            r = !0;
          }return function (e, t) {
            return i(e, t), r ? e.__proto__ = t : n(e, t), e;
          };
        }({}, !1) : void 0), check: i };
    }, { "./_an-object": 12, "./_ctx": 17, "./_is-object": 33, "./_object-gopd": 45 }], 54: [function (e, t, r) {
      "use strict";
      var n = e("./_global"),
          o = e("./_core"),
          i = e("./_object-dp"),
          c = e("./_descriptors"),
          s = e("./_wks")("species");t.exports = function (e) {
        var t = "function" == typeof o[e] ? o[e] : n[e];c && t && !t[s] && i.f(t, s, { configurable: !0, get: function get() {
            return this;
          } });
      };
    }, { "./_core": 16, "./_descriptors": 19, "./_global": 25, "./_object-dp": 43, "./_wks": 68 }], 55: [function (e, t, r) {
      var n = e("./_object-dp").f,
          o = e("./_has"),
          i = e("./_wks")("toStringTag");t.exports = function (e, t, r) {
        e && !o(e = r ? e : e.prototype, i) && n(e, i, { configurable: !0, value: t });
      };
    }, { "./_has": 26, "./_object-dp": 43, "./_wks": 68 }], 56: [function (e, t, r) {
      var n = e("./_shared")("keys"),
          o = e("./_uid");t.exports = function (e) {
        return n[e] || (n[e] = o(e));
      };
    }, { "./_shared": 57, "./_uid": 67 }], 57: [function (e, t, r) {
      var n = e("./_global"),
          o = "__core-js_shared__",
          i = n[o] || (n[o] = {});t.exports = function (e) {
        return i[e] || (i[e] = {});
      };
    }, { "./_global": 25 }], 58: [function (e, t, r) {
      var n = e("./_an-object"),
          o = e("./_a-function"),
          i = e("./_wks")("species");t.exports = function (e, t) {
        var r,
            c = n(e).constructor;return void 0 === c || void 0 == (r = n(c)[i]) ? t : o(r);
      };
    }, { "./_a-function": 9, "./_an-object": 12, "./_wks": 68 }], 59: [function (e, t, r) {
      var n = e("./_to-integer"),
          o = e("./_defined");t.exports = function (e) {
        return function (t, r) {
          var i,
              c,
              s = String(o(t)),
              u = n(r),
              a = s.length;return 0 > u || u >= a ? e ? "" : void 0 : (i = s.charCodeAt(u), 55296 > i || i > 56319 || u + 1 === a || (c = s.charCodeAt(u + 1)) < 56320 || c > 57343 ? e ? s.charAt(u) : i : e ? s.slice(u, u + 2) : (i - 55296 << 10) + (c - 56320) + 65536);
        };
      };
    }, { "./_defined": 18, "./_to-integer": 62 }], 60: [function (e, t, r) {
      var n,
          o,
          i,
          c = e("./_ctx"),
          s = e("./_invoke"),
          u = e("./_html"),
          a = e("./_dom-create"),
          f = e("./_global"),
          _ = f.process,
          l = f.setImmediate,
          d = f.clearImmediate,
          p = f.MessageChannel,
          v = 0,
          y = {},
          h = "onreadystatechange",
          b = function b() {
        var e = +this;if (y.hasOwnProperty(e)) {
          var t = y[e];delete y[e], t();
        }
      },
          m = function m(e) {
        b.call(e.data);
      };l && d || (l = function l(e) {
        for (var t = [], r = 1; arguments.length > r;) {
          t.push(arguments[r++]);
        }return y[++v] = function () {
          s("function" == typeof e ? e : Function(e), t);
        }, n(v), v;
      }, d = function d(e) {
        delete y[e];
      }, "process" == e("./_cof")(_) ? n = function n(e) {
        _.nextTick(c(b, e, 1));
      } : p ? (o = new p(), i = o.port2, o.port1.onmessage = m, n = c(i.postMessage, i, 1)) : f.addEventListener && "function" == typeof postMessage && !f.importScripts ? (n = function n(e) {
        f.postMessage(e + "", "*");
      }, f.addEventListener("message", m, !1)) : n = h in a("script") ? function (e) {
        u.appendChild(a("script"))[h] = function () {
          u.removeChild(this), b.call(e);
        };
      } : function (e) {
        setTimeout(c(b, e, 1), 0);
      }), t.exports = { set: l, clear: d };
    }, { "./_cof": 15, "./_ctx": 17, "./_dom-create": 20, "./_global": 25, "./_html": 28, "./_invoke": 30 }], 61: [function (e, t, r) {
      var n = e("./_to-integer"),
          o = Math.max,
          i = Math.min;t.exports = function (e, t) {
        return e = n(e), 0 > e ? o(e + t, 0) : i(e, t);
      };
    }, { "./_to-integer": 62 }], 62: [function (e, t, r) {
      var n = Math.ceil,
          o = Math.floor;t.exports = function (e) {
        return isNaN(e = +e) ? 0 : (e > 0 ? o : n)(e);
      };
    }, {}], 63: [function (e, t, r) {
      var n = e("./_iobject"),
          o = e("./_defined");t.exports = function (e) {
        return n(o(e));
      };
    }, { "./_defined": 18, "./_iobject": 31 }], 64: [function (e, t, r) {
      var n = e("./_to-integer"),
          o = Math.min;t.exports = function (e) {
        return e > 0 ? o(n(e), 9007199254740991) : 0;
      };
    }, { "./_to-integer": 62 }], 65: [function (e, t, r) {
      var n = e("./_defined");t.exports = function (e) {
        return Object(n(e));
      };
    }, { "./_defined": 18 }], 66: [function (e, t, r) {
      var n = e("./_is-object");t.exports = function (e, t) {
        if (!n(e)) return e;var r, o;if (t && "function" == typeof (r = e.toString) && !n(o = r.call(e))) return o;if ("function" == typeof (r = e.valueOf) && !n(o = r.call(e))) return o;if (!t && "function" == typeof (r = e.toString) && !n(o = r.call(e))) return o;throw TypeError("Can't convert object to primitive value");
      };
    }, { "./_is-object": 33 }], 67: [function (e, t, r) {
      var n = 0,
          o = Math.random();t.exports = function (e) {
        return "Symbol(".concat(void 0 === e ? "" : e, ")_", (++n + o).toString(36));
      };
    }, {}], 68: [function (e, t, r) {
      var n = e("./_shared")("wks"),
          o = e("./_uid"),
          i = e("./_global").Symbol,
          c = "function" == typeof i,
          s = t.exports = function (e) {
        return n[e] || (n[e] = c && i[e] || (c ? i : o)("Symbol." + e));
      };s.store = n;
    }, { "./_global": 25, "./_shared": 57, "./_uid": 67 }], 69: [function (e, t, r) {
      var n = e("./_classof"),
          o = e("./_wks")("iterator"),
          i = e("./_iterators");t.exports = e("./_core").getIteratorMethod = function (e) {
        return void 0 != e ? e[o] || e["@@iterator"] || i[n(e)] : void 0;
      };
    }, { "./_classof": 14, "./_core": 16, "./_iterators": 39, "./_wks": 68 }], 70: [function (e, t, r) {
      "use strict";
      var n = e("./_add-to-unscopables"),
          o = e("./_iter-step"),
          i = e("./_iterators"),
          c = e("./_to-iobject");t.exports = e("./_iter-define")(Array, "Array", function (e, t) {
        this._t = c(e), this._i = 0, this._k = t;
      }, function () {
        var e = this._t,
            t = this._k,
            r = this._i++;return !e || r >= e.length ? (this._t = void 0, o(1)) : "keys" == t ? o(0, r) : "values" == t ? o(0, e[r]) : o(0, [r, e[r]]);
      }, "values"), i.Arguments = i.Array, n("keys"), n("values"), n("entries");
    }, { "./_add-to-unscopables": 10, "./_iter-define": 36, "./_iter-step": 38, "./_iterators": 39, "./_to-iobject": 63 }], 71: [function (e, t, r) {
      var n = e("./_export");n(n.S + n.F * !e("./_descriptors"), "Object", { defineProperty: e("./_object-dp").f });
    }, { "./_descriptors": 19, "./_export": 22, "./_object-dp": 43 }], 72: [function (e, t, r) {}, {}], 73: [function (e, t, r) {
      "use strict";
      var n,
          o,
          i,
          c = e("./_library"),
          s = e("./_global"),
          u = e("./_ctx"),
          a = e("./_classof"),
          f = e("./_export"),
          _ = e("./_is-object"),
          l = (e("./_an-object"), e("./_a-function")),
          d = e("./_an-instance"),
          p = e("./_for-of"),
          v = (e("./_set-proto").set, e("./_species-constructor")),
          y = e("./_task").set,
          h = e("./_microtask")(),
          b = "Promise",
          m = s.TypeError,
          g = s.process,
          _j = s[b],
          g = s.process,
          x = "process" == a(g),
          w = function w() {},
          k = !!function () {
        try {
          var t = _j.resolve(1),
              r = (t.constructor = {})[e("./_wks")("species")] = function (e) {
            e(w, w);
          };return (x || "function" == typeof PromiseRejectionEvent) && t.then(w) instanceof r;
        } catch (n) {}
      }(),
          O = function O(e, t) {
        return e === t || e === _j && t === i;
      },
          M = function M(e) {
        var t;return _(e) && "function" == typeof (t = e.then) ? t : !1;
      },
          P = function P(e) {
        return O(_j, e) ? new S(e) : new o(e);
      },
          S = o = function o(e) {
        var t, r;this.promise = new e(function (e, n) {
          if (void 0 !== t || void 0 !== r) throw m("Bad Promise constructor");t = e, r = n;
        }), this.resolve = l(t), this.reject = l(r);
      },
          E = function E(e) {
        try {
          e();
        } catch (t) {
          return { error: t };
        }
      },
          T = function T(e, t) {
        if (!e._n) {
          e._n = !0;var r = e._c;h(function () {
            for (var n = e._v, o = 1 == e._s, i = 0, c = function c(t) {
              var r,
                  i,
                  c = o ? t.ok : t.fail,
                  s = t.resolve,
                  u = t.reject,
                  a = t.domain;try {
                c ? (o || (2 == e._h && C(e), e._h = 1), c === !0 ? r = n : (a && a.enter(), r = c(n), a && a.exit()), r === t.promise ? u(m("Promise-chain cycle")) : (i = M(r)) ? i.call(r, s, u) : s(r)) : u(n);
              } catch (f) {
                u(f);
              }
            }; r.length > i;) {
              c(r[i++]);
            }e._c = [], e._n = !1, t && !e._h && A(e);
          });
        }
      },
          A = function A(e) {
        y.call(s, function () {
          var t,
              r,
              n,
              o = e._v;if (U(e) && (t = E(function () {
            x ? g.emit("unhandledRejection", o, e) : (r = s.onunhandledrejection) ? r({ promise: e, reason: o }) : (n = s.console) && n.error && n.error("Unhandled promise rejection", o);
          }), e._h = x || U(e) ? 2 : 1), e._a = void 0, t) throw t.error;
        });
      },
          U = function U(e) {
        if (1 == e._h) return !1;for (var t, r = e._a || e._c, n = 0; r.length > n;) {
          if (t = r[n++], t.fail || !U(t.promise)) return !1;
        }return !0;
      },
          C = function C(e) {
        y.call(s, function () {
          var t;x ? g.emit("rejectionHandled", e) : (t = s.onrejectionhandled) && t({ promise: e, reason: e._v });
        });
      },
          R = function R(e) {
        var t = this;t._d || (t._d = !0, t = t._w || t, t._v = e, t._s = 2, t._a || (t._a = t._c.slice()), T(t, !0));
      },
          L = function L(e) {
        var t,
            r = this;if (!r._d) {
          r._d = !0, r = r._w || r;try {
            if (r === e) throw m("Promise can't be resolved itself");(t = M(e)) ? h(function () {
              var n = { _w: r, _d: !1 };try {
                t.call(e, u(L, n, 1), u(R, n, 1));
              } catch (o) {
                R.call(n, o);
              }
            }) : (r._v = e, r._s = 1, T(r, !1));
          } catch (n) {
            R.call({ _w: r, _d: !1 }, n);
          }
        }
      };k || (_j = function j(e) {
        d(this, _j, b, "_h"), l(e), n.call(this);try {
          e(u(L, this, 1), u(R, this, 1));
        } catch (t) {
          R.call(this, t);
        }
      }, n = function n(e) {
        this._c = [], this._a = void 0, this._s = 0, this._d = !1, this._v = void 0, this._h = 0, this._n = !1;
      }, n.prototype = e("./_redefine-all")(_j.prototype, { then: function then(e, t) {
          var r = P(v(this, _j));return r.ok = "function" == typeof e ? e : !0, r.fail = "function" == typeof t && t, r.domain = x ? g.domain : void 0, this._c.push(r), this._a && this._a.push(r), this._s && T(this, !1), r.promise;
        }, "catch": function _catch(e) {
          return this.then(void 0, e);
        } }), S = function S() {
        var e = new n();this.promise = e, this.resolve = u(L, e, 1), this.reject = u(R, e, 1);
      }), f(f.G + f.W + f.F * !k, { Promise: _j }), e("./_set-to-string-tag")(_j, b), e("./_set-species")(b), i = e("./_core")[b], f(f.S + f.F * !k, b, { reject: function reject(e) {
          var t = P(this),
              r = t.reject;return r(e), t.promise;
        } }), f(f.S + f.F * (c || !k), b, { resolve: function resolve(e) {
          if (e instanceof _j && O(e.constructor, this)) return e;var t = P(this),
              r = t.resolve;return r(e), t.promise;
        } }), f(f.S + f.F * !(k && e("./_iter-detect")(function (e) {
        _j.all(e)["catch"](w);
      })), b, { all: function all(e) {
          var t = this,
              r = P(t),
              n = r.resolve,
              o = r.reject,
              i = E(function () {
            var r = [],
                i = 0,
                c = 1;p(e, !1, function (e) {
              var s = i++,
                  u = !1;r.push(void 0), c++, t.resolve(e).then(function (e) {
                u || (u = !0, r[s] = e, --c || n(r));
              }, o);
            }), --c || n(r);
          });return i && o(i.error), r.promise;
        }, race: function race(e) {
          var t = this,
              r = P(t),
              n = r.reject,
              o = E(function () {
            p(e, !1, function (e) {
              t.resolve(e).then(r.resolve, n);
            });
          });return o && n(o.error), r.promise;
        } });
    }, { "./_a-function": 9, "./_an-instance": 11, "./_an-object": 12, "./_classof": 14, "./_core": 16, "./_ctx": 17, "./_export": 22, "./_for-of": 24, "./_global": 25, "./_is-object": 33, "./_iter-detect": 37, "./_library": 40, "./_microtask": 41, "./_redefine-all": 51, "./_set-proto": 53, "./_set-species": 54, "./_set-to-string-tag": 55, "./_species-constructor": 58, "./_task": 60, "./_wks": 68 }], 74: [function (e, t, r) {
      "use strict";
      var n = e("./_string-at")(!0);e("./_iter-define")(String, "String", function (e) {
        this._t = String(e), this._i = 0;
      }, function () {
        var e,
            t = this._t,
            r = this._i;return r >= t.length ? { value: void 0, done: !0 } : (e = n(t, r), this._i += e.length, { value: e, done: !1 });
      });
    }, { "./_iter-define": 36, "./_string-at": 59 }], 75: [function (e, t, r) {
      e("./es6.array.iterator");for (var n = e("./_global"), o = e("./_hide"), i = e("./_iterators"), c = e("./_wks")("toStringTag"), s = ["NodeList", "DOMTokenList", "MediaList", "StyleSheetList", "CSSRuleList"], u = 0; 5 > u; u++) {
        var a = s[u],
            f = n[a],
            _ = f && f.prototype;_ && !_[c] && o(_, c, a), i[a] = i.Array;
      }
    }, { "./_global": 25, "./_hide": 27, "./_iterators": 39, "./_wks": 68, "./es6.array.iterator": 70 }], 76: [function (e, t, r) {
      "use strict";
      function n(e) {
        return e && e.__esModule ? e : { "default": e };
      }Object.defineProperty(r, "__esModule", { value: !0 });var o = e("./hyperty-discovery/HypertyDiscovery"),
          i = n(o);r["default"] = i["default"], t.exports = r["default"];
    }, { "./hyperty-discovery/HypertyDiscovery": 77 }], 77: [function (e, t, r) {
      "use strict";
      function n(e) {
        return e && e.__esModule ? e : { "default": e };
      }Object.defineProperty(r, "__esModule", { value: !0 });var o = e("babel-runtime/core-js/promise"),
          i = n(o),
          c = e("babel-runtime/helpers/classCallCheck"),
          s = n(c),
          u = e("babel-runtime/helpers/createClass"),
          a = n(u),
          f = e("../utils/utils"),
          _ = function () {
        function e(t, r) {
          (0, s["default"])(this, e);var n = this;n.messageBus = r, n.domain = (0, f.divideURL)(t).domain, n.discoveryURL = t;
        }return (0, a["default"])(e, [{ key: "discoverDataObjectPerName", value: function value(e, t) {
            var r = this,
                n = void 0;n = t ? t : r.domain;var o = { type: "read", from: r.discoveryURL, to: "domain://registry." + n + "/", body: { resource: "dataObject://" + e } };return new i["default"](function (e, t) {
              r.messageBus.postMessage(o, function (r) {
                var n = r.body.value.url;n ? e(n) : t("DataObject name does not exist");
              });
            });
          } }, { key: "discoverHypertyPerUser", value: function value(e, t) {
            var r = this,
                n = void 0;n = t ? t : r.domain;var o = "user://" + e.substring(e.indexOf("@") + 1, e.length) + "/" + e.substring(0, e.indexOf("@")),
                c = { type: "read", from: r.discoveryURL, to: "domain://registry." + n + "/", body: { resource: o } };return console.log("Message: ", c, n, o), new i["default"](function (t, n) {
              r.messageBus.postMessage(c, function (r) {
                console.log("message reply", r);var o = void 0,
                    i = void 0,
                    c = void 0,
                    s = r.body.value;for (o in s) {
                  if (void 0 !== s[o].lastModified) if (void 0 === i) i = new Date(s[o].lastModified), c = o;else {
                    var u = new Date(s[o].lastModified);i.getTime() < u.getTime() && (i = u, c = o);
                  }
                }console.log("Last Hyperty: ", c, i);var a = c;if (void 0 === a) return n("User Hyperty not found");var f = { id: e, descriptor: s[a].descriptor, hypertyURL: a };console.log("===> hypertyDiscovery messageBundle: ", f), t(f);
              });
            });
          } }, { key: "discoverHypertiesPerUser", value: function value(e, t) {
            var r = this,
                n = void 0;n = t ? t : r.domain;var o = "user://" + e.substring(e.indexOf("@") + 1, e.length) + "/" + e.substring(0, e.indexOf("@")),
                c = { type: "read", from: r.discoveryURL, to: "domain://registry." + n + "/", body: { resource: o } };return console.log("Message discoverHypertiesPerUser: ", c, n, o), new i["default"](function (e, t) {
              r.messageBus.postMessage(c, function (r) {
                console.log("discoverHypertiesPerUser reply", r);var n = r.body.value;return n ? void e(n) : t("User Hyperty not found");
              });
            });
          } }]), e;
      }();r["default"] = _, t.exports = r["default"];
    }, { "../utils/utils": 78, "babel-runtime/core-js/promise": 3, "babel-runtime/helpers/classCallCheck": 4, "babel-runtime/helpers/createClass": 5 }], 78: [function (e, t, r) {
      "use strict";
      function n(e) {
        return e && e.__esModule ? e : { "default": e };
      }function o(e) {
        var t = /([a-zA-Z-]*):\/\/(?:\.)?([-a-zA-Z0-9@:%._\+~#=]{2,256})([-a-zA-Z0-9@:%._\+~#=\/]*)/gi,
            r = "$1,$2,$3",
            n = e.replace(t, r).split(",");n[0] === e && (n[0] = "https", n[1] = e);var o = { type: n[0], domain: n[1], identity: n[2] };return o;
      }function i(e) {
        return e ? JSON.parse((0, s["default"])(e)) : void 0;
      }Object.defineProperty(r, "__esModule", { value: !0 });var c = e("babel-runtime/core-js/json/stringify"),
          s = n(c);r.divideURL = o, r.deepClone = i;
    }, { "babel-runtime/core-js/json/stringify": 1 }] }, {}, [76])(76);
});

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],3:[function(require,module,exports){
(function (global){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/

// Distribution file for Syncher.js
// version: 0.2.0

!function (e) {
  if ("object" == (typeof exports === "undefined" ? "undefined" : _typeof(exports)) && "undefined" != typeof module) module.exports = e();else if ("function" == typeof define && define.amd) define([], e);else {
    var t;t = "undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : this, t.Syncher = e();
  }
}(function () {
  return function e(t, r, n) {
    function o(s, a) {
      if (!r[s]) {
        if (!t[s]) {
          var c = "function" == typeof require && require;if (!a && c) return c(s, !0);if (i) return i(s, !0);var u = new Error("Cannot find module '" + s + "'");throw u.code = "MODULE_NOT_FOUND", u;
        }var l = r[s] = { exports: {} };t[s][0].call(l.exports, function (e) {
          var r = t[s][1][e];return o(r ? r : e);
        }, l, l.exports, e, t, r, n);
      }return r[s].exports;
    }for (var i = "function" == typeof require && require, s = 0; s < n.length; s++) {
      o(n[s]);
    }return o;
  }({ 1: [function (e, t, r) {
      Object.observe && !Array.observe && function (e, t) {
        "use strict";
        var r = e.getNotifier,
            n = "performChange",
            o = "_original",
            i = "splice",
            s = { push: function c(e) {
            var t = arguments,
                s = c[o].apply(this, t);return r(this)[n](i, function () {
              return { index: s - t.length, addedCount: t.length, removed: [] };
            }), s;
          }, unshift: function u(e) {
            var t = arguments,
                s = u[o].apply(this, t);return r(this)[n](i, function () {
              return { index: 0, addedCount: t.length, removed: [] };
            }), s;
          }, pop: function l() {
            var e = this.length,
                t = l[o].call(this);return this.length !== e && r(this)[n](i, function () {
              return { index: this.length, addedCount: 0, removed: [t] };
            }, this), t;
          }, shift: function f() {
            var e = this.length,
                t = f[o].call(this);return this.length !== e && r(this)[n](i, function () {
              return { index: 0, addedCount: 0, removed: [t] };
            }, this), t;
          }, splice: function d(e, t) {
            var s = arguments,
                a = d[o].apply(this, s);return (a.length || s.length > 2) && r(this)[n](i, function () {
              return { index: e, addedCount: s.length - 2, removed: a };
            }, this), a;
          } };for (var a in s) {
          s[a][o] = t.prototype[a], t.prototype[a] = s[a];
        }t.observe = function (t, r) {
          return e.observe(t, r, ["add", "update", "delete", i]);
        }, t.unobserve = e.unobserve;
      }(Object, Array);
    }, {}], 2: [function (e, t, r) {
      t.exports = { "default": e("core-js/library/fn/json/stringify"), __esModule: !0 };
    }, { "core-js/library/fn/json/stringify": 17 }], 3: [function (e, t, r) {
      t.exports = { "default": e("core-js/library/fn/object/create"), __esModule: !0 };
    }, { "core-js/library/fn/object/create": 18 }], 4: [function (e, t, r) {
      t.exports = { "default": e("core-js/library/fn/object/define-property"), __esModule: !0 };
    }, { "core-js/library/fn/object/define-property": 19 }], 5: [function (e, t, r) {
      t.exports = { "default": e("core-js/library/fn/object/get-own-property-descriptor"), __esModule: !0 };
    }, { "core-js/library/fn/object/get-own-property-descriptor": 20 }], 6: [function (e, t, r) {
      t.exports = { "default": e("core-js/library/fn/object/get-prototype-of"), __esModule: !0 };
    }, { "core-js/library/fn/object/get-prototype-of": 21 }], 7: [function (e, t, r) {
      t.exports = { "default": e("core-js/library/fn/object/keys"), __esModule: !0 };
    }, { "core-js/library/fn/object/keys": 22 }], 8: [function (e, t, r) {
      t.exports = { "default": e("core-js/library/fn/object/set-prototype-of"), __esModule: !0 };
    }, { "core-js/library/fn/object/set-prototype-of": 23 }], 9: [function (e, t, r) {
      t.exports = { "default": e("core-js/library/fn/promise"), __esModule: !0 };
    }, { "core-js/library/fn/promise": 24 }], 10: [function (e, t, r) {
      t.exports = { "default": e("core-js/library/fn/symbol"), __esModule: !0 };
    }, { "core-js/library/fn/symbol": 25 }], 11: [function (e, t, r) {
      "use strict";
      r.__esModule = !0, r["default"] = function (e, t) {
        if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
      };
    }, {}], 12: [function (e, t, r) {
      "use strict";
      function n(e) {
        return e && e.__esModule ? e : { "default": e };
      }r.__esModule = !0;var o = e("../core-js/object/define-property"),
          i = n(o);r["default"] = function () {
        function e(e, t) {
          for (var r = 0; r < t.length; r++) {
            var n = t[r];n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), (0, i["default"])(e, n.key, n);
          }
        }return function (t, r, n) {
          return r && e(t.prototype, r), n && e(t, n), t;
        };
      }();
    }, { "../core-js/object/define-property": 4 }], 13: [function (e, t, r) {
      "use strict";
      var n = e("babel-runtime/core-js/object/get-own-property-descriptor")["default"];r["default"] = function (e, t, r) {
        for (var o = !0; o;) {
          var i = e,
              s = t,
              a = r;o = !1, null === i && (i = Function.prototype);var c = n(i, s);if (void 0 !== c) {
            if ("value" in c) return c.value;var u = c.get;if (void 0 === u) return;return u.call(a);
          }var l = Object.getPrototypeOf(i);if (null === l) return;e = l, t = s, r = a, o = !0, c = l = void 0;
        }
      }, r.__esModule = !0;
    }, { "babel-runtime/core-js/object/get-own-property-descriptor": 5 }], 14: [function (e, t, r) {
      "use strict";
      var n = e("babel-runtime/core-js/object/create")["default"],
          o = e("babel-runtime/core-js/object/set-prototype-of")["default"];r["default"] = function (e, t) {
        if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function, not " + (typeof t === "undefined" ? "undefined" : _typeof(t)));e.prototype = n(t && t.prototype, { constructor: { value: e, enumerable: !1, writable: !0, configurable: !0 } }), t && (o ? o(e, t) : e.__proto__ = t);
      }, r.__esModule = !0;
    }, { "babel-runtime/core-js/object/create": 3, "babel-runtime/core-js/object/set-prototype-of": 8 }], 15: [function (e, t, r) {
      "use strict";
      function n(e) {
        return e && e.__esModule ? e : { "default": e };
      }r.__esModule = !0;var o = e("../helpers/typeof"),
          i = n(o);r["default"] = function (e, t) {
        if (!e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return !t || "object" !== ("undefined" == typeof t ? "undefined" : (0, i["default"])(t)) && "function" != typeof t ? e : t;
      };
    }, { "../helpers/typeof": 16 }], 16: [function (e, t, r) {
      "use strict";
      var n = e("babel-runtime/core-js/symbol")["default"];r["default"] = function (e) {
        return e && e.constructor === n ? "symbol" : typeof e === "undefined" ? "undefined" : _typeof(e);
      }, r.__esModule = !0;
    }, { "babel-runtime/core-js/symbol": 10 }], 17: [function (e, t, r) {
      var n = e("../../modules/$.core");t.exports = function (e) {
        return (n.JSON && n.JSON.stringify || JSON.stringify).apply(JSON, arguments);
      };
    }, { "../../modules/$.core": 31 }], 18: [function (e, t, r) {
      var n = e("../../modules/$");t.exports = function (e, t) {
        return n.create(e, t);
      };
    }, { "../../modules/$": 56 }], 19: [function (e, t, r) {
      var n = e("../../modules/$");t.exports = function (e, t, r) {
        return n.setDesc(e, t, r);
      };
    }, { "../../modules/$": 56 }], 20: [function (e, t, r) {
      var n = e("../../modules/$");e("../../modules/es6.object.get-own-property-descriptor"), t.exports = function (e, t) {
        return n.getDesc(e, t);
      };
    }, { "../../modules/$": 56, "../../modules/es6.object.get-own-property-descriptor": 81 }], 21: [function (e, t, r) {
      e("../../modules/es6.object.get-prototype-of"), t.exports = e("../../modules/$.core").Object.getPrototypeOf;
    }, { "../../modules/$.core": 31, "../../modules/es6.object.get-prototype-of": 82 }], 22: [function (e, t, r) {
      e("../../modules/es6.object.keys"), t.exports = e("../../modules/$.core").Object.keys;
    }, { "../../modules/$.core": 31, "../../modules/es6.object.keys": 83 }], 23: [function (e, t, r) {
      e("../../modules/es6.object.set-prototype-of"), t.exports = e("../../modules/$.core").Object.setPrototypeOf;
    }, { "../../modules/$.core": 31, "../../modules/es6.object.set-prototype-of": 84 }], 24: [function (e, t, r) {
      e("../modules/es6.object.to-string"), e("../modules/es6.string.iterator"), e("../modules/web.dom.iterable"), e("../modules/es6.promise"), t.exports = e("../modules/$.core").Promise;
    }, { "../modules/$.core": 31, "../modules/es6.object.to-string": 85, "../modules/es6.promise": 86, "../modules/es6.string.iterator": 87, "../modules/web.dom.iterable": 89 }], 25: [function (e, t, r) {
      e("../../modules/es6.symbol"), e("../../modules/es6.object.to-string"), t.exports = e("../../modules/$.core").Symbol;
    }, { "../../modules/$.core": 31, "../../modules/es6.object.to-string": 85, "../../modules/es6.symbol": 88 }], 26: [function (e, t, r) {
      t.exports = function (e) {
        if ("function" != typeof e) throw TypeError(e + " is not a function!");return e;
      };
    }, {}], 27: [function (e, t, r) {
      t.exports = function () {};
    }, {}], 28: [function (e, t, r) {
      var n = e("./$.is-object");t.exports = function (e) {
        if (!n(e)) throw TypeError(e + " is not an object!");return e;
      };
    }, { "./$.is-object": 49 }], 29: [function (e, t, r) {
      var n = e("./$.cof"),
          o = e("./$.wks")("toStringTag"),
          i = "Arguments" == n(function () {
        return arguments;
      }());t.exports = function (e) {
        var t, r, s;return void 0 === e ? "Undefined" : null === e ? "Null" : "string" == typeof (r = (t = Object(e))[o]) ? r : i ? n(t) : "Object" == (s = n(t)) && "function" == typeof t.callee ? "Arguments" : s;
      };
    }, { "./$.cof": 30, "./$.wks": 78 }], 30: [function (e, t, r) {
      var n = {}.toString;t.exports = function (e) {
        return n.call(e).slice(8, -1);
      };
    }, {}], 31: [function (e, t, r) {
      var n = t.exports = { version: "1.2.6" };"number" == typeof __e && (__e = n);
    }, {}], 32: [function (e, t, r) {
      var n = e("./$.a-function");t.exports = function (e, t, r) {
        if (n(e), void 0 === t) return e;switch (r) {case 1:
            return function (r) {
              return e.call(t, r);
            };case 2:
            return function (r, n) {
              return e.call(t, r, n);
            };case 3:
            return function (r, n, o) {
              return e.call(t, r, n, o);
            };}return function () {
          return e.apply(t, arguments);
        };
      };
    }, { "./$.a-function": 26 }], 33: [function (e, t, r) {
      t.exports = function (e) {
        if (void 0 == e) throw TypeError("Can't call method on  " + e);return e;
      };
    }, {}], 34: [function (e, t, r) {
      t.exports = !e("./$.fails")(function () {
        return 7 != Object.defineProperty({}, "a", { get: function get() {
            return 7;
          } }).a;
      });
    }, { "./$.fails": 38 }], 35: [function (e, t, r) {
      var n = e("./$.is-object"),
          o = e("./$.global").document,
          i = n(o) && n(o.createElement);t.exports = function (e) {
        return i ? o.createElement(e) : {};
      };
    }, { "./$.global": 41, "./$.is-object": 49 }], 36: [function (e, t, r) {
      var n = e("./$");t.exports = function (e) {
        var t = n.getKeys(e),
            r = n.getSymbols;if (r) for (var o, i = r(e), s = n.isEnum, a = 0; i.length > a;) {
          s.call(e, o = i[a++]) && t.push(o);
        }return t;
      };
    }, { "./$": 56 }], 37: [function (e, t, r) {
      var n = e("./$.global"),
          o = e("./$.core"),
          i = e("./$.ctx"),
          s = "prototype",
          a = function a(e, t, r) {
        var c,
            u,
            l,
            f = e & a.F,
            d = e & a.G,
            p = e & a.S,
            b = e & a.P,
            h = e & a.B,
            v = e & a.W,
            y = d ? o : o[t] || (o[t] = {}),
            _ = d ? n : p ? n[t] : (n[t] || {})[s];d && (r = t);for (c in r) {
          u = !f && _ && c in _, u && c in y || (l = u ? _[c] : r[c], y[c] = d && "function" != typeof _[c] ? r[c] : h && u ? i(l, n) : v && _[c] == l ? function (e) {
            var t = function t(_t) {
              return this instanceof e ? new e(_t) : e(_t);
            };return t[s] = e[s], t;
          }(l) : b && "function" == typeof l ? i(Function.call, l) : l, b && ((y[s] || (y[s] = {}))[c] = l));
        }
      };a.F = 1, a.G = 2, a.S = 4, a.P = 8, a.B = 16, a.W = 32, t.exports = a;
    }, { "./$.core": 31, "./$.ctx": 32, "./$.global": 41 }], 38: [function (e, t, r) {
      t.exports = function (e) {
        try {
          return !!e();
        } catch (t) {
          return !0;
        }
      };
    }, {}], 39: [function (e, t, r) {
      var n = e("./$.ctx"),
          o = e("./$.iter-call"),
          i = e("./$.is-array-iter"),
          s = e("./$.an-object"),
          a = e("./$.to-length"),
          c = e("./core.get-iterator-method");t.exports = function (e, t, r, u) {
        var l,
            f,
            d,
            p = c(e),
            b = n(r, u, t ? 2 : 1),
            h = 0;if ("function" != typeof p) throw TypeError(e + " is not iterable!");if (i(p)) for (l = a(e.length); l > h; h++) {
          t ? b(s(f = e[h])[0], f[1]) : b(e[h]);
        } else for (d = p.call(e); !(f = d.next()).done;) {
          o(d, b, f.value, t);
        }
      };
    }, { "./$.an-object": 28, "./$.ctx": 32, "./$.is-array-iter": 47, "./$.iter-call": 50, "./$.to-length": 75, "./core.get-iterator-method": 79 }], 40: [function (e, t, r) {
      var n = e("./$.to-iobject"),
          o = e("./$").getNames,
          i = {}.toString,
          s = "object" == (typeof window === "undefined" ? "undefined" : _typeof(window)) && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [],
          a = function a(e) {
        try {
          return o(e);
        } catch (t) {
          return s.slice();
        }
      };t.exports.get = function (e) {
        return s && "[object Window]" == i.call(e) ? a(e) : o(n(e));
      };
    }, { "./$": 56, "./$.to-iobject": 74 }], 41: [function (e, t, r) {
      var n = t.exports = "undefined" != typeof window && window.Math == Math ? window : "undefined" != typeof self && self.Math == Math ? self : Function("return this")();"number" == typeof __g && (__g = n);
    }, {}], 42: [function (e, t, r) {
      var n = {}.hasOwnProperty;t.exports = function (e, t) {
        return n.call(e, t);
      };
    }, {}], 43: [function (e, t, r) {
      var n = e("./$"),
          o = e("./$.property-desc");t.exports = e("./$.descriptors") ? function (e, t, r) {
        return n.setDesc(e, t, o(1, r));
      } : function (e, t, r) {
        return e[t] = r, e;
      };
    }, { "./$": 56, "./$.descriptors": 34, "./$.property-desc": 61 }], 44: [function (e, t, r) {
      t.exports = e("./$.global").document && document.documentElement;
    }, { "./$.global": 41 }], 45: [function (e, t, r) {
      t.exports = function (e, t, r) {
        var n = void 0 === r;switch (t.length) {case 0:
            return n ? e() : e.call(r);case 1:
            return n ? e(t[0]) : e.call(r, t[0]);case 2:
            return n ? e(t[0], t[1]) : e.call(r, t[0], t[1]);case 3:
            return n ? e(t[0], t[1], t[2]) : e.call(r, t[0], t[1], t[2]);case 4:
            return n ? e(t[0], t[1], t[2], t[3]) : e.call(r, t[0], t[1], t[2], t[3]);}return e.apply(r, t);
      };
    }, {}], 46: [function (e, t, r) {
      var n = e("./$.cof");t.exports = Object("z").propertyIsEnumerable(0) ? Object : function (e) {
        return "String" == n(e) ? e.split("") : Object(e);
      };
    }, { "./$.cof": 30 }], 47: [function (e, t, r) {
      var n = e("./$.iterators"),
          o = e("./$.wks")("iterator"),
          i = Array.prototype;t.exports = function (e) {
        return void 0 !== e && (n.Array === e || i[o] === e);
      };
    }, { "./$.iterators": 55, "./$.wks": 78 }], 48: [function (e, t, r) {
      var n = e("./$.cof");t.exports = Array.isArray || function (e) {
        return "Array" == n(e);
      };
    }, { "./$.cof": 30 }], 49: [function (e, t, r) {
      t.exports = function (e) {
        return "object" == (typeof e === "undefined" ? "undefined" : _typeof(e)) ? null !== e : "function" == typeof e;
      };
    }, {}], 50: [function (e, t, r) {
      var n = e("./$.an-object");t.exports = function (e, t, r, o) {
        try {
          return o ? t(n(r)[0], r[1]) : t(r);
        } catch (i) {
          var s = e["return"];throw void 0 !== s && n(s.call(e)), i;
        }
      };
    }, { "./$.an-object": 28 }], 51: [function (e, t, r) {
      "use strict";
      var n = e("./$"),
          o = e("./$.property-desc"),
          i = e("./$.set-to-string-tag"),
          s = {};e("./$.hide")(s, e("./$.wks")("iterator"), function () {
        return this;
      }), t.exports = function (e, t, r) {
        e.prototype = n.create(s, { next: o(1, r) }), i(e, t + " Iterator");
      };
    }, { "./$": 56, "./$.hide": 43, "./$.property-desc": 61, "./$.set-to-string-tag": 67, "./$.wks": 78 }], 52: [function (e, t, r) {
      "use strict";
      var n = e("./$.library"),
          o = e("./$.export"),
          i = e("./$.redefine"),
          s = e("./$.hide"),
          a = e("./$.has"),
          c = e("./$.iterators"),
          u = e("./$.iter-create"),
          l = e("./$.set-to-string-tag"),
          f = e("./$").getProto,
          d = e("./$.wks")("iterator"),
          p = !([].keys && "next" in [].keys()),
          b = "@@iterator",
          h = "keys",
          v = "values",
          y = function y() {
        return this;
      };t.exports = function (e, t, r, _, g, m, j) {
        u(r, t, _);var $,
            O,
            w = function w(e) {
          if (!p && e in E) return E[e];switch (e) {case h:
              return function () {
                return new r(this, e);
              };case v:
              return function () {
                return new r(this, e);
              };}return function () {
            return new r(this, e);
          };
        },
            k = t + " Iterator",
            x = g == v,
            C = !1,
            E = e.prototype,
            S = E[d] || E[b] || g && E[g],
            T = S || w(g);if (S) {
          var M = f(T.call(new e()));l(M, k, !0), !n && a(E, b) && s(M, d, y), x && S.name !== v && (C = !0, T = function T() {
            return S.call(this);
          });
        }if (n && !j || !p && !C && E[d] || s(E, d, T), c[t] = T, c[k] = y, g) if ($ = { values: x ? T : w(v), keys: m ? T : w(h), entries: x ? w("entries") : T }, j) for (O in $) {
          O in E || i(E, O, $[O]);
        } else o(o.P + o.F * (p || C), t, $);return $;
      };
    }, { "./$": 56, "./$.export": 37, "./$.has": 42, "./$.hide": 43, "./$.iter-create": 51, "./$.iterators": 55, "./$.library": 58, "./$.redefine": 63, "./$.set-to-string-tag": 67, "./$.wks": 78 }], 53: [function (e, t, r) {
      var n = e("./$.wks")("iterator"),
          o = !1;try {
        var i = [7][n]();i["return"] = function () {
          o = !0;
        }, Array.from(i, function () {
          throw 2;
        });
      } catch (s) {}t.exports = function (e, t) {
        if (!t && !o) return !1;var r = !1;try {
          var i = [7],
              s = i[n]();s.next = function () {
            r = !0;
          }, i[n] = function () {
            return s;
          }, e(i);
        } catch (a) {}return r;
      };
    }, { "./$.wks": 78 }], 54: [function (e, t, r) {
      t.exports = function (e, t) {
        return { value: t, done: !!e };
      };
    }, {}], 55: [function (e, t, r) {
      t.exports = {};
    }, {}], 56: [function (e, t, r) {
      var n = Object;t.exports = { create: n.create, getProto: n.getPrototypeOf, isEnum: {}.propertyIsEnumerable, getDesc: n.getOwnPropertyDescriptor, setDesc: n.defineProperty, setDescs: n.defineProperties, getKeys: n.keys, getNames: n.getOwnPropertyNames, getSymbols: n.getOwnPropertySymbols, each: [].forEach };
    }, {}], 57: [function (e, t, r) {
      var n = e("./$"),
          o = e("./$.to-iobject");t.exports = function (e, t) {
        for (var r, i = o(e), s = n.getKeys(i), a = s.length, c = 0; a > c;) {
          if (i[r = s[c++]] === t) return r;
        }
      };
    }, { "./$": 56, "./$.to-iobject": 74 }], 58: [function (e, t, r) {
      t.exports = !0;
    }, {}], 59: [function (e, t, r) {
      var n,
          o,
          i,
          s = e("./$.global"),
          a = e("./$.task").set,
          c = s.MutationObserver || s.WebKitMutationObserver,
          u = s.process,
          l = s.Promise,
          f = "process" == e("./$.cof")(u),
          d = function d() {
        var e, t, r;for (f && (e = u.domain) && (u.domain = null, e.exit()); n;) {
          t = n.domain, r = n.fn, t && t.enter(), r(), t && t.exit(), n = n.next;
        }o = void 0, e && e.enter();
      };if (f) i = function i() {
        u.nextTick(d);
      };else if (c) {
        var p = 1,
            b = document.createTextNode("");new c(d).observe(b, { characterData: !0 }), i = function i() {
          b.data = p = -p;
        };
      } else i = l && l.resolve ? function () {
        l.resolve().then(d);
      } : function () {
        a.call(s, d);
      };t.exports = function (e) {
        var t = { fn: e, next: void 0, domain: f && u.domain };o && (o.next = t), n || (n = t, i()), o = t;
      };
    }, { "./$.cof": 30, "./$.global": 41, "./$.task": 72 }], 60: [function (e, t, r) {
      var n = e("./$.export"),
          o = e("./$.core"),
          i = e("./$.fails");t.exports = function (e, t) {
        var r = (o.Object || {})[e] || Object[e],
            s = {};s[e] = t(r), n(n.S + n.F * i(function () {
          r(1);
        }), "Object", s);
      };
    }, { "./$.core": 31, "./$.export": 37, "./$.fails": 38 }], 61: [function (e, t, r) {
      t.exports = function (e, t) {
        return { enumerable: !(1 & e), configurable: !(2 & e), writable: !(4 & e), value: t };
      };
    }, {}], 62: [function (e, t, r) {
      var n = e("./$.redefine");t.exports = function (e, t) {
        for (var r in t) {
          n(e, r, t[r]);
        }return e;
      };
    }, { "./$.redefine": 63 }], 63: [function (e, t, r) {
      t.exports = e("./$.hide");
    }, { "./$.hide": 43 }], 64: [function (e, t, r) {
      t.exports = Object.is || function (e, t) {
        return e === t ? 0 !== e || 1 / e === 1 / t : e != e && t != t;
      };
    }, {}], 65: [function (e, t, r) {
      var n = e("./$").getDesc,
          o = e("./$.is-object"),
          i = e("./$.an-object"),
          s = function s(e, t) {
        if (i(e), !o(t) && null !== t) throw TypeError(t + ": can't set as prototype!");
      };t.exports = { set: Object.setPrototypeOf || ("__proto__" in {} ? function (t, r, o) {
          try {
            o = e("./$.ctx")(Function.call, n(Object.prototype, "__proto__").set, 2), o(t, []), r = !(t instanceof Array);
          } catch (i) {
            r = !0;
          }return function (e, t) {
            return s(e, t), r ? e.__proto__ = t : o(e, t), e;
          };
        }({}, !1) : void 0), check: s };
    }, { "./$": 56, "./$.an-object": 28, "./$.ctx": 32, "./$.is-object": 49 }], 66: [function (e, t, r) {
      "use strict";
      var n = e("./$.core"),
          o = e("./$"),
          i = e("./$.descriptors"),
          s = e("./$.wks")("species");t.exports = function (e) {
        var t = n[e];i && t && !t[s] && o.setDesc(t, s, { configurable: !0, get: function get() {
            return this;
          } });
      };
    }, { "./$": 56, "./$.core": 31, "./$.descriptors": 34, "./$.wks": 78 }], 67: [function (e, t, r) {
      var n = e("./$").setDesc,
          o = e("./$.has"),
          i = e("./$.wks")("toStringTag");t.exports = function (e, t, r) {
        e && !o(e = r ? e : e.prototype, i) && n(e, i, { configurable: !0, value: t });
      };
    }, { "./$": 56, "./$.has": 42, "./$.wks": 78 }], 68: [function (e, t, r) {
      var n = e("./$.global"),
          o = "__core-js_shared__",
          i = n[o] || (n[o] = {});t.exports = function (e) {
        return i[e] || (i[e] = {});
      };
    }, { "./$.global": 41 }], 69: [function (e, t, r) {
      var n = e("./$.an-object"),
          o = e("./$.a-function"),
          i = e("./$.wks")("species");t.exports = function (e, t) {
        var r,
            s = n(e).constructor;return void 0 === s || void 0 == (r = n(s)[i]) ? t : o(r);
      };
    }, { "./$.a-function": 26, "./$.an-object": 28, "./$.wks": 78 }], 70: [function (e, t, r) {
      t.exports = function (e, t, r) {
        if (!(e instanceof t)) throw TypeError(r + ": use the 'new' operator!");return e;
      };
    }, {}], 71: [function (e, t, r) {
      var n = e("./$.to-integer"),
          o = e("./$.defined");t.exports = function (e) {
        return function (t, r) {
          var i,
              s,
              a = String(o(t)),
              c = n(r),
              u = a.length;return 0 > c || c >= u ? e ? "" : void 0 : (i = a.charCodeAt(c), 55296 > i || i > 56319 || c + 1 === u || (s = a.charCodeAt(c + 1)) < 56320 || s > 57343 ? e ? a.charAt(c) : i : e ? a.slice(c, c + 2) : (i - 55296 << 10) + (s - 56320) + 65536);
        };
      };
    }, { "./$.defined": 33, "./$.to-integer": 73 }], 72: [function (e, t, r) {
      var n,
          o,
          i,
          s = e("./$.ctx"),
          a = e("./$.invoke"),
          c = e("./$.html"),
          u = e("./$.dom-create"),
          l = e("./$.global"),
          f = l.process,
          d = l.setImmediate,
          p = l.clearImmediate,
          b = l.MessageChannel,
          h = 0,
          v = {},
          y = "onreadystatechange",
          _ = function _() {
        var e = +this;if (v.hasOwnProperty(e)) {
          var t = v[e];delete v[e], t();
        }
      },
          g = function g(e) {
        _.call(e.data);
      };d && p || (d = function d(e) {
        for (var t = [], r = 1; arguments.length > r;) {
          t.push(arguments[r++]);
        }return v[++h] = function () {
          a("function" == typeof e ? e : Function(e), t);
        }, n(h), h;
      }, p = function p(e) {
        delete v[e];
      }, "process" == e("./$.cof")(f) ? n = function n(e) {
        f.nextTick(s(_, e, 1));
      } : b ? (o = new b(), i = o.port2, o.port1.onmessage = g, n = s(i.postMessage, i, 1)) : l.addEventListener && "function" == typeof postMessage && !l.importScripts ? (n = function n(e) {
        l.postMessage(e + "", "*");
      }, l.addEventListener("message", g, !1)) : n = y in u("script") ? function (e) {
        c.appendChild(u("script"))[y] = function () {
          c.removeChild(this), _.call(e);
        };
      } : function (e) {
        setTimeout(s(_, e, 1), 0);
      }), t.exports = { set: d, clear: p };
    }, { "./$.cof": 30, "./$.ctx": 32, "./$.dom-create": 35, "./$.global": 41, "./$.html": 44, "./$.invoke": 45 }], 73: [function (e, t, r) {
      var n = Math.ceil,
          o = Math.floor;t.exports = function (e) {
        return isNaN(e = +e) ? 0 : (e > 0 ? o : n)(e);
      };
    }, {}], 74: [function (e, t, r) {
      var n = e("./$.iobject"),
          o = e("./$.defined");t.exports = function (e) {
        return n(o(e));
      };
    }, { "./$.defined": 33, "./$.iobject": 46 }], 75: [function (e, t, r) {
      var n = e("./$.to-integer"),
          o = Math.min;t.exports = function (e) {
        return e > 0 ? o(n(e), 9007199254740991) : 0;
      };
    }, { "./$.to-integer": 73 }], 76: [function (e, t, r) {
      var n = e("./$.defined");t.exports = function (e) {
        return Object(n(e));
      };
    }, { "./$.defined": 33 }], 77: [function (e, t, r) {
      var n = 0,
          o = Math.random();t.exports = function (e) {
        return "Symbol(".concat(void 0 === e ? "" : e, ")_", (++n + o).toString(36));
      };
    }, {}], 78: [function (e, t, r) {
      var n = e("./$.shared")("wks"),
          o = e("./$.uid"),
          i = e("./$.global").Symbol;t.exports = function (e) {
        return n[e] || (n[e] = i && i[e] || (i || o)("Symbol." + e));
      };
    }, { "./$.global": 41, "./$.shared": 68, "./$.uid": 77 }], 79: [function (e, t, r) {
      var n = e("./$.classof"),
          o = e("./$.wks")("iterator"),
          i = e("./$.iterators");t.exports = e("./$.core").getIteratorMethod = function (e) {
        return void 0 != e ? e[o] || e["@@iterator"] || i[n(e)] : void 0;
      };
    }, { "./$.classof": 29, "./$.core": 31, "./$.iterators": 55, "./$.wks": 78 }], 80: [function (e, t, r) {
      "use strict";
      var n = e("./$.add-to-unscopables"),
          o = e("./$.iter-step"),
          i = e("./$.iterators"),
          s = e("./$.to-iobject");t.exports = e("./$.iter-define")(Array, "Array", function (e, t) {
        this._t = s(e), this._i = 0, this._k = t;
      }, function () {
        var e = this._t,
            t = this._k,
            r = this._i++;return !e || r >= e.length ? (this._t = void 0, o(1)) : "keys" == t ? o(0, r) : "values" == t ? o(0, e[r]) : o(0, [r, e[r]]);
      }, "values"), i.Arguments = i.Array, n("keys"), n("values"), n("entries");
    }, { "./$.add-to-unscopables": 27, "./$.iter-define": 52, "./$.iter-step": 54, "./$.iterators": 55, "./$.to-iobject": 74 }], 81: [function (e, t, r) {
      var n = e("./$.to-iobject");e("./$.object-sap")("getOwnPropertyDescriptor", function (e) {
        return function (t, r) {
          return e(n(t), r);
        };
      });
    }, { "./$.object-sap": 60, "./$.to-iobject": 74 }], 82: [function (e, t, r) {
      var n = e("./$.to-object");e("./$.object-sap")("getPrototypeOf", function (e) {
        return function (t) {
          return e(n(t));
        };
      });
    }, { "./$.object-sap": 60, "./$.to-object": 76 }], 83: [function (e, t, r) {
      var n = e("./$.to-object");e("./$.object-sap")("keys", function (e) {
        return function (t) {
          return e(n(t));
        };
      });
    }, { "./$.object-sap": 60, "./$.to-object": 76 }], 84: [function (e, t, r) {
      var n = e("./$.export");n(n.S, "Object", { setPrototypeOf: e("./$.set-proto").set });
    }, { "./$.export": 37, "./$.set-proto": 65 }], 85: [function (e, t, r) {}, {}], 86: [function (e, t, r) {
      "use strict";
      var n,
          o = e("./$"),
          i = e("./$.library"),
          s = e("./$.global"),
          a = e("./$.ctx"),
          c = e("./$.classof"),
          u = e("./$.export"),
          l = e("./$.is-object"),
          f = e("./$.an-object"),
          d = e("./$.a-function"),
          p = e("./$.strict-new"),
          b = e("./$.for-of"),
          h = e("./$.set-proto").set,
          v = e("./$.same-value"),
          y = e("./$.wks")("species"),
          _ = e("./$.species-constructor"),
          g = e("./$.microtask"),
          m = "Promise",
          j = s.process,
          $ = "process" == c(j),
          _O = s[m],
          w = function w(e) {
        var t = new _O(function () {});return e && (t.constructor = Object), _O.resolve(t) === t;
      },
          k = function () {
        function t(e) {
          var r = new _O(e);return h(r, t.prototype), r;
        }var r = !1;try {
          if (r = _O && _O.resolve && w(), h(t, _O), t.prototype = o.create(_O.prototype, { constructor: { value: t } }), t.resolve(5).then(function () {}) instanceof t || (r = !1), r && e("./$.descriptors")) {
            var n = !1;_O.resolve(o.setDesc({}, "then", { get: function get() {
                n = !0;
              } })), r = n;
          }
        } catch (i) {
          r = !1;
        }return r;
      }(),
          x = function x(e, t) {
        return i && e === _O && t === n ? !0 : v(e, t);
      },
          C = function C(e) {
        var t = f(e)[y];return void 0 != t ? t : e;
      },
          E = function E(e) {
        var t;return l(e) && "function" == typeof (t = e.then) ? t : !1;
      },
          S = function S(e) {
        var t, r;this.promise = new e(function (e, n) {
          if (void 0 !== t || void 0 !== r) throw TypeError("Bad Promise constructor");t = e, r = n;
        }), this.resolve = d(t), this.reject = d(r);
      },
          T = function T(e) {
        try {
          e();
        } catch (t) {
          return { error: t };
        }
      },
          M = function M(e, t) {
        if (!e.n) {
          e.n = !0;var r = e.c;g(function () {
            for (var n = e.v, o = 1 == e.s, i = 0, a = function a(t) {
              var r,
                  i,
                  s = o ? t.ok : t.fail,
                  a = t.resolve,
                  c = t.reject;try {
                s ? (o || (e.h = !0), r = s === !0 ? n : s(n), r === t.promise ? c(TypeError("Promise-chain cycle")) : (i = E(r)) ? i.call(r, a, c) : a(r)) : c(n);
              } catch (u) {
                c(u);
              }
            }; r.length > i;) {
              a(r[i++]);
            }r.length = 0, e.n = !1, t && setTimeout(function () {
              var t,
                  r,
                  o = e.p;N(o) && ($ ? j.emit("unhandledRejection", n, o) : (t = s.onunhandledrejection) ? t({ promise: o, reason: n }) : (r = s.console) && r.error && r.error("Unhandled promise rejection", n)), e.a = void 0;
            }, 1);
          });
        }
      },
          N = function N(e) {
        var t,
            r = e._d,
            n = r.a || r.c,
            o = 0;if (r.h) return !1;for (; n.length > o;) {
          if (t = n[o++], t.fail || !N(t.promise)) return !1;
        }return !0;
      },
          R = function R(e) {
        var t = this;t.d || (t.d = !0, t = t.r || t, t.v = e, t.s = 2, t.a = t.c.slice(), M(t, !0));
      },
          D = function D(e) {
        var t,
            r = this;if (!r.d) {
          r.d = !0, r = r.r || r;try {
            if (r.p === e) throw TypeError("Promise can't be resolved itself");(t = E(e)) ? g(function () {
              var n = { r: r, d: !1 };try {
                t.call(e, a(D, n, 1), a(R, n, 1));
              } catch (o) {
                R.call(n, o);
              }
            }) : (r.v = e, r.s = 1, M(r, !1));
          } catch (n) {
            R.call({ r: r, d: !1 }, n);
          }
        }
      };k || (_O = function O(e) {
        d(e);var t = this._d = { p: p(this, _O, m), c: [], a: void 0, s: 0, d: !1, v: void 0, h: !1, n: !1 };try {
          e(a(D, t, 1), a(R, t, 1));
        } catch (r) {
          R.call(t, r);
        }
      }, e("./$.redefine-all")(_O.prototype, { then: function then(e, t) {
          var r = new S(_(this, _O)),
              n = r.promise,
              o = this._d;return r.ok = "function" == typeof e ? e : !0, r.fail = "function" == typeof t && t, o.c.push(r), o.a && o.a.push(r), o.s && M(o, !1), n;
        }, "catch": function _catch(e) {
          return this.then(void 0, e);
        } })), u(u.G + u.W + u.F * !k, { Promise: _O }), e("./$.set-to-string-tag")(_O, m), e("./$.set-species")(m), n = e("./$.core")[m], u(u.S + u.F * !k, m, { reject: function reject(e) {
          var t = new S(this),
              r = t.reject;return r(e), t.promise;
        } }), u(u.S + u.F * (!k || w(!0)), m, { resolve: function resolve(e) {
          if (e instanceof _O && x(e.constructor, this)) return e;var t = new S(this),
              r = t.resolve;return r(e), t.promise;
        } }), u(u.S + u.F * !(k && e("./$.iter-detect")(function (e) {
        _O.all(e)["catch"](function () {});
      })), m, { all: function all(e) {
          var t = C(this),
              r = new S(t),
              n = r.resolve,
              i = r.reject,
              s = [],
              a = T(function () {
            b(e, !1, s.push, s);var r = s.length,
                a = Array(r);r ? o.each.call(s, function (e, o) {
              var s = !1;t.resolve(e).then(function (e) {
                s || (s = !0, a[o] = e, --r || n(a));
              }, i);
            }) : n(a);
          });return a && i(a.error), r.promise;
        }, race: function race(e) {
          var t = C(this),
              r = new S(t),
              n = r.reject,
              o = T(function () {
            b(e, !1, function (e) {
              t.resolve(e).then(r.resolve, n);
            });
          });return o && n(o.error), r.promise;
        } });
    }, { "./$": 56, "./$.a-function": 26, "./$.an-object": 28, "./$.classof": 29, "./$.core": 31, "./$.ctx": 32, "./$.descriptors": 34, "./$.export": 37, "./$.for-of": 39, "./$.global": 41, "./$.is-object": 49, "./$.iter-detect": 53, "./$.library": 58, "./$.microtask": 59, "./$.redefine-all": 62, "./$.same-value": 64, "./$.set-proto": 65, "./$.set-species": 66, "./$.set-to-string-tag": 67, "./$.species-constructor": 69, "./$.strict-new": 70, "./$.wks": 78 }], 87: [function (e, t, r) {
      "use strict";
      var n = e("./$.string-at")(!0);e("./$.iter-define")(String, "String", function (e) {
        this._t = String(e), this._i = 0;
      }, function () {
        var e,
            t = this._t,
            r = this._i;return r >= t.length ? { value: void 0, done: !0 } : (e = n(t, r), this._i += e.length, { value: e, done: !1 });
      });
    }, { "./$.iter-define": 52, "./$.string-at": 71 }], 88: [function (e, t, r) {
      "use strict";
      var n = e("./$"),
          o = e("./$.global"),
          i = e("./$.has"),
          s = e("./$.descriptors"),
          a = e("./$.export"),
          c = e("./$.redefine"),
          u = e("./$.fails"),
          l = e("./$.shared"),
          f = e("./$.set-to-string-tag"),
          d = e("./$.uid"),
          p = e("./$.wks"),
          b = e("./$.keyof"),
          h = e("./$.get-names"),
          v = e("./$.enum-keys"),
          y = e("./$.is-array"),
          _ = e("./$.an-object"),
          g = e("./$.to-iobject"),
          m = e("./$.property-desc"),
          j = n.getDesc,
          $ = n.setDesc,
          O = n.create,
          w = h.get,
          k = o.Symbol,
          x = o.JSON,
          C = x && x.stringify,
          E = !1,
          S = p("_hidden"),
          T = n.isEnum,
          M = l("symbol-registry"),
          N = l("symbols"),
          R = "function" == typeof k,
          D = Object.prototype,
          P = s && u(function () {
        return 7 != O($({}, "a", { get: function get() {
            return $(this, "a", { value: 7 }).a;
          } })).a;
      }) ? function (e, t, r) {
        var n = j(D, t);n && delete D[t], $(e, t, r), n && e !== D && $(D, t, n);
      } : $,
          A = function A(e) {
        var t = N[e] = O(k.prototype);return t._k = e, s && E && P(D, e, { configurable: !0, set: function set(t) {
            i(this, S) && i(this[S], e) && (this[S][e] = !1), P(this, e, m(1, t));
          } }), t;
      },
          L = function L(e) {
        return "symbol" == (typeof e === "undefined" ? "undefined" : _typeof(e));
      },
          I = function I(e, t, r) {
        return r && i(N, t) ? (r.enumerable ? (i(e, S) && e[S][t] && (e[S][t] = !1), r = O(r, { enumerable: m(0, !1) })) : (i(e, S) || $(e, S, m(1, {})), e[S][t] = !0), P(e, t, r)) : $(e, t, r);
      },
          F = function F(e, t) {
        _(e);for (var r, n = v(t = g(t)), o = 0, i = n.length; i > o;) {
          I(e, r = n[o++], t[r]);
        }return e;
      },
          V = function V(e, t) {
        return void 0 === t ? O(e) : F(O(e), t);
      },
          z = function z(e) {
        var t = T.call(this, e);return t || !i(this, e) || !i(N, e) || i(this, S) && this[S][e] ? t : !0;
      },
          U = function U(e, t) {
        var r = j(e = g(e), t);return !r || !i(N, t) || i(e, S) && e[S][t] || (r.enumerable = !0), r;
      },
          H = function H(e) {
        for (var t, r = w(g(e)), n = [], o = 0; r.length > o;) {
          i(N, t = r[o++]) || t == S || n.push(t);
        }return n;
      },
          B = function B(e) {
        for (var t, r = w(g(e)), n = [], o = 0; r.length > o;) {
          i(N, t = r[o++]) && n.push(N[t]);
        }return n;
      },
          J = function J(e) {
        if (void 0 !== e && !L(e)) {
          for (var t, r, n = [e], o = 1, i = arguments; i.length > o;) {
            n.push(i[o++]);
          }return t = n[1], "function" == typeof t && (r = t), !r && y(t) || (t = function t(e, _t2) {
            return r && (_t2 = r.call(this, e, _t2)), L(_t2) ? void 0 : _t2;
          }), n[1] = t, C.apply(x, n);
        }
      },
          W = u(function () {
        var e = k();return "[null]" != C([e]) || "{}" != C({ a: e }) || "{}" != C(Object(e));
      });R || (k = function k() {
        if (L(this)) throw TypeError("Symbol is not a constructor");return A(d(arguments.length > 0 ? arguments[0] : void 0));
      }, c(k.prototype, "toString", function () {
        return this._k;
      }), L = function L(e) {
        return e instanceof k;
      }, n.create = V, n.isEnum = z, n.getDesc = U, n.setDesc = I, n.setDescs = F, n.getNames = h.get = H, n.getSymbols = B, s && !e("./$.library") && c(D, "propertyIsEnumerable", z, !0));var Y = { "for": function _for(e) {
          return i(M, e += "") ? M[e] : M[e] = k(e);
        }, keyFor: function keyFor(e) {
          return b(M, e);
        }, useSetter: function useSetter() {
          E = !0;
        }, useSimple: function useSimple() {
          E = !1;
        } };n.each.call("hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","), function (e) {
        var t = p(e);Y[e] = R ? t : A(t);
      }), E = !0, a(a.G + a.W, { Symbol: k }), a(a.S, "Symbol", Y), a(a.S + a.F * !R, "Object", { create: V, defineProperty: I, defineProperties: F, getOwnPropertyDescriptor: U, getOwnPropertyNames: H, getOwnPropertySymbols: B }), x && a(a.S + a.F * (!R || W), "JSON", { stringify: J }), f(k, "Symbol"), f(Math, "Math", !0), f(o.JSON, "JSON", !0);
    }, { "./$": 56, "./$.an-object": 28, "./$.descriptors": 34, "./$.enum-keys": 36, "./$.export": 37, "./$.fails": 38, "./$.get-names": 40, "./$.global": 41, "./$.has": 42, "./$.is-array": 48, "./$.keyof": 57, "./$.library": 58, "./$.property-desc": 61, "./$.redefine": 63, "./$.set-to-string-tag": 67, "./$.shared": 68, "./$.to-iobject": 74, "./$.uid": 77, "./$.wks": 78 }], 89: [function (e, t, r) {
      e("./es6.array.iterator");var n = e("./$.iterators");n.NodeList = n.HTMLCollection = n.Array;
    }, { "./$.iterators": 55, "./es6.array.iterator": 80 }], 90: [function (e, t, r) {
      window.MutationObserver = window.MutationObserver || window.WebKitMutationObserver || function (e) {
        function t(e) {
          this.g = [], this.k = e;
        }function r(e) {
          !function r() {
            var n = e.takeRecords();n.length && e.k(n, e), e.f = setTimeout(r, t._period);
          }();
        }function n(t) {
          var r,
              n = { type: null, target: null, addedNodes: [], removedNodes: [], previousSibling: null, nextSibling: null, attributeName: null, attributeNamespace: null, oldValue: null };for (r in t) {
            n[r] !== e && t[r] !== e && (n[r] = t[r]);
          }return n;
        }function o(e, t) {
          var r = a(e, t);return function (n) {
            var o,
                c = n.length;t.a && r.a && i(n, e, r.a, t.d), (t.b || t.e) && (o = s(n, e, r, t)), (o || n.length !== c) && (r = a(e, t));
          };
        }function i(t, r, o, i) {
          for (var s, a, c = {}, u = r.attributes, l = u.length; l--;) {
            s = u[l], a = s.name, i && i[a] === e || (s.value !== o[a] && t.push(n({ type: "attributes", target: r, attributeName: a, oldValue: o[a], attributeNamespace: s.namespaceURI })), c[a] = !0);
          }for (a in o) {
            c[a] || t.push(n({ target: r, type: "attributes", attributeName: a, oldValue: o[a] }));
          }
        }function s(t, r, o, s) {
          function a(e, r, o, a, c) {
            var l = e.length - 1;c = - ~((l - c) / 2);for (var f, d, p; p = e.pop();) {
              f = o[p.h], d = a[p.i], s.b && c && Math.abs(p.h - p.i) >= l && (t.push(n({ type: "childList", target: r, addedNodes: [f], removedNodes: [f], nextSibling: f.nextSibling, previousSibling: f.previousSibling })), c--), s.a && d.a && i(t, f, d.a, s.d), s.c && 3 === f.nodeType && f.nodeValue !== d.c && t.push(n({ type: "characterData", target: f })), s.e && u(f, d);
            }
          }function u(r, o) {
            for (var d, p, b, h, v, y = r.childNodes, _ = o.b, g = y.length, m = _ ? _.length : 0, j = 0, $ = 0, O = 0; g > $ || m > O;) {
              h = y[$], v = (b = _[O]) && b.j, h === v ? (s.a && b.a && i(t, h, b.a, s.d), s.c && b.c !== e && h.nodeValue !== b.c && t.push(n({ type: "characterData", target: h })), p && a(p, r, y, _, j), s.e && (h.childNodes.length || b.b && b.b.length) && u(h, b), $++, O++) : (l = !0, d || (d = {}, p = []), h && (d[b = c(h)] || (d[b] = !0, -1 === (b = f(_, h, O, "j")) ? s.b && (t.push(n({ type: "childList", target: r, addedNodes: [h], nextSibling: h.nextSibling, previousSibling: h.previousSibling })), j++) : p.push({ h: $, i: b })), $++), v && v !== y[$] && (d[b = c(v)] || (d[b] = !0, -1 === (b = f(y, v, $)) ? s.b && (t.push(n({ type: "childList", target: o.j, removedNodes: [v], nextSibling: _[O + 1], previousSibling: _[O - 1] })), j--) : p.push({ h: b, i: O })), O++));
            }p && a(p, r, y, _, j);
          }var l;return u(r, o), l;
        }function a(e, t) {
          var r = !0;return function n(e) {
            var o = { j: e };return !t.c || 3 !== e.nodeType && 8 !== e.nodeType ? (t.a && r && 1 === e.nodeType && (o.a = l(e.attributes, function (e, r) {
              return t.d && !t.d[r.name] || (e[r.name] = r.value), e;
            })), r && (t.b || t.c || t.a && t.e) && (o.b = u(e.childNodes, n)), r = t.e) : o.c = e.nodeValue, o;
          }(e);
        }function c(e) {
          try {
            return e.id || (e.mo_id = e.mo_id || d++);
          } catch (t) {
            try {
              return e.nodeValue;
            } catch (r) {
              return d++;
            }
          }
        }function u(e, t) {
          for (var r = [], n = 0; n < e.length; n++) {
            r[n] = t(e[n], n, e);
          }return r;
        }function l(e, t) {
          for (var r = {}, n = 0; n < e.length; n++) {
            r = t(r, e[n], n, e);
          }return r;
        }function f(e, t, r, n) {
          for (; r < e.length; r++) {
            if ((n ? e[r][n] : e[r]) === t) return r;
          }return -1;
        }t._period = 30, t.prototype = { observe: function observe(e, t) {
            for (var n = { a: !!(t.attributes || t.attributeFilter || t.attributeOldValue), b: !!t.childList, e: !!t.subtree, c: !(!t.characterData && !t.characterDataOldValue) }, i = this.g, s = 0; s < i.length; s++) {
              i[s].m === e && i.splice(s, 1);
            }t.attributeFilter && (n.d = l(t.attributeFilter, function (e, t) {
              return e[t] = !0, e;
            })), i.push({ m: e, l: o(e, n) }), this.f || r(this);
          }, takeRecords: function takeRecords() {
            for (var e = [], t = this.g, r = 0; r < t.length; r++) {
              t[r].l(e);
            }return e;
          }, disconnect: function disconnect() {
            this.g = [], clearTimeout(this.f), this.f = null;
          } };var d = 1;return t;
      }(void 0);
    }, {}], 91: [function (e, t, r) {
      Object.observe || function (e, t, r, n) {
        "use strict";
        var o,
            i,
            s = ["add", "update", "delete", "reconfigure", "setPrototype", "preventExtensions"],
            a = t.isArray || function (e) {
          return function (t) {
            return "[object Array]" === e.call(t);
          };
        }(e.prototype.toString),
            c = t.prototype.indexOf ? t.indexOf || function (e, r, n) {
          return t.prototype.indexOf.call(e, r, n);
        } : function (e, t, r) {
          for (var n = r || 0; n < e.length; n++) {
            if (e[n] === t) return n;
          }return -1;
        },
            u = r.Map !== n && Map.prototype.forEach ? function () {
          return new Map();
        } : function () {
          var e = [],
              t = [];return { size: 0, has: function has(t) {
              return c(e, t) > -1;
            }, get: function get(r) {
              return t[c(e, r)];
            }, set: function set(r, n) {
              var o = c(e, r);-1 === o ? (e.push(r), t.push(n), this.size++) : t[o] = n;
            }, "delete": function _delete(r) {
              var n = c(e, r);n > -1 && (e.splice(n, 1), t.splice(n, 1), this.size--);
            }, forEach: function forEach(r) {
              for (var n = 0; n < e.length; n++) {
                r.call(arguments[1], t[n], e[n], this);
              }
            } };
        },
            l = e.getOwnPropertyNames ? function () {
          var t = e.getOwnPropertyNames;try {
            arguments.callee;
          } catch (r) {
            var n = (t(c).join(" ") + " ").replace(/prototype |length |name /g, "").slice(0, -1).split(" ");n.length && (t = function t(_t3) {
              var r = e.getOwnPropertyNames(_t3);if ("function" == typeof _t3) for (var o, i = 0; i < n.length;) {
                (o = c(r, n[i++])) > -1 && r.splice(o, 1);
              }return r;
            });
          }return t;
        }() : function (t) {
          var r,
              n,
              o = [];if ("hasOwnProperty" in t) for (r in t) {
            t.hasOwnProperty(r) && o.push(r);
          } else {
            n = e.hasOwnProperty;for (r in t) {
              n.call(t, r) && o.push(r);
            }
          }return a(t) && o.push("length"), o;
        },
            f = e.getPrototypeOf,
            d = e.defineProperties && e.getOwnPropertyDescriptor,
            p = r.requestAnimationFrame || r.webkitRequestAnimationFrame || function () {
          var e = +new Date(),
              t = e;return function (r) {
            return setTimeout(function () {
              r((t = +new Date()) - e);
            }, 17);
          };
        }(),
            b = function b(e, t, r) {
          var n = o.get(e);n ? (v(n, e), m(e, n, t, r)) : (n = h(e), m(e, n, t, r), 1 === o.size && p(y));
        },
            h = function h(t, r) {
          var n,
              i = l(t),
              s = [],
              a = 0,
              r = { handlers: u(), frozen: e.isFrozen ? e.isFrozen(t) : !1, extensible: e.isExtensible ? e.isExtensible(t) : !0, proto: f && f(t), properties: i, values: s, notifier: g(t, r) };if (d) for (n = r.descriptors = []; a < i.length;) {
            n[a] = d(t, i[a]), s[a] = t[i[a++]];
          } else for (; a < i.length;) {
            s[a] = t[i[a++]];
          }return o.set(t, r), r;
        },
            v = function () {
          var t = d ? function (e, t, r, n, o) {
            var i = t.properties[r],
                s = e[i],
                a = t.values[r],
                c = t.descriptors[r];"value" in o && (a === s ? 0 === a && 1 / a !== 1 / s : a === a || s === s) && (j(e, t, { name: i, type: "update", object: e, oldValue: a }, n), t.values[r] = s), !c.configurable || o.configurable && o.writable === c.writable && o.enumerable === c.enumerable && o.get === c.get && o.set === c.set || (j(e, t, { name: i, type: "reconfigure", object: e, oldValue: a }, n), t.descriptors[r] = o);
          } : function (e, t, r, n) {
            var o = t.properties[r],
                i = e[o],
                s = t.values[r];(s === i ? 0 === s && 1 / s !== 1 / i : s === s || i === i) && (j(e, t, { name: o, type: "update", object: e, oldValue: s }, n), t.values[r] = i);
          },
              r = d ? function (e, r, n, o, i) {
            for (var s, a = r.length; n && a--;) {
              null !== r[a] && (s = d(e, r[a]), n--, s ? t(e, o, a, i, s) : (j(e, o, { name: r[a], type: "delete", object: e, oldValue: o.values[a] }, i), o.properties.splice(a, 1), o.values.splice(a, 1), o.descriptors.splice(a, 1)));
            }
          } : function (e, t, r, n, o) {
            for (var i = t.length; r && i--;) {
              null !== t[i] && (j(e, n, { name: t[i], type: "delete", object: e, oldValue: n.values[i] }, o), n.properties.splice(i, 1), n.values.splice(i, 1), r--);
            }
          };return function (n, o, i) {
            if (n.handlers.size && !n.frozen) {
              var s,
                  a,
                  u,
                  p,
                  b,
                  h,
                  v,
                  y,
                  _ = n.values,
                  g = n.descriptors,
                  m = 0;if (n.extensible) {
                if (s = n.properties.slice(), a = s.length, u = l(o), g) {
                  for (; m < u.length;) {
                    b = u[m++], p = c(s, b), y = d(o, b), -1 === p ? (j(o, n, { name: b, type: "add", object: o }, i), n.properties.push(b), _.push(o[b]), g.push(y)) : (s[p] = null, a--, t(o, n, p, i, y));
                  }r(o, s, a, n, i), e.isExtensible(o) || (n.extensible = !1, j(o, n, { type: "preventExtensions", object: o }, i), n.frozen = e.isFrozen(o));
                } else {
                  for (; m < u.length;) {
                    b = u[m++], p = c(s, b), h = o[b], -1 === p ? (j(o, n, { name: b, type: "add", object: o }, i), n.properties.push(b), _.push(h)) : (s[p] = null, a--, t(o, n, p, i));
                  }r(o, s, a, n, i);
                }
              } else if (!n.frozen) {
                for (; m < s.length; m++) {
                  b = s[m], t(o, n, m, i, d(o, b));
                }e.isFrozen(o) && (n.frozen = !0);
              }f && (v = f(o), v !== n.proto && (j(o, n, { type: "setPrototype", name: "__proto__", object: o, oldValue: n.proto }), n.proto = v));
            }
          };
        }(),
            y = function y() {
          o.size && (o.forEach(v), i.forEach(_), p(y));
        },
            _ = function _(e, t) {
          var r = e.changeRecords;r.length && (e.changeRecords = [], t(r));
        },
            g = function g(e, t) {
          return arguments.length < 2 && (t = o.get(e)), t && t.notifier || { notify: function notify(t) {
              t.type;var r = o.get(e);if (r) {
                var n,
                    i = { object: e };for (n in t) {
                  "object" !== n && (i[n] = t[n]);
                }j(e, r, i);
              }
            }, performChange: function performChange(t, r) {
              if ("string" != typeof t) throw new TypeError("Invalid non-string changeType");if ("function" != typeof r) throw new TypeError("Cannot perform non-function");var i,
                  s,
                  a = o.get(e),
                  c = arguments[2],
                  u = c === n ? r() : r.call(c);if (a && v(a, e, t), a && u && "object" == (typeof u === "undefined" ? "undefined" : _typeof(u))) {
                s = { object: e, type: t };for (i in u) {
                  "object" !== i && "type" !== i && (s[i] = u[i]);
                }j(e, a, s);
              }
            } };
        },
            m = function m(e, t, r, n) {
          var o = i.get(r);o || i.set(r, o = { observed: u(), changeRecords: [] }), o.observed.set(e, { acceptList: n.slice(), data: t }), t.handlers.set(r, o);
        },
            j = function j(e, t, r, n) {
          t.handlers.forEach(function (t) {
            var o = t.observed.get(e).acceptList;("string" != typeof n || -1 === c(o, n)) && c(o, r.type) > -1 && t.changeRecords.push(r);
          });
        };o = u(), i = u(), e.observe = function (t, r, o) {
          if (!t || "object" != (typeof t === "undefined" ? "undefined" : _typeof(t)) && "function" != typeof t) throw new TypeError("Object.observe cannot observe non-object");if ("function" != typeof r) throw new TypeError("Object.observe cannot deliver to non-function");if (e.isFrozen && e.isFrozen(r)) throw new TypeError("Object.observe cannot deliver to a frozen function object");if (o === n) o = s;else if (!o || "object" != (typeof o === "undefined" ? "undefined" : _typeof(o))) throw new TypeError("Third argument to Object.observe must be an array of strings.");return b(t, r, o), t;
        }, e.unobserve = function (e, t) {
          if (null === e || "object" != (typeof e === "undefined" ? "undefined" : _typeof(e)) && "function" != typeof e) throw new TypeError("Object.unobserve cannot unobserve non-object");if ("function" != typeof t) throw new TypeError("Object.unobserve cannot deliver to non-function");var r,
              n = i.get(t);return n && (r = n.observed.get(e)) && (n.observed.forEach(function (e, t) {
            v(e.data, t);
          }), p(function () {
            _(n, t);
          }), 1 === n.observed.size && n.observed.has(e) ? i["delete"](t) : n.observed["delete"](e), 1 === r.data.handlers.size ? o["delete"](e) : r.data.handlers["delete"](t)), e;
        }, e.getNotifier = function (t) {
          if (null === t || "object" != (typeof t === "undefined" ? "undefined" : _typeof(t)) && "function" != typeof t) throw new TypeError("Object.getNotifier cannot getNotifier non-object");return e.isFrozen && e.isFrozen(t) ? null : g(t);
        }, e.deliverChangeRecords = function (e) {
          if ("function" != typeof e) throw new TypeError("Object.deliverChangeRecords cannot deliver to non-function");var t = i.get(e);t && (t.observed.forEach(function (e, t) {
            v(e.data, t);
          }), _(t, e));
        };
      }(Object, Array, this);
    }, {}], 92: [function (e, t, r) {
      "use strict";
      function n(e) {
        return e && e.__esModule ? e : { "default": e };
      }Object.defineProperty(r, "__esModule", { value: !0 }), r.DataObjectObserver = r.DataObjectReporter = r.Syncher = void 0, e("mutationobserver-shim"), e("object.observe"), e("array.observe");var o = e("./syncher/Syncher"),
          i = n(o),
          s = e("./syncher/DataObjectReporter"),
          a = n(s),
          c = e("./syncher/DataObjectObserver"),
          u = n(c);r.Syncher = i["default"], r.DataObjectReporter = a["default"], r.DataObjectObserver = u["default"];
    }, { "./syncher/DataObjectObserver": 95, "./syncher/DataObjectReporter": 96, "./syncher/Syncher": 99, "array.observe": 1, "mutationobserver-shim": 90, "object.observe": 91 }], 93: [function (e, t, r) {
      "use strict";
      function n(e) {
        return e && e.__esModule ? e : { "default": e };
      }Object.defineProperty(r, "__esModule", { value: !0 });var o = e("babel-runtime/core-js/promise"),
          i = n(o),
          s = e("babel-runtime/core-js/object/keys"),
          a = n(s),
          c = e("babel-runtime/helpers/classCallCheck"),
          u = n(c),
          l = e("babel-runtime/helpers/createClass"),
          f = n(l),
          d = e("./SyncObject"),
          p = n(d),
          b = e("./DataObjectChild"),
          h = n(b),
          v = e("../utils/utils.js"),
          y = function () {
        function e(t, r, n, o, i, s) {
          (0, u["default"])(this, e);var a = this;a._syncher = t, a._url = r, a._schema = n, a._status = o, a._syncObj = new p["default"](i), a._childrens = s, a._version = 0, a._childId = 0, a._childrenObjects = {}, a._childrenListeners = [], a._owner = t._owner, a._bus = t._bus;
        }return (0, f["default"])(e, [{ key: "_allocateListeners", value: function value() {
            var e = this,
                t = this,
                r = t._url + "/children/";t._childrens && t._childrens.forEach(function (n) {
              var o = r + n,
                  i = t._bus.addListener(o, function (r) {
                if (r.from !== e._owner) switch (console.log("DataObject-Children-RCV: ", r), r.type) {case "create":
                    t._onChildCreate(r);break;case "delete":
                    console.log(r);break;default:
                    t._changeChildren(r);}
              });t._childrenListeners.push(i);
            });
          } }, { key: "_releaseListeners", value: function value() {
            var e = this;e._childrenListeners.forEach(function (e) {
              e.remove();
            }), (0, a["default"])(e._childrenObjects).forEach(function (t) {
              e._childrenObjects[t]._releaseListeners();
            });
          } }, { key: "pause", value: function value() {
            throw "Not implemented";
          } }, { key: "resume", value: function value() {
            throw "Not implemented";
          } }, { key: "stop", value: function value() {
            throw "Not implemented";
          } }, { key: "addChild", value: function value(e, t) {
            var r = this;r._childId++;var n = r._owner + "#" + r._childId,
                o = r._url + "/children/" + e,
                s = { type: "create", from: r._owner, to: o, body: { resource: n, value: t } };return new i["default"](function (e) {
              var i = r._bus.postMessage(s);console.log("create-reporter-child( " + r._owner + " ): ", s);var a = new h["default"](r, n, t, r._owner, i);a.onChange(function (e) {
                r._onChange(e, { path: o, childId: n });
              }), r._childrenObjects[n] = a, e(a);
            });
          } }, { key: "onAddChild", value: function value(e) {
            this._onAddChildrenHandler = e;
          } }, { key: "_onChildCreate", value: function value(e) {
            var t = this,
                r = e.body.resource;console.log("create-observer-child( " + t._owner + " ): ", e);var n = new h["default"](t, r, e.body.value);t._childrenObjects[r] = n, setTimeout(function () {
              t._bus.postMessage({ id: e.id, type: "response", from: e.to, to: e.from, body: { code: 200, source: t._owner } });
            });var o = { type: e.type, from: e.from, url: e.to, value: e.body.value, childId: r, identity: e.body.identity };t._onAddChildrenHandler && (console.log("ADD-CHILDREN-EVENT: ", o), t._onAddChildrenHandler(o));
          } }, { key: "_onChange", value: function value(e, t) {
            var r = this;if (r._version++, "on" === r._status) {
              var n = { type: "update", from: r._url, to: r._url + "/changes", body: { version: r._version, source: r._owner, attribute: e.field } };e.oType === d.ObjectType.OBJECT ? e.cType !== d.ChangeType.REMOVE && (n.body.value = e.data) : (n.body.attributeType = e.oType, n.body.value = e.data, e.cType !== d.ChangeType.UPDATE && (n.body.operation = e.cType)), t && (n.to = t.path, n.body.resource = t.childId), r._bus.postMessage(n);
            }
          } }, { key: "_changeObject", value: function value(e, t) {
            var r = this;if (r._version + 1 === t.body.version) {
              r._version++;var n = t.body.attribute,
                  o = (0, v.deepClone)(t.body.value),
                  i = e.findBefore(n);if (t.body.attributeType === d.ObjectType.ARRAY) {
                if (t.body.operation === d.ChangeType.ADD) {
                  var s = i.obj,
                      a = i.last;Array.prototype.splice.apply(s, [a, 0].concat(o));
                } else if (t.body.operation === d.ChangeType.REMOVE) {
                  var c = i.obj,
                      u = i.last;c.splice(u, o);
                } else i.obj[i.last] = o;
              } else t.body.value ? i.obj[i.last] = o : delete i.obj[i.last];
            } else console.log("UNSYNCHRONIZED VERSION: (data => " + r._version + ", msg => " + t.body.version + ")");
          } }, { key: "_changeChildren", value: function value(e) {
            var t = this;console.log("Change children: ", t._owner, e);var r = e.body.resource,
                n = t._childrenObjects[r];n ? t._changeObject(n._syncObj, e) : console.log("No children found for: ", r);
          } }, { key: "url", get: function get() {
            return this._url;
          } }, { key: "schema", get: function get() {
            return this._schema;
          } }, { key: "status", get: function get() {
            return this._status;
          } }, { key: "data", get: function get() {
            return this._syncObj.data;
          } }, { key: "childrens", get: function get() {
            return this._childrenObjects;
          } }]), e;
      }();r["default"] = y, t.exports = r["default"];
    }, { "../utils/utils.js": 100, "./DataObjectChild": 94, "./SyncObject": 98, "babel-runtime/core-js/object/keys": 7, "babel-runtime/core-js/promise": 9, "babel-runtime/helpers/classCallCheck": 11, "babel-runtime/helpers/createClass": 12 }], 94: [function (e, t, r) {
      "use strict";
      function n(e) {
        return e && e.__esModule ? e : { "default": e };
      }Object.defineProperty(r, "__esModule", { value: !0 });var o = e("babel-runtime/helpers/classCallCheck"),
          i = n(o),
          s = e("babel-runtime/helpers/createClass"),
          a = n(s),
          c = e("./SyncObject"),
          u = n(c),
          l = function () {
        function e(t, r, n, o, s) {
          (0, i["default"])(this, e);var a = this;a._parent = t, a._childId = r, a._owner = o, a._msgId = s, a._syncObj = new u["default"](n), a._bus = t._bus, a._allocateListeners();
        }return (0, a["default"])(e, [{ key: "_allocateListeners", value: function value() {
            var e = this;e._owner && (e._listener = e._bus.addListener(e._owner, function (t) {
              "response" === t.type && t.id === e._msgId && (console.log("DataObjectChild.onResponse:", t), e._onResponse(t));
            }));
          } }, { key: "_releaseListeners", value: function value() {
            var e = this;e._listener && e._listener.remove();
          } }, { key: "delete", value: function value() {
            var e = this;delete e._parent._children[e._childId], e._releaseListeners();
          } }, { key: "onChange", value: function value(e) {
            this._syncObj.observe(function (t) {
              e(t);
            });
          } }, { key: "onResponse", value: function value(e) {
            this._onResponseHandler = e;
          } }, { key: "_onResponse", value: function value(e) {
            var t = this,
                r = { type: e.type, url: e.body.source, code: e.body.code };t._onResponseHandler && t._onResponseHandler(r);
          } }, { key: "childId", get: function get() {
            return this._childId;
          } }, { key: "data", get: function get() {
            return this._syncObj.data;
          } }]), e;
      }();r["default"] = l, t.exports = r["default"];
    }, { "./SyncObject": 98, "babel-runtime/helpers/classCallCheck": 11, "babel-runtime/helpers/createClass": 12 }], 95: [function (e, t, r) {
      "use strict";
      function n(e) {
        return e && e.__esModule ? e : { "default": e };
      }Object.defineProperty(r, "__esModule", { value: !0 });var o = e("babel-runtime/core-js/object/keys"),
          i = n(o),
          s = e("babel-runtime/core-js/object/get-prototype-of"),
          a = n(s),
          c = e("babel-runtime/helpers/classCallCheck"),
          u = n(c),
          l = e("babel-runtime/helpers/createClass"),
          f = n(l),
          d = e("babel-runtime/helpers/possibleConstructorReturn"),
          p = n(d),
          b = e("babel-runtime/helpers/get"),
          h = n(b),
          v = e("babel-runtime/helpers/inherits"),
          y = n(v),
          _ = e("./DataObject"),
          g = n(_),
          m = e("./DataObjectChild"),
          j = n(m),
          $ = { ANY: "any", START: "start", EXACT: "exact" },
          O = function (e) {
        function t(e, r, n, o, s, c, l) {
          (0, u["default"])(this, t);var f = (0, p["default"])(this, (0, a["default"])(t).call(this, e, r, n, o, s.data, c)),
              d = f;return d._version = l, d._filters = {}, d._syncObj.observe(function (e) {
            d._onFilter(e);
          }), (0, i["default"])(s.childrens).forEach(function (e) {
            var t = s.childrens[e];d._childrenObjects[e] = new j["default"](d, e, t);
          }), d._allocateListeners(), f;
        }return (0, y["default"])(t, e), (0, f["default"])(t, [{ key: "_allocateListeners", value: function value() {
            (0, h["default"])((0, a["default"])(t.prototype), "_allocateListeners", this).call(this);var e = this;e._changeListener = e._bus.addListener(e._url + "/changes", function (t) {
              "update" === t.type && (console.log("DataObjectObserver-" + e._url + "-RCV: ", t), e._changeObject(e._syncObj, t));
            });
          } }, { key: "_releaseListeners", value: function value() {
            (0, h["default"])((0, a["default"])(t.prototype), "_releaseListeners", this).call(this);var e = this;e._changeListener.remove();
          } }, { key: "delete", value: function value() {
            var e = this;e._releaseListeners(), delete e._syncher._observers[e._url];
          } }, { key: "unsubscribe", value: function value() {
            var e = this,
                t = { type: "unsubscribe", from: e._owner, to: e._syncher._subURL, body: { resource: e._url } };e._bus.postMessage(t, function (t) {
              console.log("DataObjectObserver-UNSUBSCRIBE: ", t), 200 === t.body.code && (e._releaseListeners(), delete e._syncher._observers[e._url]);
            });
          } }, { key: "onChange", value: function value(e, t) {
            var r = e,
                n = { type: $.EXACT, callback: t },
                o = e.indexOf("*");o === e.length - 1 && (0 === o ? n.type = $.ANY : (n.type = $.START, r = e.substr(0, e.length - 1))), this._filters[r] = n;
          } }, { key: "_onFilter", value: function value(e) {
            var t = this;(0, i["default"])(t._filters).forEach(function (r) {
              var n = t._filters[r];n.type === $.ANY ? n.callback(e) : n.type === $.START ? 0 === e.field.indexOf(r) && n.callback(e) : n.type === $.EXACT && e.field === r && n.callback(e);
            });
          } }]), t;
      }(g["default"]);r["default"] = O, t.exports = r["default"];
    }, { "./DataObject": 93, "./DataObjectChild": 94, "babel-runtime/core-js/object/get-prototype-of": 6, "babel-runtime/core-js/object/keys": 7, "babel-runtime/helpers/classCallCheck": 11, "babel-runtime/helpers/createClass": 12, "babel-runtime/helpers/get": 13, "babel-runtime/helpers/inherits": 14, "babel-runtime/helpers/possibleConstructorReturn": 15 }], 96: [function (e, t, r) {
      "use strict";
      function n(e) {
        return e && e.__esModule ? e : { "default": e };
      }Object.defineProperty(r, "__esModule", { value: !0 });var o = e("babel-runtime/core-js/object/keys"),
          i = n(o),
          s = e("babel-runtime/core-js/object/get-prototype-of"),
          a = n(s),
          c = e("babel-runtime/helpers/classCallCheck"),
          u = n(c),
          l = e("babel-runtime/helpers/createClass"),
          f = n(l),
          d = e("babel-runtime/helpers/possibleConstructorReturn"),
          p = n(d),
          b = e("babel-runtime/helpers/get"),
          h = n(b),
          v = e("babel-runtime/helpers/inherits"),
          y = n(v),
          _ = e("./DataObject"),
          g = n(_),
          m = e("../utils/utils.js"),
          j = function (e) {
        function t(e, r, n, o, i, s) {
          (0, u["default"])(this, t);var c = (0, p["default"])(this, (0, a["default"])(t).call(this, e, r, n, o, i, s)),
              l = c;return l._subscriptions = {}, l._syncObj.observe(function (e) {
            console.log("DataObjectReporter-" + r + "-SEND: ", e), l._onChange(e);
          }), l._allocateListeners(), c;
        }return (0, y["default"])(t, e), (0, f["default"])(t, [{ key: "_allocateListeners", value: function value() {
            (0, h["default"])((0, a["default"])(t.prototype), "_allocateListeners", this).call(this);var e = this;e._responseListener = e._bus.addListener(e._url, function (t) {
              "response" === t.type && e._onResponse(t);
            });
          } }, { key: "_releaseListeners", value: function value() {
            (0, h["default"])((0, a["default"])(t.prototype), "_releaseListeners", this).call(this);var e = this;e._responseListener.remove();
          } }, { key: "inviteObservers", value: function value(e) {
            var t = this,
                r = { type: "create", from: t._syncher._owner, to: t._syncher._subURL, body: { resource: t._url, schema: t._schema, value: t._syncObj.data, authorise: e } };t._bus.postMessage(r);
          } }, { key: "delete", value: function value() {
            var e = this,
                t = { type: "delete", from: e._owner, to: e._syncher._subURL, body: { resource: e._url } };e._bus.postMessage(t, function (t) {
              console.log("DataObjectReporter-DELETE: ", t), 200 === t.body.code && (e._releaseListeners(), delete e._syncher._reporters[e._url]);
            });
          } }, { key: "onSubscription", value: function value(e) {
            this._onSubscriptionHandler = e;
          } }, { key: "onResponse", value: function value(e) {
            this._onResponseHandler = e;
          } }, { key: "_onForward", value: function value(e) {
            var t = this;switch (console.log("DataObjectReporter-RCV: ", e), e.body.type) {case "subscribe":
                t._onSubscribe(e);break;case "unsubscribe":
                t._onUnSubscribe(e);}
          } }, { key: "_onSubscribe", value: function value(e) {
            var t = this,
                r = e.body.from,
                n = { type: e.body.type, url: r, accept: function accept() {
                var n = { url: r, status: "on" };t._subscriptions[r] = n;var o = {};return (0, i["default"])(t._childrenObjects).forEach(function (e) {
                  var r = t._childrenObjects[e].data;o[e] = (0, m.deepClone)(r);
                }), t._bus.postMessage({ id: e.id, type: "response", from: e.to, to: e.from, body: { code: 200, schema: t._schema, version: t._version, value: { data: (0, m.deepClone)(t.data), childrens: o } } }), n;
              }, reject: function reject(r) {
                t._bus.postMessage({ id: e.id, type: "response", from: e.to, to: e.from, body: { code: 403, desc: r } });
              } };t._onSubscriptionHandler && (console.log("SUBSCRIPTION-EVENT: ", n), t._onSubscriptionHandler(n));
          } }, { key: "_onUnSubscribe", value: function value(e) {
            var t = this,
                r = e.body.from,
                n = t._subscriptions[r];delete t._subscriptions[r];var o = { type: e.body.type, url: r, object: n };t._onSubscriptionHandler && (console.log("UN-SUBSCRIPTION-EVENT: ", o), t._onSubscriptionHandler(o));
          } }, { key: "_onResponse", value: function value(e) {
            var t = this,
                r = { type: e.type, url: e.from, code: e.body.code };t._onResponseHandler && (console.log("RESPONSE-EVENT: ", r), t._onResponseHandler(r));
          } }, { key: "subscriptions", get: function get() {
            return this._subscriptions;
          } }]), t;
      }(g["default"]);r["default"] = j, t.exports = r["default"];
    }, { "../utils/utils.js": 100, "./DataObject": 93, "babel-runtime/core-js/object/get-prototype-of": 6, "babel-runtime/core-js/object/keys": 7, "babel-runtime/helpers/classCallCheck": 11, "babel-runtime/helpers/createClass": 12, "babel-runtime/helpers/get": 13, "babel-runtime/helpers/inherits": 14, "babel-runtime/helpers/possibleConstructorReturn": 15 }], 97: [function (e, t, r) {
      "use strict";
      function n(e) {
        return e && e.__esModule ? e : { "default": e };
      }Object.defineProperty(r, "__esModule", { value: !0 });var o = e("babel-runtime/helpers/classCallCheck"),
          i = n(o),
          s = e("babel-runtime/helpers/createClass"),
          a = n(s),
          c = function () {
        function e(t, r, n, o) {
          (0, i["default"])(this, e);var s = this;s._owner = t, s._url = r, s._bus = n, s._children = o, s._changes = [], s._allocateListeners();
        }return (0, a["default"])(e, [{ key: "_allocateListeners", value: function value() {
            var e = this;e._listener = e._bus.addListener(e._url, function (t) {
              console.log("DataProvisional-" + e._url + "-RCV: ", t), e._changes.push(t);
            });
          } }, { key: "_releaseListeners", value: function value() {
            var e = this;e._listener.remove();
          } }, { key: "apply", value: function value(e) {
            var t = this;t._changes.forEach(function (t) {
              e._changeObject(e._syncObj, t);
            });
          } }, { key: "children", get: function get() {
            return this._children;
          } }]), e;
      }();r["default"] = c, t.exports = r["default"];
    }, { "babel-runtime/helpers/classCallCheck": 11, "babel-runtime/helpers/createClass": 12 }], 98: [function (e, t, r) {
      "use strict";
      function n(e) {
        return e && e.__esModule ? e : { "default": e };
      }Object.defineProperty(r, "__esModule", { value: !0 }), r.ObjectType = r.ChangeType = void 0;var o = e("babel-runtime/core-js/object/keys"),
          i = n(o),
          s = e("babel-runtime/helpers/classCallCheck"),
          a = n(s),
          c = e("babel-runtime/helpers/createClass"),
          u = n(c),
          l = e("../utils/utils.js"),
          f = function () {
        function e(t) {
          (0, a["default"])(this, e);var r = this;r._observers = [], r._filters = {}, t ? r._data = (0, l.deepClone)(t) : r._data = {}, r._internalObserve(new d(), r._data);
        }return (0, u["default"])(e, [{ key: "observe", value: function value(e) {
            this._observers.push(e);
          } }, { key: "find", value: function value(e) {
            var t = e.split(".");return this._findWithSplit(t);
          } }, { key: "findBefore", value: function value(e) {
            var t = {},
                r = e.split(".");return t.last = r.pop(), t.obj = this._findWithSplit(r), t;
          } }, { key: "_findWithSplit", value: function value(e) {
            var t = this._data;return e.forEach(function (e) {
              t = t[e];
            }), t;
          } }, { key: "_fireEvent", value: function value(e) {
            this._observers.forEach(function (t) {
              t(e);
            });
          } }, { key: "_isObservable", value: function value(e) {
            return e.constructor === Object || e.constructor === Array;
          } }, { key: "_internalObserve", value: function value(e, t) {
            var r = this;if (r._isObservable(t)) {
              var n = function n(t) {
                r._onChanges(e, t);
              };if (t.constructor === Object) {
                Object.observe(t, n);for (var o in t) {
                  r._isObservable(t[o]) && r._internalObserve(e["new"](o), t[o]);
                }
              } else if (t.constructor === Array) {
                Array.observe(t, n);for (var i in t) {
                  if (r._isObservable(t[i])) {
                    var s = e["new"](new p(t[i], i));r._internalObserve(s, t[i]);
                  }
                }
              }
            }
          } }, { key: "_onChanges", value: function value(e, t) {
            var r = this;for (var n in t) {
              var o = t[n].object,
                  i = void 0;if (o.constructor === Object && (i = h.OBJECT), o.constructor === Array && (i = h.ARRAY), "splice" === t[n].type) !function () {
                var s = t[n].index,
                    a = e["new"]("" + s),
                    c = a.toString(),
                    u = t[n].removed.length;if (0 !== u) {
                  var f = t[n].removed;f.forEach(function (t, n) {
                    r._isObservable(t) && e.removeIndex(s + n);
                  }), r._fireEvent({ cType: b.REMOVE, oType: i, field: c, data: u });
                }var d = t[n].addedCount;if (0 !== d) {
                  var h = o.slice(s, s + d);h.forEach(function (t, n) {
                    if (r._isObservable(t)) {
                      var o = e["new"](new p(t, s + n));r._internalObserve(o, t);
                    }
                  }), r._fireEvent({ cType: b.ADD, oType: i, field: c, data: (0, l.deepClone)(h) });
                }s !== o.length - 1 && e.reIndexFrom(o);
              }();else {
                var s = e["new"](t[n].name),
                    a = s.toString();if (-1 !== a.indexOf("Symbol")) continue;var c = o[t[n].name];"update" === t[n].type && this._fireEvent({ cType: b.UPDATE, oType: i, field: a, data: (0, l.deepClone)(c) }), "add" === t[n].type && (this._internalObserve(s, c), this._fireEvent({ cType: b.ADD, oType: i, field: a, data: (0, l.deepClone)(c) })), "delete" === t[n].type && this._fireEvent({ cType: b.REMOVE, oType: i, field: a });
              }
            }
          } }, { key: "data", get: function get() {
            return this._data;
          } }]), e;
      }(),
          d = function () {
        function e() {
          (0, a["default"])(this, e), this._path = [], this._observables = {};
        }return (0, u["default"])(e, [{ key: "removeIndex", value: function value(e) {
            delete this._observables[e];
          } }, { key: "reIndexFrom", value: function value(e) {
            var t = this;(0, i["default"])(this._observables).forEach(function (r) {
              var n = t._observables[r],
                  o = e.indexOf(n.obj);n.idx != o && (n.idx = o, delete t._observables[r], t._observables[o] = n);
            });
          } }, { key: "new", value: function value(e) {
            e.constructor == p && (this._observables[e.idx] = e);var t = this.clone();return t._path.push(e), t;
          } }, { key: "clone", value: function value() {
            var t = new e();return this._path.forEach(function (e) {
              t._path.push(e);
            }), t;
          } }, { key: "toString", value: function value() {
            var e = "";return this._path.forEach(function (t, r) {
              0 === r ? e = t.toString() : e += "." + t.toString();
            }), e;
          } }]), e;
      }(),
          p = function () {
        function e(t, r) {
          (0, a["default"])(this, e), this.obj = t, this.idx = r;
        }return (0, u["default"])(e, [{ key: "toString", value: function value() {
            return this.idx.toString();
          } }]), e;
      }(),
          b = r.ChangeType = { UPDATE: "update", ADD: "add", REMOVE: "remove" },
          h = r.ObjectType = { OBJECT: "object", ARRAY: "array" };r["default"] = f;
    }, { "../utils/utils.js": 100, "babel-runtime/core-js/object/keys": 7, "babel-runtime/helpers/classCallCheck": 11, "babel-runtime/helpers/createClass": 12 }], 99: [function (e, t, r) {
      "use strict";
      function n(e) {
        return e && e.__esModule ? e : { "default": e };
      }Object.defineProperty(r, "__esModule", { value: !0 });var o = e("babel-runtime/core-js/promise"),
          i = n(o),
          s = e("babel-runtime/helpers/classCallCheck"),
          a = n(s),
          c = e("babel-runtime/helpers/createClass"),
          u = n(c),
          l = e("./DataObjectReporter"),
          f = n(l),
          d = e("./DataObjectObserver"),
          p = n(d),
          b = e("./DataProvisional"),
          h = n(b),
          v = function () {
        function e(t, r, n) {
          (0, a["default"])(this, e);var o = this;o._owner = t, o._bus = r, o._subURL = n.runtimeURL + "/sm", o._reporters = {}, o._observers = {}, o._provisionals = {}, r.addListener(t, function (e) {
            if (e.from !== t) switch (console.log("Syncher-RCV: ", e), e.type) {case "forward":
                o._onForward(e);break;case "create":
                o._onRemoteCreate(e);break;case "delete":
                o._onRemoteDelete(e);}
          });
        }return (0, u["default"])(e, [{ key: "create", value: function value(e, t, r) {
            var n = this;r.reporter = n._owner, r.schema = e;var o = { type: "create", from: n._owner, to: n._subURL, body: { schema: e, value: r, authorise: t } };return new i["default"](function (t, i) {
              n._bus.postMessage(o, function (o) {
                if (console.log("create-response: ", o), 200 === o.body.code) {
                  var s = o.body.resource,
                      a = new f["default"](n, s, e, "on", r, o.body.childrenResources);n._reporters[s] = a, t(a);
                } else i(o.body.desc);
              });
            });
          } }, { key: "subscribe", value: function value(e, t) {
            var r = this,
                n = { type: "subscribe", from: r._owner, to: r._subURL, body: { schema: e, resource: t } };return new i["default"](function (o, i) {
              r._bus.postMessage(n, function (n) {
                console.log("subscribe-response: ", n);var s = r._provisionals[t];if (delete r._provisionals[t], s && s._releaseListeners(), n.body.code < 200) s = new h["default"](r._owner, t, r._bus, n.body.childrenResources), r._provisionals[t] = s;else if (200 === n.body.code) {
                  var a = new p["default"](r, t, e, "on", n.body.value, s.children, n.body.version);r._observers[t] = a, o(a), s.apply(a);
                } else i(n.body.desc);
              });
            });
          } }, { key: "onNotification", value: function value(e) {
            this._onNotificationHandler = e;
          } }, { key: "_onForward", value: function value(e) {
            var t = this,
                r = t._reporters[e.body.to];r._onForward(e);
          } }, { key: "_onRemoteCreate", value: function value(e) {
            var t = this,
                r = e.from.slice(0, -13),
                n = { type: e.type, from: e.body.source, url: r, schema: e.body.schema, value: e.body.value, identity: e.body.identity, ack: function ack(r) {
                var n = 200;r && (n = r), t._bus.postMessage({ id: e.id, type: "response", from: e.to, to: e.from, body: { code: n } });
              } };t._onNotificationHandler && (console.log("NOTIFICATION-EVENT: ", n), t._onNotificationHandler(n));
          } }, { key: "_onRemoteDelete", value: function value(e) {
            var t = this,
                r = e.body.resource,
                n = t._observers[r];if (n) {
              var o = { type: e.type, url: r, identity: e.body.identity, ack: function ack(r) {
                  var o = 200;r && (o = r), 200 === o && n["delete"](), t._bus.postMessage({ id: e.id, type: "response", from: e.to, to: e.from, body: { code: o, source: t._owner } });
                } };t._onNotificationHandler && (console.log("NOTIFICATION-EVENT: ", o), t._onNotificationHandler(o));
            } else t._bus.postMessage({ id: e.id, type: "response", from: e.to, to: e.from, body: { code: 404, source: t._owner } });
          } }, { key: "owner", get: function get() {
            return this._owner;
          } }, { key: "reporters", get: function get() {
            return this._reporters;
          } }, { key: "observers", get: function get() {
            return this._observers;
          } }]), e;
      }();r["default"] = v, t.exports = r["default"];
    }, { "./DataObjectObserver": 95, "./DataObjectReporter": 96, "./DataProvisional": 97, "babel-runtime/core-js/promise": 9, "babel-runtime/helpers/classCallCheck": 11, "babel-runtime/helpers/createClass": 12 }], 100: [function (e, t, r) {
      "use strict";
      function n(e) {
        return e && e.__esModule ? e : { "default": e };
      }function o(e) {
        var t = /([a-zA-Z-]*):\/\/(?:\.)?([-a-zA-Z0-9@:%._\+~#=]{2,256})([-a-zA-Z0-9@:%._\+~#=\/]*)/gi,
            r = "$1,$2,$3",
            n = e.replace(t, r).split(",");n[0] === e && (n[0] = "https", n[1] = e);var o = { type: n[0], domain: n[1], identity: n[2] };return o;
      }function i(e) {
        return e ? JSON.parse((0, a["default"])(e)) : void 0;
      }Object.defineProperty(r, "__esModule", { value: !0 });var s = e("babel-runtime/core-js/json/stringify"),
          a = n(s);r.divideURL = o, r.deepClone = i;
    }, { "babel-runtime/core-js/json/stringify": 2 }] }, {}, [92])(92);
});

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],4:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.default = activate;

var _HypertyDiscovery = require('service-framework/dist/HypertyDiscovery');

var _HypertyDiscovery2 = _interopRequireDefault(_HypertyDiscovery);

var _Syncher = require('service-framework/dist/Syncher');

var _EventEmitter2 = require('./utils/EventEmitter.js');

var _EventEmitter3 = _interopRequireDefault(_EventEmitter2);

var _utils = require('./utils/utils.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Copyright 2016 PT Inovação e Sistemas SA
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Copyright 2016 INESC-ID
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Copyright 2016 QUOBIS NETWORKS SL
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Copyright 2016 ORANGE SA
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Copyright 2016 Deutsche Telekom AG
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Copyright 2016 Apizee
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Licensed under the Apache License, Version 2.0 (the "License");
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * you may not use this file except in compliance with the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * You may obtain a copy of the License at
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *   http://www.apache.org/licenses/LICENSE-2.0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Unless required by applicable law or agreed to in writing, software
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * distributed under the License is distributed on an "AS IS" BASIS,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * See the License for the specific language governing permissions and
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * limitations under the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               **/

// Service Framework


// Utils


var status = {
  name: 'status',
  status: 'disconnected'
};

/**
* Hyperty Presence;
* @author Apizee [dev@apizee.com]
* @version 0.1.0
*/

var UserStatus = function (_EventEmitter) {
  _inherits(UserStatus, _EventEmitter);

  function UserStatus(hypertyURL, bus, configuration) {
    _classCallCheck(this, UserStatus);

    if (!hypertyURL) throw new Error('The hypertyURL is a needed parameter');
    if (!bus) throw new Error('The MiniBus is a needed parameter');
    if (!configuration) throw new Error('The configuration is a needed parameter');

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(UserStatus).call(this, hypertyURL, bus, configuration));

    var domain = (0, _utils.divideURL)(hypertyURL).domain;

    _this._syncher = new _Syncher.Syncher(hypertyURL, bus, configuration);

    _this._hypertyDiscovery = new _HypertyDiscovery2.default(hypertyURL, bus);

    _this._objectDescURL = 'hyperty-catalogue://' + domain + '/.well-known/dataschemas/UserStatusDataSchema';

    _this._hypertyURL = hypertyURL;
    _this._domain = domain;

    _this._heartbeat = [];

    _this._syncher.onNotification(function (event) {
      _this._onNotification(event);
    });

    return _this;
  }

  _createClass(UserStatus, [{
    key: '_onNotification',
    value: function _onNotification(event) {
      var _this2 = this;

      console.info('Event Received: ', event);

      this.trigger('invitation', event.identity);

      event.ack();

      // Subscribe Hello World Object
      this._syncher.subscribe(this._objectDescURL, event.url).then(function (statusObjectObserver) {
        console.info('-------- Status Observer received ---------', statusObjectObserver);

        _this2.trigger('statusChange', {
          identity: event.identity,
          status: statusObjectObserver.data.status
        });

        statusObjectObserver.onChange('*', function () {
          console.info('message received:', event);
          _this2.trigger('statusChange', {
            identity: event.identity,
            status: statusObjectObserver.data.status
          });
          if (statusObjectObserver.data.status !== 'disconnected') {
            console.log('add heartbeat control on', event.identity);
            if (event.identity in _this2._heartbeat) {
              clearTimeout(_this2._heartbeat[event.identity]);
            }
            _this2._heartbeat[event.identity] = setTimeout(function () {
              console.log(event.identity, 'has disconnect');
              _this2.trigger('statusChange', {
                identity: event.identity,
                status: 'disconnected'
              });
            }, 10000);
          }
        });

        console.log(event.identity.email, 'has subscribe to my status data object, send invite to listen mine');
        _this2._statusObjectReporter.inviteObservers([event.from]);
      }).catch(function (reason) {
        console.error(reason);
      });
    }

    /**
     * This function is used to create a new status object syncher
     * @param  {URL.UserURL} participants List of User allowed
     * @return {Promise}
     */

  }, {
    key: 'create',
    value: function create(participants) {
      var _this3 = this;

      return new Promise(function (resolve, reject) {

        status.status = 'connected';
        status.owner = _this3._hypertyURL;
        status.name = 'presence';

        console.info('----------------------- Mapping Particpants --------------------');
        _this3._mappingUser(participants).then(function (hyperties) {
          return _this3.createSyncher(hyperties, status);
        }).then(function (statusObjectReporter) {
          _this3._statusObjectReporter = statusObjectReporter;
          statusObjectReporter.onSubscription(function (event) {
            console.info('-------- Status Reporter received subscription request ---------', event);
            event.accept();
          });
        }).catch(function (reason) {
          reject(reason);
        });
      });
    }
  }, {
    key: 'createSyncher',
    value: function createSyncher(hyperties, status) {
      console.info('------------------------ Syncher Create ----------------------', hyperties, status);
      return this._syncher.create(this._objectDescURL, hyperties, status);
    }
  }, {
    key: 'join',
    value: function join(resource) {
      var _this4 = this;

      return new Promise(function (resolve, reject) {

        console.info('------------------------ Syncher subscribe ----------------------');

        _this4._syncher.subscribe(_this4._objectDescURL, resource).then(function (dataObjectObserver) {
          console.info('Data Object Observer: ', dataObjectObserver);
        }).catch(function (reason) {
          reject(reason);
        });
      });
    }
  }, {
    key: 'setStatus',
    value: function setStatus(newStatus) {
      console.log('change status to', newStatus);
      this._statusObjectReporter.data.status = newStatus;
    }
  }, {
    key: '_mappingUser',
    value: function _mappingUser(userList) {
      var _this5 = this;

      console.info('------------------------ _mappingUser ----------------------', userList);

      return new Promise(function (resolve, reject) {
        var hyperties = [];
        var count = 0;

        if (userList.length === 0) reject(hyperties);

        var resultUsers = function resultUsers() {
          if (count === userList.length) {
            console.info('Have ' + hyperties.length + 'users found;');
            resolve(hyperties);
          }
        };

        var activeUsers = function activeUsers(user) {
          count++;
          hyperties.push(user.hypertyURL);
          resultUsers();
        };

        var inactiveUsers = function inactiveUsers() {
          count++;
          resultUsers();
        };

        userList.forEach(function (user) {
          console.log(user);
          if (user.email.length) {
            console.info('------------------------ _mappingUser ----------------------', userList);
            return _this5._hypertyDiscovery.discoverHypertyPerUser(user.email, user.domain).then(activeUsers).catch(inactiveUsers);
          }
        });
      });
    }
  }]);

  return UserStatus;
}(_EventEmitter3.default);

function activate(hypertyURL, bus, configuration) {

  return {
    name: 'UserStatus',
    instance: new UserStatus(hypertyURL, bus, configuration)
  };
}

},{"./utils/EventEmitter.js":5,"./utils/utils.js":6,"service-framework/dist/HypertyDiscovery":2,"service-framework/dist/Syncher":3}],5:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/

/**
 * EventEmitter
 * All classes which extends this, can have addEventListener and trigger events;
 */

var EventEmitter = function () {
  function EventEmitter() {
    _classCallCheck(this, EventEmitter);
  }

  _createClass(EventEmitter, [{
    key: "addEventListener",


    /**
     * addEventListener listen for an eventType
     * @param  {string}         eventType - listening for this type of event
     * @param  {Function}       cb        - callback function will be executed when the event it is invoked
     */
    value: function addEventListener(eventType, cb) {
      var _this = this;
      _this[eventType] = cb;
    }

    /**
     * Invoke the eventType
     * @param  {string} eventType - event will be invoked
     * @param  {object} params - parameters will be passed to the addEventListener
     */

  }, {
    key: "trigger",
    value: function trigger(eventType, params) {
      var _this = this;

      if (_this[eventType]) {
        _this[eventType](params);
      }
    }
  }]);

  return EventEmitter;
}();

exports.default = EventEmitter;

},{}],6:[function(require,module,exports){
(function (process){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.divideURL = divideURL;
exports.deepClone = deepClone;
exports.getConfig = getConfig;
exports.getUserMedia = getUserMedia;
exports.serialize = serialize;
exports.getTemplate = getTemplate;
/**
 * Copyright 2016 PT Inovação e Sistemas SA
 * Copyright 2016 INESC-ID
 * Copyright 2016 QUOBIS NETWORKS SL
 * Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
 * Copyright 2016 ORANGE SA
 * Copyright 2016 Deutsche Telekom AG
 * Copyright 2016 Apizee
 * Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 **/

// jshint browser:true, jquery: true
// jshint varstmt: true
/* global Handlebars */

/**
 * Support module with some functions will be useful
 * @module utils
 */

/**
 * @typedef divideURL
 * @type Object
 * @property {string} type The type of URL
 * @property {string} domain The domain of URL
 * @property {string} identity The identity of URL
 */

/**
 * Divide an url in type, domain and identity
 * @param  {URL.URL} url - url address
 * @return {divideURL} the result of divideURL
 */
function divideURL(url) {

  // let re = /([a-zA-Z-]*)?:\/\/(?:\.)?([-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b)*(\/[\/\d\w\.-]*)*(?:[\?])*(.+)*/gi;
  var re = /([a-zA-Z-]*):\/\/(?:\.)?([-a-zA-Z0-9@:%._\+~#=]{2,256})([-a-zA-Z0-9@:%._\+~#=\/]*)/gi;
  var subst = '$1,$2,$3';
  var parts = url.replace(re, subst).split(',');

  // If the url has no protocol, the default protocol set is https
  if (parts[0] === url) {
    parts[0] = 'https';
    parts[1] = url;
  }

  var result = {
    type: parts[0],
    domain: parts[1],
    identity: parts[2]
  };

  return result;
}

/**
 * Make a COPY of the original data
 * @param  {Object}  obj - object to be cloned
 * @return {Object}
 */
function deepClone(obj) {
  //TODO: simple but inefficient JSON deep clone...
  if (obj) return JSON.parse(JSON.stringify(obj));
}

/**
 * Get the configuration from an json file;
 * @param  {JSONObject} jsonFile
 * @return {object}
 */
function getConfig(JSONObject) {
  console.log(process.env.environment);
  return JSONObject[process.env.environment];
}

/**
 * Get WebRTC API resources
 * @param  {Object}     options Object containing the information that resources will be used (camera, mic, resolution, etc);
 * @return {Promise}
 */
function getUserMedia(constraints) {

  return new Promise(function (resolve, reject) {

    navigator.mediaDevices.getUserMedia(constraints).then(function (mediaStream) {
      resolve(mediaStream);
    }).catch(function (reason) {
      reject(reason);
    });
  });
}

function serialize() {

  $.fn.serializeObject = function () {
    var o = {};
    var a = this.serializeArray();
    $.each(a, function () {
      if (o[this.name] !== undefined) {
        if (!o[this.name].push) {
          o[this.name] = [o[this.name]];
        }

        o[this.name].push(this.value || '');
      } else {
        o[this.name] = this.value || '';
      }
    });

    return o;
  };

  $.fn.serializeObjectArray = function () {
    var o = {};
    var a = this.serializeArray();
    $.each(a, function () {
      if (o[this.name] !== undefined) {
        if (!o[this.name].push) {
          o[this.name] = [o[this.name]];
        }

        o[this.name].push(this.value || '');
      } else {
        if (!o[this.name]) o[this.name] = [];
        o[this.name].push(this.value || '');
      }
    });

    return o;
  };
}

function getTemplate(path, script) {

  return new Promise(function (resolve, reject) {

    if (Handlebars.templates === undefined || Handlebars.templates[name] === undefined) {
      Handlebars.templates = {};
    } else {
      resolve(Handlebars.templates[name]);
    }

    var templateFile = $.ajax({
      url: path + '.hbs',
      success: function success(data) {
        Handlebars.templates[name] = Handlebars.compile(data);
      },

      fail: function fail(reason) {
        return reason;
      }
    });

    var scriptFile = $.getScript(script);

    var requests = [];
    if (path) requests.push(templateFile);
    if (script) requests.push(scriptFile);

    Promise.all(requests).then(function (result) {
      resolve(Handlebars.templates[name]);
    }).catch(function (reason) {
      reject(reason);
    });
  });
}

}).call(this,require('_process'))
},{"_process":1}]},{},[4])(4)
});",
      "sourceCodeClassname": "UserStatusHyperty",
      "encoding": "base64",
      "signature": ""
    },
    "cguid": 1,
    "type": "Hyperties",
    "version": "0.1",
    "description": "Description of UserStatusHyperty",
    "objectName": "UserStatusHyperty",
    "configuration": {
      "url": "wss://msg-node.localhost:9090/ws"
    },
    "sourcePackageURL": "/sourcePackage",
    "language": "javascript",
    "signature": "",
    "messageSchemas": "",
    "dataObjects": [],
    "accessControlPolicy": "somePolicy"
  },
  "UserStatusHyperty": {
    "sourcePackage": {
      "sourceCode": "(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.activate = f().default}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

// shim for using process in browser

var process = module.exports = {};
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = setTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while (len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    clearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        setTimeout(drainQueue, 0);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () {
    return '/';
};
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function () {
    return 0;
};

},{}],2:[function(require,module,exports){
(function (global){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/

// Distribution file for HypertyDiscovery.js
// version: 0.2.0

!function (e) {
  if ("object" == (typeof exports === "undefined" ? "undefined" : _typeof(exports)) && "undefined" != typeof module) module.exports = e();else if ("function" == typeof define && define.amd) define([], e);else {
    var t;t = "undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : this, t.HypertyDiscovery = e();
  }
}(function () {
  return function e(t, r, n) {
    function o(c, s) {
      if (!r[c]) {
        if (!t[c]) {
          var u = "function" == typeof require && require;if (!s && u) return u(c, !0);if (i) return i(c, !0);var a = new Error("Cannot find module '" + c + "'");throw a.code = "MODULE_NOT_FOUND", a;
        }var f = r[c] = { exports: {} };t[c][0].call(f.exports, function (e) {
          var r = t[c][1][e];return o(r ? r : e);
        }, f, f.exports, e, t, r, n);
      }return r[c].exports;
    }for (var i = "function" == typeof require && require, c = 0; c < n.length; c++) {
      o(n[c]);
    }return o;
  }({ 1: [function (e, t, r) {
      t.exports = { "default": e("core-js/library/fn/json/stringify"), __esModule: !0 };
    }, { "core-js/library/fn/json/stringify": 6 }], 2: [function (e, t, r) {
      t.exports = { "default": e("core-js/library/fn/object/define-property"), __esModule: !0 };
    }, { "core-js/library/fn/object/define-property": 7 }], 3: [function (e, t, r) {
      t.exports = { "default": e("core-js/library/fn/promise"), __esModule: !0 };
    }, { "core-js/library/fn/promise": 8 }], 4: [function (e, t, r) {
      "use strict";
      r.__esModule = !0, r["default"] = function (e, t) {
        if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
      };
    }, {}], 5: [function (e, t, r) {
      "use strict";
      function n(e) {
        return e && e.__esModule ? e : { "default": e };
      }r.__esModule = !0;var o = e("babel-runtime/core-js/object/define-property"),
          i = n(o);r["default"] = function () {
        function e(e, t) {
          for (var r = 0; r < t.length; r++) {
            var n = t[r];n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), (0, i["default"])(e, n.key, n);
          }
        }return function (t, r, n) {
          return r && e(t.prototype, r), n && e(t, n), t;
        };
      }();
    }, { "babel-runtime/core-js/object/define-property": 2 }], 6: [function (e, t, r) {
      var n = e("../../modules/_core"),
          o = n.JSON || (n.JSON = { stringify: JSON.stringify });t.exports = function (e) {
        return o.stringify.apply(o, arguments);
      };
    }, { "../../modules/_core": 16 }], 7: [function (e, t, r) {
      e("../../modules/es6.object.define-property");var n = e("../../modules/_core").Object;t.exports = function (e, t, r) {
        return n.defineProperty(e, t, r);
      };
    }, { "../../modules/_core": 16, "../../modules/es6.object.define-property": 71 }], 8: [function (e, t, r) {
      e("../modules/es6.object.to-string"), e("../modules/es6.string.iterator"), e("../modules/web.dom.iterable"), e("../modules/es6.promise"), t.exports = e("../modules/_core").Promise;
    }, { "../modules/_core": 16, "../modules/es6.object.to-string": 72, "../modules/es6.promise": 73, "../modules/es6.string.iterator": 74, "../modules/web.dom.iterable": 75 }], 9: [function (e, t, r) {
      t.exports = function (e) {
        if ("function" != typeof e) throw TypeError(e + " is not a function!");return e;
      };
    }, {}], 10: [function (e, t, r) {
      t.exports = function () {};
    }, {}], 11: [function (e, t, r) {
      t.exports = function (e, t, r, n) {
        if (!(e instanceof t) || void 0 !== n && n in e) throw TypeError(r + ": incorrect invocation!");return e;
      };
    }, {}], 12: [function (e, t, r) {
      var n = e("./_is-object");t.exports = function (e) {
        if (!n(e)) throw TypeError(e + " is not an object!");return e;
      };
    }, { "./_is-object": 33 }], 13: [function (e, t, r) {
      var n = e("./_to-iobject"),
          o = e("./_to-length"),
          i = e("./_to-index");t.exports = function (e) {
        return function (t, r, c) {
          var s,
              u = n(t),
              a = o(u.length),
              f = i(c, a);if (e && r != r) {
            for (; a > f;) {
              if (s = u[f++], s != s) return !0;
            }
          } else for (; a > f; f++) {
            if ((e || f in u) && u[f] === r) return e || f || 0;
          }return !e && -1;
        };
      };
    }, { "./_to-index": 61, "./_to-iobject": 63, "./_to-length": 64 }], 14: [function (e, t, r) {
      var n = e("./_cof"),
          o = e("./_wks")("toStringTag"),
          i = "Arguments" == n(function () {
        return arguments;
      }()),
          c = function c(e, t) {
        try {
          return e[t];
        } catch (r) {}
      };t.exports = function (e) {
        var t, r, s;return void 0 === e ? "Undefined" : null === e ? "Null" : "string" == typeof (r = c(t = Object(e), o)) ? r : i ? n(t) : "Object" == (s = n(t)) && "function" == typeof t.callee ? "Arguments" : s;
      };
    }, { "./_cof": 15, "./_wks": 68 }], 15: [function (e, t, r) {
      var n = {}.toString;t.exports = function (e) {
        return n.call(e).slice(8, -1);
      };
    }, {}], 16: [function (e, t, r) {
      var n = t.exports = { version: "2.4.0" };"number" == typeof __e && (__e = n);
    }, {}], 17: [function (e, t, r) {
      var n = e("./_a-function");t.exports = function (e, t, r) {
        if (n(e), void 0 === t) return e;switch (r) {case 1:
            return function (r) {
              return e.call(t, r);
            };case 2:
            return function (r, n) {
              return e.call(t, r, n);
            };case 3:
            return function (r, n, o) {
              return e.call(t, r, n, o);
            };}return function () {
          return e.apply(t, arguments);
        };
      };
    }, { "./_a-function": 9 }], 18: [function (e, t, r) {
      t.exports = function (e) {
        if (void 0 == e) throw TypeError("Can't call method on  " + e);return e;
      };
    }, {}], 19: [function (e, t, r) {
      t.exports = !e("./_fails")(function () {
        return 7 != Object.defineProperty({}, "a", { get: function get() {
            return 7;
          } }).a;
      });
    }, { "./_fails": 23 }], 20: [function (e, t, r) {
      var n = e("./_is-object"),
          o = e("./_global").document,
          i = n(o) && n(o.createElement);t.exports = function (e) {
        return i ? o.createElement(e) : {};
      };
    }, { "./_global": 25, "./_is-object": 33 }], 21: [function (e, t, r) {
      t.exports = "constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",");
    }, {}], 22: [function (e, t, r) {
      var n = e("./_global"),
          o = e("./_core"),
          i = e("./_ctx"),
          c = e("./_hide"),
          s = "prototype",
          u = function u(e, t, r) {
        var a,
            f,
            _,
            l = e & u.F,
            d = e & u.G,
            p = e & u.S,
            v = e & u.P,
            y = e & u.B,
            h = e & u.W,
            b = d ? o : o[t] || (o[t] = {}),
            m = b[s],
            g = d ? n : p ? n[t] : (n[t] || {})[s];d && (r = t);for (a in r) {
          f = !l && g && void 0 !== g[a], f && a in b || (_ = f ? g[a] : r[a], b[a] = d && "function" != typeof g[a] ? r[a] : y && f ? i(_, n) : h && g[a] == _ ? function (e) {
            var t = function t(_t, r, n) {
              if (this instanceof e) {
                switch (arguments.length) {case 0:
                    return new e();case 1:
                    return new e(_t);case 2:
                    return new e(_t, r);}return new e(_t, r, n);
              }return e.apply(this, arguments);
            };return t[s] = e[s], t;
          }(_) : v && "function" == typeof _ ? i(Function.call, _) : _, v && ((b.virtual || (b.virtual = {}))[a] = _, e & u.R && m && !m[a] && c(m, a, _)));
        }
      };u.F = 1, u.G = 2, u.S = 4, u.P = 8, u.B = 16, u.W = 32, u.U = 64, u.R = 128, t.exports = u;
    }, { "./_core": 16, "./_ctx": 17, "./_global": 25, "./_hide": 27 }], 23: [function (e, t, r) {
      t.exports = function (e) {
        try {
          return !!e();
        } catch (t) {
          return !0;
        }
      };
    }, {}], 24: [function (e, t, r) {
      var n = e("./_ctx"),
          o = e("./_iter-call"),
          i = e("./_is-array-iter"),
          c = e("./_an-object"),
          s = e("./_to-length"),
          u = e("./core.get-iterator-method"),
          a = {},
          f = {},
          r = t.exports = function (e, t, r, _, l) {
        var d,
            p,
            v,
            y,
            h = l ? function () {
          return e;
        } : u(e),
            b = n(r, _, t ? 2 : 1),
            m = 0;if ("function" != typeof h) throw TypeError(e + " is not iterable!");if (i(h)) {
          for (d = s(e.length); d > m; m++) {
            if (y = t ? b(c(p = e[m])[0], p[1]) : b(e[m]), y === a || y === f) return y;
          }
        } else for (v = h.call(e); !(p = v.next()).done;) {
          if (y = o(v, b, p.value, t), y === a || y === f) return y;
        }
      };r.BREAK = a, r.RETURN = f;
    }, { "./_an-object": 12, "./_ctx": 17, "./_is-array-iter": 32, "./_iter-call": 34, "./_to-length": 64, "./core.get-iterator-method": 69 }], 25: [function (e, t, r) {
      var n = t.exports = "undefined" != typeof window && window.Math == Math ? window : "undefined" != typeof self && self.Math == Math ? self : Function("return this")();"number" == typeof __g && (__g = n);
    }, {}], 26: [function (e, t, r) {
      var n = {}.hasOwnProperty;t.exports = function (e, t) {
        return n.call(e, t);
      };
    }, {}], 27: [function (e, t, r) {
      var n = e("./_object-dp"),
          o = e("./_property-desc");t.exports = e("./_descriptors") ? function (e, t, r) {
        return n.f(e, t, o(1, r));
      } : function (e, t, r) {
        return e[t] = r, e;
      };
    }, { "./_descriptors": 19, "./_object-dp": 43, "./_property-desc": 50 }], 28: [function (e, t, r) {
      t.exports = e("./_global").document && document.documentElement;
    }, { "./_global": 25 }], 29: [function (e, t, r) {
      t.exports = !e("./_descriptors") && !e("./_fails")(function () {
        return 7 != Object.defineProperty(e("./_dom-create")("div"), "a", { get: function get() {
            return 7;
          } }).a;
      });
    }, { "./_descriptors": 19, "./_dom-create": 20, "./_fails": 23 }], 30: [function (e, t, r) {
      t.exports = function (e, t, r) {
        var n = void 0 === r;switch (t.length) {case 0:
            return n ? e() : e.call(r);case 1:
            return n ? e(t[0]) : e.call(r, t[0]);case 2:
            return n ? e(t[0], t[1]) : e.call(r, t[0], t[1]);case 3:
            return n ? e(t[0], t[1], t[2]) : e.call(r, t[0], t[1], t[2]);case 4:
            return n ? e(t[0], t[1], t[2], t[3]) : e.call(r, t[0], t[1], t[2], t[3]);}return e.apply(r, t);
      };
    }, {}], 31: [function (e, t, r) {
      var n = e("./_cof");t.exports = Object("z").propertyIsEnumerable(0) ? Object : function (e) {
        return "String" == n(e) ? e.split("") : Object(e);
      };
    }, { "./_cof": 15 }], 32: [function (e, t, r) {
      var n = e("./_iterators"),
          o = e("./_wks")("iterator"),
          i = Array.prototype;t.exports = function (e) {
        return void 0 !== e && (n.Array === e || i[o] === e);
      };
    }, { "./_iterators": 39, "./_wks": 68 }], 33: [function (e, t, r) {
      t.exports = function (e) {
        return "object" == (typeof e === "undefined" ? "undefined" : _typeof(e)) ? null !== e : "function" == typeof e;
      };
    }, {}], 34: [function (e, t, r) {
      var n = e("./_an-object");t.exports = function (e, t, r, o) {
        try {
          return o ? t(n(r)[0], r[1]) : t(r);
        } catch (i) {
          var c = e["return"];throw void 0 !== c && n(c.call(e)), i;
        }
      };
    }, { "./_an-object": 12 }], 35: [function (e, t, r) {
      "use strict";
      var n = e("./_object-create"),
          o = e("./_property-desc"),
          i = e("./_set-to-string-tag"),
          c = {};e("./_hide")(c, e("./_wks")("iterator"), function () {
        return this;
      }), t.exports = function (e, t, r) {
        e.prototype = n(c, { next: o(1, r) }), i(e, t + " Iterator");
      };
    }, { "./_hide": 27, "./_object-create": 42, "./_property-desc": 50, "./_set-to-string-tag": 55, "./_wks": 68 }], 36: [function (e, t, r) {
      "use strict";
      var n = e("./_library"),
          o = e("./_export"),
          i = e("./_redefine"),
          c = e("./_hide"),
          s = e("./_has"),
          u = e("./_iterators"),
          a = e("./_iter-create"),
          f = e("./_set-to-string-tag"),
          _ = e("./_object-gpo"),
          l = e("./_wks")("iterator"),
          d = !([].keys && "next" in [].keys()),
          p = "@@iterator",
          v = "keys",
          y = "values",
          h = function h() {
        return this;
      };t.exports = function (e, t, r, b, m, g, j) {
        a(r, t, b);var x,
            w,
            k,
            O = function O(e) {
          if (!d && e in E) return E[e];switch (e) {case v:
              return function () {
                return new r(this, e);
              };case y:
              return function () {
                return new r(this, e);
              };}return function () {
            return new r(this, e);
          };
        },
            M = t + " Iterator",
            P = m == y,
            S = !1,
            E = e.prototype,
            T = E[l] || E[p] || m && E[m],
            A = T || O(m),
            U = m ? P ? O("entries") : A : void 0,
            C = "Array" == t ? E.entries || T : T;if (C && (k = _(C.call(new e())), k !== Object.prototype && (f(k, M, !0), n || s(k, l) || c(k, l, h))), P && T && T.name !== y && (S = !0, A = function A() {
          return T.call(this);
        }), n && !j || !d && !S && E[l] || c(E, l, A), u[t] = A, u[M] = h, m) if (x = { values: P ? A : O(y), keys: g ? A : O(v), entries: U }, j) for (w in x) {
          w in E || i(E, w, x[w]);
        } else o(o.P + o.F * (d || S), t, x);return x;
      };
    }, { "./_export": 22, "./_has": 26, "./_hide": 27, "./_iter-create": 35, "./_iterators": 39, "./_library": 40, "./_object-gpo": 46, "./_redefine": 52, "./_set-to-string-tag": 55, "./_wks": 68 }], 37: [function (e, t, r) {
      var n = e("./_wks")("iterator"),
          o = !1;try {
        var i = [7][n]();i["return"] = function () {
          o = !0;
        }, Array.from(i, function () {
          throw 2;
        });
      } catch (c) {}t.exports = function (e, t) {
        if (!t && !o) return !1;var r = !1;try {
          var i = [7],
              c = i[n]();c.next = function () {
            return { done: r = !0 };
          }, i[n] = function () {
            return c;
          }, e(i);
        } catch (s) {}return r;
      };
    }, { "./_wks": 68 }], 38: [function (e, t, r) {
      t.exports = function (e, t) {
        return { value: t, done: !!e };
      };
    }, {}], 39: [function (e, t, r) {
      t.exports = {};
    }, {}], 40: [function (e, t, r) {
      t.exports = !0;
    }, {}], 41: [function (e, t, r) {
      var n = e("./_global"),
          o = e("./_task").set,
          i = n.MutationObserver || n.WebKitMutationObserver,
          c = n.process,
          s = n.Promise,
          u = "process" == e("./_cof")(c);t.exports = function () {
        var e,
            t,
            r,
            a = function a() {
          var n, o;for (u && (n = c.domain) && n.exit(); e;) {
            o = e.fn, e = e.next;try {
              o();
            } catch (i) {
              throw e ? r() : t = void 0, i;
            }
          }t = void 0, n && n.enter();
        };if (u) r = function r() {
          c.nextTick(a);
        };else if (i) {
          var f = !0,
              _ = document.createTextNode("");new i(a).observe(_, { characterData: !0 }), r = function r() {
            _.data = f = !f;
          };
        } else if (s && s.resolve) {
          var l = s.resolve();r = function r() {
            l.then(a);
          };
        } else r = function r() {
          o.call(n, a);
        };return function (n) {
          var o = { fn: n, next: void 0 };t && (t.next = o), e || (e = o, r()), t = o;
        };
      };
    }, { "./_cof": 15, "./_global": 25, "./_task": 60 }], 42: [function (e, t, r) {
      var n = e("./_an-object"),
          o = e("./_object-dps"),
          i = e("./_enum-bug-keys"),
          c = e("./_shared-key")("IE_PROTO"),
          s = function s() {},
          u = "prototype",
          _a = function a() {
        var t,
            r = e("./_dom-create")("iframe"),
            n = i.length,
            o = ">";for (r.style.display = "none", e("./_html").appendChild(r), r.src = "javascript:", t = r.contentWindow.document, t.open(), t.write("<script>document.F=Object</script" + o), t.close(), _a = t.F; n--;) {
          delete _a[u][i[n]];
        }return _a();
      };t.exports = Object.create || function (e, t) {
        var r;return null !== e ? (s[u] = n(e), r = new s(), s[u] = null, r[c] = e) : r = _a(), void 0 === t ? r : o(r, t);
      };
    }, { "./_an-object": 12, "./_dom-create": 20, "./_enum-bug-keys": 21, "./_html": 28, "./_object-dps": 44, "./_shared-key": 56 }], 43: [function (e, t, r) {
      var n = e("./_an-object"),
          o = e("./_ie8-dom-define"),
          i = e("./_to-primitive"),
          c = Object.defineProperty;r.f = e("./_descriptors") ? Object.defineProperty : function (e, t, r) {
        if (n(e), t = i(t, !0), n(r), o) try {
          return c(e, t, r);
        } catch (s) {}if ("get" in r || "set" in r) throw TypeError("Accessors not supported!");return "value" in r && (e[t] = r.value), e;
      };
    }, { "./_an-object": 12, "./_descriptors": 19, "./_ie8-dom-define": 29, "./_to-primitive": 66 }], 44: [function (e, t, r) {
      var n = e("./_object-dp"),
          o = e("./_an-object"),
          i = e("./_object-keys");t.exports = e("./_descriptors") ? Object.defineProperties : function (e, t) {
        o(e);for (var r, c = i(t), s = c.length, u = 0; s > u;) {
          n.f(e, r = c[u++], t[r]);
        }return e;
      };
    }, { "./_an-object": 12, "./_descriptors": 19, "./_object-dp": 43, "./_object-keys": 48 }], 45: [function (e, t, r) {
      var n = e("./_object-pie"),
          o = e("./_property-desc"),
          i = e("./_to-iobject"),
          c = e("./_to-primitive"),
          s = e("./_has"),
          u = e("./_ie8-dom-define"),
          a = Object.getOwnPropertyDescriptor;r.f = e("./_descriptors") ? a : function (e, t) {
        if (e = i(e), t = c(t, !0), u) try {
          return a(e, t);
        } catch (r) {}return s(e, t) ? o(!n.f.call(e, t), e[t]) : void 0;
      };
    }, { "./_descriptors": 19, "./_has": 26, "./_ie8-dom-define": 29, "./_object-pie": 49, "./_property-desc": 50, "./_to-iobject": 63, "./_to-primitive": 66 }], 46: [function (e, t, r) {
      var n = e("./_has"),
          o = e("./_to-object"),
          i = e("./_shared-key")("IE_PROTO"),
          c = Object.prototype;t.exports = Object.getPrototypeOf || function (e) {
        return e = o(e), n(e, i) ? e[i] : "function" == typeof e.constructor && e instanceof e.constructor ? e.constructor.prototype : e instanceof Object ? c : null;
      };
    }, { "./_has": 26, "./_shared-key": 56, "./_to-object": 65 }], 47: [function (e, t, r) {
      var n = e("./_has"),
          o = e("./_to-iobject"),
          i = e("./_array-includes")(!1),
          c = e("./_shared-key")("IE_PROTO");t.exports = function (e, t) {
        var r,
            s = o(e),
            u = 0,
            a = [];for (r in s) {
          r != c && n(s, r) && a.push(r);
        }for (; t.length > u;) {
          n(s, r = t[u++]) && (~i(a, r) || a.push(r));
        }return a;
      };
    }, { "./_array-includes": 13, "./_has": 26, "./_shared-key": 56, "./_to-iobject": 63 }], 48: [function (e, t, r) {
      var n = e("./_object-keys-internal"),
          o = e("./_enum-bug-keys");t.exports = Object.keys || function (e) {
        return n(e, o);
      };
    }, { "./_enum-bug-keys": 21, "./_object-keys-internal": 47 }], 49: [function (e, t, r) {
      r.f = {}.propertyIsEnumerable;
    }, {}], 50: [function (e, t, r) {
      t.exports = function (e, t) {
        return { enumerable: !(1 & e), configurable: !(2 & e), writable: !(4 & e), value: t };
      };
    }, {}], 51: [function (e, t, r) {
      var n = e("./_hide");t.exports = function (e, t, r) {
        for (var o in t) {
          r && e[o] ? e[o] = t[o] : n(e, o, t[o]);
        }return e;
      };
    }, { "./_hide": 27 }], 52: [function (e, t, r) {
      t.exports = e("./_hide");
    }, { "./_hide": 27 }], 53: [function (e, t, r) {
      var n = e("./_is-object"),
          o = e("./_an-object"),
          i = function i(e, t) {
        if (o(e), !n(t) && null !== t) throw TypeError(t + ": can't set as prototype!");
      };t.exports = { set: Object.setPrototypeOf || ("__proto__" in {} ? function (t, r, n) {
          try {
            n = e("./_ctx")(Function.call, e("./_object-gopd").f(Object.prototype, "__proto__").set, 2), n(t, []), r = !(t instanceof Array);
          } catch (o) {
            r = !0;
          }return function (e, t) {
            return i(e, t), r ? e.__proto__ = t : n(e, t), e;
          };
        }({}, !1) : void 0), check: i };
    }, { "./_an-object": 12, "./_ctx": 17, "./_is-object": 33, "./_object-gopd": 45 }], 54: [function (e, t, r) {
      "use strict";
      var n = e("./_global"),
          o = e("./_core"),
          i = e("./_object-dp"),
          c = e("./_descriptors"),
          s = e("./_wks")("species");t.exports = function (e) {
        var t = "function" == typeof o[e] ? o[e] : n[e];c && t && !t[s] && i.f(t, s, { configurable: !0, get: function get() {
            return this;
          } });
      };
    }, { "./_core": 16, "./_descriptors": 19, "./_global": 25, "./_object-dp": 43, "./_wks": 68 }], 55: [function (e, t, r) {
      var n = e("./_object-dp").f,
          o = e("./_has"),
          i = e("./_wks")("toStringTag");t.exports = function (e, t, r) {
        e && !o(e = r ? e : e.prototype, i) && n(e, i, { configurable: !0, value: t });
      };
    }, { "./_has": 26, "./_object-dp": 43, "./_wks": 68 }], 56: [function (e, t, r) {
      var n = e("./_shared")("keys"),
          o = e("./_uid");t.exports = function (e) {
        return n[e] || (n[e] = o(e));
      };
    }, { "./_shared": 57, "./_uid": 67 }], 57: [function (e, t, r) {
      var n = e("./_global"),
          o = "__core-js_shared__",
          i = n[o] || (n[o] = {});t.exports = function (e) {
        return i[e] || (i[e] = {});
      };
    }, { "./_global": 25 }], 58: [function (e, t, r) {
      var n = e("./_an-object"),
          o = e("./_a-function"),
          i = e("./_wks")("species");t.exports = function (e, t) {
        var r,
            c = n(e).constructor;return void 0 === c || void 0 == (r = n(c)[i]) ? t : o(r);
      };
    }, { "./_a-function": 9, "./_an-object": 12, "./_wks": 68 }], 59: [function (e, t, r) {
      var n = e("./_to-integer"),
          o = e("./_defined");t.exports = function (e) {
        return function (t, r) {
          var i,
              c,
              s = String(o(t)),
              u = n(r),
              a = s.length;return 0 > u || u >= a ? e ? "" : void 0 : (i = s.charCodeAt(u), 55296 > i || i > 56319 || u + 1 === a || (c = s.charCodeAt(u + 1)) < 56320 || c > 57343 ? e ? s.charAt(u) : i : e ? s.slice(u, u + 2) : (i - 55296 << 10) + (c - 56320) + 65536);
        };
      };
    }, { "./_defined": 18, "./_to-integer": 62 }], 60: [function (e, t, r) {
      var n,
          o,
          i,
          c = e("./_ctx"),
          s = e("./_invoke"),
          u = e("./_html"),
          a = e("./_dom-create"),
          f = e("./_global"),
          _ = f.process,
          l = f.setImmediate,
          d = f.clearImmediate,
          p = f.MessageChannel,
          v = 0,
          y = {},
          h = "onreadystatechange",
          b = function b() {
        var e = +this;if (y.hasOwnProperty(e)) {
          var t = y[e];delete y[e], t();
        }
      },
          m = function m(e) {
        b.call(e.data);
      };l && d || (l = function l(e) {
        for (var t = [], r = 1; arguments.length > r;) {
          t.push(arguments[r++]);
        }return y[++v] = function () {
          s("function" == typeof e ? e : Function(e), t);
        }, n(v), v;
      }, d = function d(e) {
        delete y[e];
      }, "process" == e("./_cof")(_) ? n = function n(e) {
        _.nextTick(c(b, e, 1));
      } : p ? (o = new p(), i = o.port2, o.port1.onmessage = m, n = c(i.postMessage, i, 1)) : f.addEventListener && "function" == typeof postMessage && !f.importScripts ? (n = function n(e) {
        f.postMessage(e + "", "*");
      }, f.addEventListener("message", m, !1)) : n = h in a("script") ? function (e) {
        u.appendChild(a("script"))[h] = function () {
          u.removeChild(this), b.call(e);
        };
      } : function (e) {
        setTimeout(c(b, e, 1), 0);
      }), t.exports = { set: l, clear: d };
    }, { "./_cof": 15, "./_ctx": 17, "./_dom-create": 20, "./_global": 25, "./_html": 28, "./_invoke": 30 }], 61: [function (e, t, r) {
      var n = e("./_to-integer"),
          o = Math.max,
          i = Math.min;t.exports = function (e, t) {
        return e = n(e), 0 > e ? o(e + t, 0) : i(e, t);
      };
    }, { "./_to-integer": 62 }], 62: [function (e, t, r) {
      var n = Math.ceil,
          o = Math.floor;t.exports = function (e) {
        return isNaN(e = +e) ? 0 : (e > 0 ? o : n)(e);
      };
    }, {}], 63: [function (e, t, r) {
      var n = e("./_iobject"),
          o = e("./_defined");t.exports = function (e) {
        return n(o(e));
      };
    }, { "./_defined": 18, "./_iobject": 31 }], 64: [function (e, t, r) {
      var n = e("./_to-integer"),
          o = Math.min;t.exports = function (e) {
        return e > 0 ? o(n(e), 9007199254740991) : 0;
      };
    }, { "./_to-integer": 62 }], 65: [function (e, t, r) {
      var n = e("./_defined");t.exports = function (e) {
        return Object(n(e));
      };
    }, { "./_defined": 18 }], 66: [function (e, t, r) {
      var n = e("./_is-object");t.exports = function (e, t) {
        if (!n(e)) return e;var r, o;if (t && "function" == typeof (r = e.toString) && !n(o = r.call(e))) return o;if ("function" == typeof (r = e.valueOf) && !n(o = r.call(e))) return o;if (!t && "function" == typeof (r = e.toString) && !n(o = r.call(e))) return o;throw TypeError("Can't convert object to primitive value");
      };
    }, { "./_is-object": 33 }], 67: [function (e, t, r) {
      var n = 0,
          o = Math.random();t.exports = function (e) {
        return "Symbol(".concat(void 0 === e ? "" : e, ")_", (++n + o).toString(36));
      };
    }, {}], 68: [function (e, t, r) {
      var n = e("./_shared")("wks"),
          o = e("./_uid"),
          i = e("./_global").Symbol,
          c = "function" == typeof i,
          s = t.exports = function (e) {
        return n[e] || (n[e] = c && i[e] || (c ? i : o)("Symbol." + e));
      };s.store = n;
    }, { "./_global": 25, "./_shared": 57, "./_uid": 67 }], 69: [function (e, t, r) {
      var n = e("./_classof"),
          o = e("./_wks")("iterator"),
          i = e("./_iterators");t.exports = e("./_core").getIteratorMethod = function (e) {
        return void 0 != e ? e[o] || e["@@iterator"] || i[n(e)] : void 0;
      };
    }, { "./_classof": 14, "./_core": 16, "./_iterators": 39, "./_wks": 68 }], 70: [function (e, t, r) {
      "use strict";
      var n = e("./_add-to-unscopables"),
          o = e("./_iter-step"),
          i = e("./_iterators"),
          c = e("./_to-iobject");t.exports = e("./_iter-define")(Array, "Array", function (e, t) {
        this._t = c(e), this._i = 0, this._k = t;
      }, function () {
        var e = this._t,
            t = this._k,
            r = this._i++;return !e || r >= e.length ? (this._t = void 0, o(1)) : "keys" == t ? o(0, r) : "values" == t ? o(0, e[r]) : o(0, [r, e[r]]);
      }, "values"), i.Arguments = i.Array, n("keys"), n("values"), n("entries");
    }, { "./_add-to-unscopables": 10, "./_iter-define": 36, "./_iter-step": 38, "./_iterators": 39, "./_to-iobject": 63 }], 71: [function (e, t, r) {
      var n = e("./_export");n(n.S + n.F * !e("./_descriptors"), "Object", { defineProperty: e("./_object-dp").f });
    }, { "./_descriptors": 19, "./_export": 22, "./_object-dp": 43 }], 72: [function (e, t, r) {}, {}], 73: [function (e, t, r) {
      "use strict";
      var n,
          o,
          i,
          c = e("./_library"),
          s = e("./_global"),
          u = e("./_ctx"),
          a = e("./_classof"),
          f = e("./_export"),
          _ = e("./_is-object"),
          l = (e("./_an-object"), e("./_a-function")),
          d = e("./_an-instance"),
          p = e("./_for-of"),
          v = (e("./_set-proto").set, e("./_species-constructor")),
          y = e("./_task").set,
          h = e("./_microtask")(),
          b = "Promise",
          m = s.TypeError,
          g = s.process,
          _j = s[b],
          g = s.process,
          x = "process" == a(g),
          w = function w() {},
          k = !!function () {
        try {
          var t = _j.resolve(1),
              r = (t.constructor = {})[e("./_wks")("species")] = function (e) {
            e(w, w);
          };return (x || "function" == typeof PromiseRejectionEvent) && t.then(w) instanceof r;
        } catch (n) {}
      }(),
          O = function O(e, t) {
        return e === t || e === _j && t === i;
      },
          M = function M(e) {
        var t;return _(e) && "function" == typeof (t = e.then) ? t : !1;
      },
          P = function P(e) {
        return O(_j, e) ? new S(e) : new o(e);
      },
          S = o = function o(e) {
        var t, r;this.promise = new e(function (e, n) {
          if (void 0 !== t || void 0 !== r) throw m("Bad Promise constructor");t = e, r = n;
        }), this.resolve = l(t), this.reject = l(r);
      },
          E = function E(e) {
        try {
          e();
        } catch (t) {
          return { error: t };
        }
      },
          T = function T(e, t) {
        if (!e._n) {
          e._n = !0;var r = e._c;h(function () {
            for (var n = e._v, o = 1 == e._s, i = 0, c = function c(t) {
              var r,
                  i,
                  c = o ? t.ok : t.fail,
                  s = t.resolve,
                  u = t.reject,
                  a = t.domain;try {
                c ? (o || (2 == e._h && C(e), e._h = 1), c === !0 ? r = n : (a && a.enter(), r = c(n), a && a.exit()), r === t.promise ? u(m("Promise-chain cycle")) : (i = M(r)) ? i.call(r, s, u) : s(r)) : u(n);
              } catch (f) {
                u(f);
              }
            }; r.length > i;) {
              c(r[i++]);
            }e._c = [], e._n = !1, t && !e._h && A(e);
          });
        }
      },
          A = function A(e) {
        y.call(s, function () {
          var t,
              r,
              n,
              o = e._v;if (U(e) && (t = E(function () {
            x ? g.emit("unhandledRejection", o, e) : (r = s.onunhandledrejection) ? r({ promise: e, reason: o }) : (n = s.console) && n.error && n.error("Unhandled promise rejection", o);
          }), e._h = x || U(e) ? 2 : 1), e._a = void 0, t) throw t.error;
        });
      },
          U = function U(e) {
        if (1 == e._h) return !1;for (var t, r = e._a || e._c, n = 0; r.length > n;) {
          if (t = r[n++], t.fail || !U(t.promise)) return !1;
        }return !0;
      },
          C = function C(e) {
        y.call(s, function () {
          var t;x ? g.emit("rejectionHandled", e) : (t = s.onrejectionhandled) && t({ promise: e, reason: e._v });
        });
      },
          R = function R(e) {
        var t = this;t._d || (t._d = !0, t = t._w || t, t._v = e, t._s = 2, t._a || (t._a = t._c.slice()), T(t, !0));
      },
          L = function L(e) {
        var t,
            r = this;if (!r._d) {
          r._d = !0, r = r._w || r;try {
            if (r === e) throw m("Promise can't be resolved itself");(t = M(e)) ? h(function () {
              var n = { _w: r, _d: !1 };try {
                t.call(e, u(L, n, 1), u(R, n, 1));
              } catch (o) {
                R.call(n, o);
              }
            }) : (r._v = e, r._s = 1, T(r, !1));
          } catch (n) {
            R.call({ _w: r, _d: !1 }, n);
          }
        }
      };k || (_j = function j(e) {
        d(this, _j, b, "_h"), l(e), n.call(this);try {
          e(u(L, this, 1), u(R, this, 1));
        } catch (t) {
          R.call(this, t);
        }
      }, n = function n(e) {
        this._c = [], this._a = void 0, this._s = 0, this._d = !1, this._v = void 0, this._h = 0, this._n = !1;
      }, n.prototype = e("./_redefine-all")(_j.prototype, { then: function then(e, t) {
          var r = P(v(this, _j));return r.ok = "function" == typeof e ? e : !0, r.fail = "function" == typeof t && t, r.domain = x ? g.domain : void 0, this._c.push(r), this._a && this._a.push(r), this._s && T(this, !1), r.promise;
        }, "catch": function _catch(e) {
          return this.then(void 0, e);
        } }), S = function S() {
        var e = new n();this.promise = e, this.resolve = u(L, e, 1), this.reject = u(R, e, 1);
      }), f(f.G + f.W + f.F * !k, { Promise: _j }), e("./_set-to-string-tag")(_j, b), e("./_set-species")(b), i = e("./_core")[b], f(f.S + f.F * !k, b, { reject: function reject(e) {
          var t = P(this),
              r = t.reject;return r(e), t.promise;
        } }), f(f.S + f.F * (c || !k), b, { resolve: function resolve(e) {
          if (e instanceof _j && O(e.constructor, this)) return e;var t = P(this),
              r = t.resolve;return r(e), t.promise;
        } }), f(f.S + f.F * !(k && e("./_iter-detect")(function (e) {
        _j.all(e)["catch"](w);
      })), b, { all: function all(e) {
          var t = this,
              r = P(t),
              n = r.resolve,
              o = r.reject,
              i = E(function () {
            var r = [],
                i = 0,
                c = 1;p(e, !1, function (e) {
              var s = i++,
                  u = !1;r.push(void 0), c++, t.resolve(e).then(function (e) {
                u || (u = !0, r[s] = e, --c || n(r));
              }, o);
            }), --c || n(r);
          });return i && o(i.error), r.promise;
        }, race: function race(e) {
          var t = this,
              r = P(t),
              n = r.reject,
              o = E(function () {
            p(e, !1, function (e) {
              t.resolve(e).then(r.resolve, n);
            });
          });return o && n(o.error), r.promise;
        } });
    }, { "./_a-function": 9, "./_an-instance": 11, "./_an-object": 12, "./_classof": 14, "./_core": 16, "./_ctx": 17, "./_export": 22, "./_for-of": 24, "./_global": 25, "./_is-object": 33, "./_iter-detect": 37, "./_library": 40, "./_microtask": 41, "./_redefine-all": 51, "./_set-proto": 53, "./_set-species": 54, "./_set-to-string-tag": 55, "./_species-constructor": 58, "./_task": 60, "./_wks": 68 }], 74: [function (e, t, r) {
      "use strict";
      var n = e("./_string-at")(!0);e("./_iter-define")(String, "String", function (e) {
        this._t = String(e), this._i = 0;
      }, function () {
        var e,
            t = this._t,
            r = this._i;return r >= t.length ? { value: void 0, done: !0 } : (e = n(t, r), this._i += e.length, { value: e, done: !1 });
      });
    }, { "./_iter-define": 36, "./_string-at": 59 }], 75: [function (e, t, r) {
      e("./es6.array.iterator");for (var n = e("./_global"), o = e("./_hide"), i = e("./_iterators"), c = e("./_wks")("toStringTag"), s = ["NodeList", "DOMTokenList", "MediaList", "StyleSheetList", "CSSRuleList"], u = 0; 5 > u; u++) {
        var a = s[u],
            f = n[a],
            _ = f && f.prototype;_ && !_[c] && o(_, c, a), i[a] = i.Array;
      }
    }, { "./_global": 25, "./_hide": 27, "./_iterators": 39, "./_wks": 68, "./es6.array.iterator": 70 }], 76: [function (e, t, r) {
      "use strict";
      function n(e) {
        return e && e.__esModule ? e : { "default": e };
      }Object.defineProperty(r, "__esModule", { value: !0 });var o = e("./hyperty-discovery/HypertyDiscovery"),
          i = n(o);r["default"] = i["default"], t.exports = r["default"];
    }, { "./hyperty-discovery/HypertyDiscovery": 77 }], 77: [function (e, t, r) {
      "use strict";
      function n(e) {
        return e && e.__esModule ? e : { "default": e };
      }Object.defineProperty(r, "__esModule", { value: !0 });var o = e("babel-runtime/core-js/promise"),
          i = n(o),
          c = e("babel-runtime/helpers/classCallCheck"),
          s = n(c),
          u = e("babel-runtime/helpers/createClass"),
          a = n(u),
          f = e("../utils/utils"),
          _ = function () {
        function e(t, r) {
          (0, s["default"])(this, e);var n = this;n.messageBus = r, n.domain = (0, f.divideURL)(t).domain, n.discoveryURL = t;
        }return (0, a["default"])(e, [{ key: "discoverDataObjectPerName", value: function value(e, t) {
            var r = this,
                n = void 0;n = t ? t : r.domain;var o = { type: "read", from: r.discoveryURL, to: "domain://registry." + n + "/", body: { resource: "dataObject://" + e } };return new i["default"](function (e, t) {
              r.messageBus.postMessage(o, function (r) {
                var n = r.body.value.url;n ? e(n) : t("DataObject name does not exist");
              });
            });
          } }, { key: "discoverHypertyPerUser", value: function value(e, t) {
            var r = this,
                n = void 0;n = t ? t : r.domain;var o = "user://" + e.substring(e.indexOf("@") + 1, e.length) + "/" + e.substring(0, e.indexOf("@")),
                c = { type: "read", from: r.discoveryURL, to: "domain://registry." + n + "/", body: { resource: o } };return console.log("Message: ", c, n, o), new i["default"](function (t, n) {
              r.messageBus.postMessage(c, function (r) {
                console.log("message reply", r);var o = void 0,
                    i = void 0,
                    c = void 0,
                    s = r.body.value;for (o in s) {
                  if (void 0 !== s[o].lastModified) if (void 0 === i) i = new Date(s[o].lastModified), c = o;else {
                    var u = new Date(s[o].lastModified);i.getTime() < u.getTime() && (i = u, c = o);
                  }
                }console.log("Last Hyperty: ", c, i);var a = c;if (void 0 === a) return n("User Hyperty not found");var f = { id: e, descriptor: s[a].descriptor, hypertyURL: a };console.log("===> hypertyDiscovery messageBundle: ", f), t(f);
              });
            });
          } }, { key: "discoverHypertiesPerUser", value: function value(e, t) {
            var r = this,
                n = void 0;n = t ? t : r.domain;var o = "user://" + e.substring(e.indexOf("@") + 1, e.length) + "/" + e.substring(0, e.indexOf("@")),
                c = { type: "read", from: r.discoveryURL, to: "domain://registry." + n + "/", body: { resource: o } };return console.log("Message discoverHypertiesPerUser: ", c, n, o), new i["default"](function (e, t) {
              r.messageBus.postMessage(c, function (r) {
                console.log("discoverHypertiesPerUser reply", r);var n = r.body.value;return n ? void e(n) : t("User Hyperty not found");
              });
            });
          } }]), e;
      }();r["default"] = _, t.exports = r["default"];
    }, { "../utils/utils": 78, "babel-runtime/core-js/promise": 3, "babel-runtime/helpers/classCallCheck": 4, "babel-runtime/helpers/createClass": 5 }], 78: [function (e, t, r) {
      "use strict";
      function n(e) {
        return e && e.__esModule ? e : { "default": e };
      }function o(e) {
        var t = /([a-zA-Z-]*):\/\/(?:\.)?([-a-zA-Z0-9@:%._\+~#=]{2,256})([-a-zA-Z0-9@:%._\+~#=\/]*)/gi,
            r = "$1,$2,$3",
            n = e.replace(t, r).split(",");n[0] === e && (n[0] = "https", n[1] = e);var o = { type: n[0], domain: n[1], identity: n[2] };return o;
      }function i(e) {
        return e ? JSON.parse((0, s["default"])(e)) : void 0;
      }Object.defineProperty(r, "__esModule", { value: !0 });var c = e("babel-runtime/core-js/json/stringify"),
          s = n(c);r.divideURL = o, r.deepClone = i;
    }, { "babel-runtime/core-js/json/stringify": 1 }] }, {}, [76])(76);
});

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],3:[function(require,module,exports){
(function (global){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/

// Distribution file for Syncher.js
// version: 0.2.0

!function (e) {
  if ("object" == (typeof exports === "undefined" ? "undefined" : _typeof(exports)) && "undefined" != typeof module) module.exports = e();else if ("function" == typeof define && define.amd) define([], e);else {
    var t;t = "undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : this, t.Syncher = e();
  }
}(function () {
  return function e(t, r, n) {
    function o(s, a) {
      if (!r[s]) {
        if (!t[s]) {
          var c = "function" == typeof require && require;if (!a && c) return c(s, !0);if (i) return i(s, !0);var u = new Error("Cannot find module '" + s + "'");throw u.code = "MODULE_NOT_FOUND", u;
        }var l = r[s] = { exports: {} };t[s][0].call(l.exports, function (e) {
          var r = t[s][1][e];return o(r ? r : e);
        }, l, l.exports, e, t, r, n);
      }return r[s].exports;
    }for (var i = "function" == typeof require && require, s = 0; s < n.length; s++) {
      o(n[s]);
    }return o;
  }({ 1: [function (e, t, r) {
      Object.observe && !Array.observe && function (e, t) {
        "use strict";
        var r = e.getNotifier,
            n = "performChange",
            o = "_original",
            i = "splice",
            s = { push: function c(e) {
            var t = arguments,
                s = c[o].apply(this, t);return r(this)[n](i, function () {
              return { index: s - t.length, addedCount: t.length, removed: [] };
            }), s;
          }, unshift: function u(e) {
            var t = arguments,
                s = u[o].apply(this, t);return r(this)[n](i, function () {
              return { index: 0, addedCount: t.length, removed: [] };
            }), s;
          }, pop: function l() {
            var e = this.length,
                t = l[o].call(this);return this.length !== e && r(this)[n](i, function () {
              return { index: this.length, addedCount: 0, removed: [t] };
            }, this), t;
          }, shift: function f() {
            var e = this.length,
                t = f[o].call(this);return this.length !== e && r(this)[n](i, function () {
              return { index: 0, addedCount: 0, removed: [t] };
            }, this), t;
          }, splice: function d(e, t) {
            var s = arguments,
                a = d[o].apply(this, s);return (a.length || s.length > 2) && r(this)[n](i, function () {
              return { index: e, addedCount: s.length - 2, removed: a };
            }, this), a;
          } };for (var a in s) {
          s[a][o] = t.prototype[a], t.prototype[a] = s[a];
        }t.observe = function (t, r) {
          return e.observe(t, r, ["add", "update", "delete", i]);
        }, t.unobserve = e.unobserve;
      }(Object, Array);
    }, {}], 2: [function (e, t, r) {
      t.exports = { "default": e("core-js/library/fn/json/stringify"), __esModule: !0 };
    }, { "core-js/library/fn/json/stringify": 17 }], 3: [function (e, t, r) {
      t.exports = { "default": e("core-js/library/fn/object/create"), __esModule: !0 };
    }, { "core-js/library/fn/object/create": 18 }], 4: [function (e, t, r) {
      t.exports = { "default": e("core-js/library/fn/object/define-property"), __esModule: !0 };
    }, { "core-js/library/fn/object/define-property": 19 }], 5: [function (e, t, r) {
      t.exports = { "default": e("core-js/library/fn/object/get-own-property-descriptor"), __esModule: !0 };
    }, { "core-js/library/fn/object/get-own-property-descriptor": 20 }], 6: [function (e, t, r) {
      t.exports = { "default": e("core-js/library/fn/object/get-prototype-of"), __esModule: !0 };
    }, { "core-js/library/fn/object/get-prototype-of": 21 }], 7: [function (e, t, r) {
      t.exports = { "default": e("core-js/library/fn/object/keys"), __esModule: !0 };
    }, { "core-js/library/fn/object/keys": 22 }], 8: [function (e, t, r) {
      t.exports = { "default": e("core-js/library/fn/object/set-prototype-of"), __esModule: !0 };
    }, { "core-js/library/fn/object/set-prototype-of": 23 }], 9: [function (e, t, r) {
      t.exports = { "default": e("core-js/library/fn/promise"), __esModule: !0 };
    }, { "core-js/library/fn/promise": 24 }], 10: [function (e, t, r) {
      t.exports = { "default": e("core-js/library/fn/symbol"), __esModule: !0 };
    }, { "core-js/library/fn/symbol": 25 }], 11: [function (e, t, r) {
      "use strict";
      r.__esModule = !0, r["default"] = function (e, t) {
        if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
      };
    }, {}], 12: [function (e, t, r) {
      "use strict";
      function n(e) {
        return e && e.__esModule ? e : { "default": e };
      }r.__esModule = !0;var o = e("../core-js/object/define-property"),
          i = n(o);r["default"] = function () {
        function e(e, t) {
          for (var r = 0; r < t.length; r++) {
            var n = t[r];n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), (0, i["default"])(e, n.key, n);
          }
        }return function (t, r, n) {
          return r && e(t.prototype, r), n && e(t, n), t;
        };
      }();
    }, { "../core-js/object/define-property": 4 }], 13: [function (e, t, r) {
      "use strict";
      var n = e("babel-runtime/core-js/object/get-own-property-descriptor")["default"];r["default"] = function (e, t, r) {
        for (var o = !0; o;) {
          var i = e,
              s = t,
              a = r;o = !1, null === i && (i = Function.prototype);var c = n(i, s);if (void 0 !== c) {
            if ("value" in c) return c.value;var u = c.get;if (void 0 === u) return;return u.call(a);
          }var l = Object.getPrototypeOf(i);if (null === l) return;e = l, t = s, r = a, o = !0, c = l = void 0;
        }
      }, r.__esModule = !0;
    }, { "babel-runtime/core-js/object/get-own-property-descriptor": 5 }], 14: [function (e, t, r) {
      "use strict";
      var n = e("babel-runtime/core-js/object/create")["default"],
          o = e("babel-runtime/core-js/object/set-prototype-of")["default"];r["default"] = function (e, t) {
        if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function, not " + (typeof t === "undefined" ? "undefined" : _typeof(t)));e.prototype = n(t && t.prototype, { constructor: { value: e, enumerable: !1, writable: !0, configurable: !0 } }), t && (o ? o(e, t) : e.__proto__ = t);
      }, r.__esModule = !0;
    }, { "babel-runtime/core-js/object/create": 3, "babel-runtime/core-js/object/set-prototype-of": 8 }], 15: [function (e, t, r) {
      "use strict";
      function n(e) {
        return e && e.__esModule ? e : { "default": e };
      }r.__esModule = !0;var o = e("../helpers/typeof"),
          i = n(o);r["default"] = function (e, t) {
        if (!e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return !t || "object" !== ("undefined" == typeof t ? "undefined" : (0, i["default"])(t)) && "function" != typeof t ? e : t;
      };
    }, { "../helpers/typeof": 16 }], 16: [function (e, t, r) {
      "use strict";
      var n = e("babel-runtime/core-js/symbol")["default"];r["default"] = function (e) {
        return e && e.constructor === n ? "symbol" : typeof e === "undefined" ? "undefined" : _typeof(e);
      }, r.__esModule = !0;
    }, { "babel-runtime/core-js/symbol": 10 }], 17: [function (e, t, r) {
      var n = e("../../modules/$.core");t.exports = function (e) {
        return (n.JSON && n.JSON.stringify || JSON.stringify).apply(JSON, arguments);
      };
    }, { "../../modules/$.core": 31 }], 18: [function (e, t, r) {
      var n = e("../../modules/$");t.exports = function (e, t) {
        return n.create(e, t);
      };
    }, { "../../modules/$": 56 }], 19: [function (e, t, r) {
      var n = e("../../modules/$");t.exports = function (e, t, r) {
        return n.setDesc(e, t, r);
      };
    }, { "../../modules/$": 56 }], 20: [function (e, t, r) {
      var n = e("../../modules/$");e("../../modules/es6.object.get-own-property-descriptor"), t.exports = function (e, t) {
        return n.getDesc(e, t);
      };
    }, { "../../modules/$": 56, "../../modules/es6.object.get-own-property-descriptor": 81 }], 21: [function (e, t, r) {
      e("../../modules/es6.object.get-prototype-of"), t.exports = e("../../modules/$.core").Object.getPrototypeOf;
    }, { "../../modules/$.core": 31, "../../modules/es6.object.get-prototype-of": 82 }], 22: [function (e, t, r) {
      e("../../modules/es6.object.keys"), t.exports = e("../../modules/$.core").Object.keys;
    }, { "../../modules/$.core": 31, "../../modules/es6.object.keys": 83 }], 23: [function (e, t, r) {
      e("../../modules/es6.object.set-prototype-of"), t.exports = e("../../modules/$.core").Object.setPrototypeOf;
    }, { "../../modules/$.core": 31, "../../modules/es6.object.set-prototype-of": 84 }], 24: [function (e, t, r) {
      e("../modules/es6.object.to-string"), e("../modules/es6.string.iterator"), e("../modules/web.dom.iterable"), e("../modules/es6.promise"), t.exports = e("../modules/$.core").Promise;
    }, { "../modules/$.core": 31, "../modules/es6.object.to-string": 85, "../modules/es6.promise": 86, "../modules/es6.string.iterator": 87, "../modules/web.dom.iterable": 89 }], 25: [function (e, t, r) {
      e("../../modules/es6.symbol"), e("../../modules/es6.object.to-string"), t.exports = e("../../modules/$.core").Symbol;
    }, { "../../modules/$.core": 31, "../../modules/es6.object.to-string": 85, "../../modules/es6.symbol": 88 }], 26: [function (e, t, r) {
      t.exports = function (e) {
        if ("function" != typeof e) throw TypeError(e + " is not a function!");return e;
      };
    }, {}], 27: [function (e, t, r) {
      t.exports = function () {};
    }, {}], 28: [function (e, t, r) {
      var n = e("./$.is-object");t.exports = function (e) {
        if (!n(e)) throw TypeError(e + " is not an object!");return e;
      };
    }, { "./$.is-object": 49 }], 29: [function (e, t, r) {
      var n = e("./$.cof"),
          o = e("./$.wks")("toStringTag"),
          i = "Arguments" == n(function () {
        return arguments;
      }());t.exports = function (e) {
        var t, r, s;return void 0 === e ? "Undefined" : null === e ? "Null" : "string" == typeof (r = (t = Object(e))[o]) ? r : i ? n(t) : "Object" == (s = n(t)) && "function" == typeof t.callee ? "Arguments" : s;
      };
    }, { "./$.cof": 30, "./$.wks": 78 }], 30: [function (e, t, r) {
      var n = {}.toString;t.exports = function (e) {
        return n.call(e).slice(8, -1);
      };
    }, {}], 31: [function (e, t, r) {
      var n = t.exports = { version: "1.2.6" };"number" == typeof __e && (__e = n);
    }, {}], 32: [function (e, t, r) {
      var n = e("./$.a-function");t.exports = function (e, t, r) {
        if (n(e), void 0 === t) return e;switch (r) {case 1:
            return function (r) {
              return e.call(t, r);
            };case 2:
            return function (r, n) {
              return e.call(t, r, n);
            };case 3:
            return function (r, n, o) {
              return e.call(t, r, n, o);
            };}return function () {
          return e.apply(t, arguments);
        };
      };
    }, { "./$.a-function": 26 }], 33: [function (e, t, r) {
      t.exports = function (e) {
        if (void 0 == e) throw TypeError("Can't call method on  " + e);return e;
      };
    }, {}], 34: [function (e, t, r) {
      t.exports = !e("./$.fails")(function () {
        return 7 != Object.defineProperty({}, "a", { get: function get() {
            return 7;
          } }).a;
      });
    }, { "./$.fails": 38 }], 35: [function (e, t, r) {
      var n = e("./$.is-object"),
          o = e("./$.global").document,
          i = n(o) && n(o.createElement);t.exports = function (e) {
        return i ? o.createElement(e) : {};
      };
    }, { "./$.global": 41, "./$.is-object": 49 }], 36: [function (e, t, r) {
      var n = e("./$");t.exports = function (e) {
        var t = n.getKeys(e),
            r = n.getSymbols;if (r) for (var o, i = r(e), s = n.isEnum, a = 0; i.length > a;) {
          s.call(e, o = i[a++]) && t.push(o);
        }return t;
      };
    }, { "./$": 56 }], 37: [function (e, t, r) {
      var n = e("./$.global"),
          o = e("./$.core"),
          i = e("./$.ctx"),
          s = "prototype",
          a = function a(e, t, r) {
        var c,
            u,
            l,
            f = e & a.F,
            d = e & a.G,
            p = e & a.S,
            b = e & a.P,
            h = e & a.B,
            v = e & a.W,
            y = d ? o : o[t] || (o[t] = {}),
            _ = d ? n : p ? n[t] : (n[t] || {})[s];d && (r = t);for (c in r) {
          u = !f && _ && c in _, u && c in y || (l = u ? _[c] : r[c], y[c] = d && "function" != typeof _[c] ? r[c] : h && u ? i(l, n) : v && _[c] == l ? function (e) {
            var t = function t(_t) {
              return this instanceof e ? new e(_t) : e(_t);
            };return t[s] = e[s], t;
          }(l) : b && "function" == typeof l ? i(Function.call, l) : l, b && ((y[s] || (y[s] = {}))[c] = l));
        }
      };a.F = 1, a.G = 2, a.S = 4, a.P = 8, a.B = 16, a.W = 32, t.exports = a;
    }, { "./$.core": 31, "./$.ctx": 32, "./$.global": 41 }], 38: [function (e, t, r) {
      t.exports = function (e) {
        try {
          return !!e();
        } catch (t) {
          return !0;
        }
      };
    }, {}], 39: [function (e, t, r) {
      var n = e("./$.ctx"),
          o = e("./$.iter-call"),
          i = e("./$.is-array-iter"),
          s = e("./$.an-object"),
          a = e("./$.to-length"),
          c = e("./core.get-iterator-method");t.exports = function (e, t, r, u) {
        var l,
            f,
            d,
            p = c(e),
            b = n(r, u, t ? 2 : 1),
            h = 0;if ("function" != typeof p) throw TypeError(e + " is not iterable!");if (i(p)) for (l = a(e.length); l > h; h++) {
          t ? b(s(f = e[h])[0], f[1]) : b(e[h]);
        } else for (d = p.call(e); !(f = d.next()).done;) {
          o(d, b, f.value, t);
        }
      };
    }, { "./$.an-object": 28, "./$.ctx": 32, "./$.is-array-iter": 47, "./$.iter-call": 50, "./$.to-length": 75, "./core.get-iterator-method": 79 }], 40: [function (e, t, r) {
      var n = e("./$.to-iobject"),
          o = e("./$").getNames,
          i = {}.toString,
          s = "object" == (typeof window === "undefined" ? "undefined" : _typeof(window)) && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [],
          a = function a(e) {
        try {
          return o(e);
        } catch (t) {
          return s.slice();
        }
      };t.exports.get = function (e) {
        return s && "[object Window]" == i.call(e) ? a(e) : o(n(e));
      };
    }, { "./$": 56, "./$.to-iobject": 74 }], 41: [function (e, t, r) {
      var n = t.exports = "undefined" != typeof window && window.Math == Math ? window : "undefined" != typeof self && self.Math == Math ? self : Function("return this")();"number" == typeof __g && (__g = n);
    }, {}], 42: [function (e, t, r) {
      var n = {}.hasOwnProperty;t.exports = function (e, t) {
        return n.call(e, t);
      };
    }, {}], 43: [function (e, t, r) {
      var n = e("./$"),
          o = e("./$.property-desc");t.exports = e("./$.descriptors") ? function (e, t, r) {
        return n.setDesc(e, t, o(1, r));
      } : function (e, t, r) {
        return e[t] = r, e;
      };
    }, { "./$": 56, "./$.descriptors": 34, "./$.property-desc": 61 }], 44: [function (e, t, r) {
      t.exports = e("./$.global").document && document.documentElement;
    }, { "./$.global": 41 }], 45: [function (e, t, r) {
      t.exports = function (e, t, r) {
        var n = void 0 === r;switch (t.length) {case 0:
            return n ? e() : e.call(r);case 1:
            return n ? e(t[0]) : e.call(r, t[0]);case 2:
            return n ? e(t[0], t[1]) : e.call(r, t[0], t[1]);case 3:
            return n ? e(t[0], t[1], t[2]) : e.call(r, t[0], t[1], t[2]);case 4:
            return n ? e(t[0], t[1], t[2], t[3]) : e.call(r, t[0], t[1], t[2], t[3]);}return e.apply(r, t);
      };
    }, {}], 46: [function (e, t, r) {
      var n = e("./$.cof");t.exports = Object("z").propertyIsEnumerable(0) ? Object : function (e) {
        return "String" == n(e) ? e.split("") : Object(e);
      };
    }, { "./$.cof": 30 }], 47: [function (e, t, r) {
      var n = e("./$.iterators"),
          o = e("./$.wks")("iterator"),
          i = Array.prototype;t.exports = function (e) {
        return void 0 !== e && (n.Array === e || i[o] === e);
      };
    }, { "./$.iterators": 55, "./$.wks": 78 }], 48: [function (e, t, r) {
      var n = e("./$.cof");t.exports = Array.isArray || function (e) {
        return "Array" == n(e);
      };
    }, { "./$.cof": 30 }], 49: [function (e, t, r) {
      t.exports = function (e) {
        return "object" == (typeof e === "undefined" ? "undefined" : _typeof(e)) ? null !== e : "function" == typeof e;
      };
    }, {}], 50: [function (e, t, r) {
      var n = e("./$.an-object");t.exports = function (e, t, r, o) {
        try {
          return o ? t(n(r)[0], r[1]) : t(r);
        } catch (i) {
          var s = e["return"];throw void 0 !== s && n(s.call(e)), i;
        }
      };
    }, { "./$.an-object": 28 }], 51: [function (e, t, r) {
      "use strict";
      var n = e("./$"),
          o = e("./$.property-desc"),
          i = e("./$.set-to-string-tag"),
          s = {};e("./$.hide")(s, e("./$.wks")("iterator"), function () {
        return this;
      }), t.exports = function (e, t, r) {
        e.prototype = n.create(s, { next: o(1, r) }), i(e, t + " Iterator");
      };
    }, { "./$": 56, "./$.hide": 43, "./$.property-desc": 61, "./$.set-to-string-tag": 67, "./$.wks": 78 }], 52: [function (e, t, r) {
      "use strict";
      var n = e("./$.library"),
          o = e("./$.export"),
          i = e("./$.redefine"),
          s = e("./$.hide"),
          a = e("./$.has"),
          c = e("./$.iterators"),
          u = e("./$.iter-create"),
          l = e("./$.set-to-string-tag"),
          f = e("./$").getProto,
          d = e("./$.wks")("iterator"),
          p = !([].keys && "next" in [].keys()),
          b = "@@iterator",
          h = "keys",
          v = "values",
          y = function y() {
        return this;
      };t.exports = function (e, t, r, _, g, m, j) {
        u(r, t, _);var $,
            O,
            w = function w(e) {
          if (!p && e in E) return E[e];switch (e) {case h:
              return function () {
                return new r(this, e);
              };case v:
              return function () {
                return new r(this, e);
              };}return function () {
            return new r(this, e);
          };
        },
            k = t + " Iterator",
            x = g == v,
            C = !1,
            E = e.prototype,
            S = E[d] || E[b] || g && E[g],
            T = S || w(g);if (S) {
          var M = f(T.call(new e()));l(M, k, !0), !n && a(E, b) && s(M, d, y), x && S.name !== v && (C = !0, T = function T() {
            return S.call(this);
          });
        }if (n && !j || !p && !C && E[d] || s(E, d, T), c[t] = T, c[k] = y, g) if ($ = { values: x ? T : w(v), keys: m ? T : w(h), entries: x ? w("entries") : T }, j) for (O in $) {
          O in E || i(E, O, $[O]);
        } else o(o.P + o.F * (p || C), t, $);return $;
      };
    }, { "./$": 56, "./$.export": 37, "./$.has": 42, "./$.hide": 43, "./$.iter-create": 51, "./$.iterators": 55, "./$.library": 58, "./$.redefine": 63, "./$.set-to-string-tag": 67, "./$.wks": 78 }], 53: [function (e, t, r) {
      var n = e("./$.wks")("iterator"),
          o = !1;try {
        var i = [7][n]();i["return"] = function () {
          o = !0;
        }, Array.from(i, function () {
          throw 2;
        });
      } catch (s) {}t.exports = function (e, t) {
        if (!t && !o) return !1;var r = !1;try {
          var i = [7],
              s = i[n]();s.next = function () {
            r = !0;
          }, i[n] = function () {
            return s;
          }, e(i);
        } catch (a) {}return r;
      };
    }, { "./$.wks": 78 }], 54: [function (e, t, r) {
      t.exports = function (e, t) {
        return { value: t, done: !!e };
      };
    }, {}], 55: [function (e, t, r) {
      t.exports = {};
    }, {}], 56: [function (e, t, r) {
      var n = Object;t.exports = { create: n.create, getProto: n.getPrototypeOf, isEnum: {}.propertyIsEnumerable, getDesc: n.getOwnPropertyDescriptor, setDesc: n.defineProperty, setDescs: n.defineProperties, getKeys: n.keys, getNames: n.getOwnPropertyNames, getSymbols: n.getOwnPropertySymbols, each: [].forEach };
    }, {}], 57: [function (e, t, r) {
      var n = e("./$"),
          o = e("./$.to-iobject");t.exports = function (e, t) {
        for (var r, i = o(e), s = n.getKeys(i), a = s.length, c = 0; a > c;) {
          if (i[r = s[c++]] === t) return r;
        }
      };
    }, { "./$": 56, "./$.to-iobject": 74 }], 58: [function (e, t, r) {
      t.exports = !0;
    }, {}], 59: [function (e, t, r) {
      var n,
          o,
          i,
          s = e("./$.global"),
          a = e("./$.task").set,
          c = s.MutationObserver || s.WebKitMutationObserver,
          u = s.process,
          l = s.Promise,
          f = "process" == e("./$.cof")(u),
          d = function d() {
        var e, t, r;for (f && (e = u.domain) && (u.domain = null, e.exit()); n;) {
          t = n.domain, r = n.fn, t && t.enter(), r(), t && t.exit(), n = n.next;
        }o = void 0, e && e.enter();
      };if (f) i = function i() {
        u.nextTick(d);
      };else if (c) {
        var p = 1,
            b = document.createTextNode("");new c(d).observe(b, { characterData: !0 }), i = function i() {
          b.data = p = -p;
        };
      } else i = l && l.resolve ? function () {
        l.resolve().then(d);
      } : function () {
        a.call(s, d);
      };t.exports = function (e) {
        var t = { fn: e, next: void 0, domain: f && u.domain };o && (o.next = t), n || (n = t, i()), o = t;
      };
    }, { "./$.cof": 30, "./$.global": 41, "./$.task": 72 }], 60: [function (e, t, r) {
      var n = e("./$.export"),
          o = e("./$.core"),
          i = e("./$.fails");t.exports = function (e, t) {
        var r = (o.Object || {})[e] || Object[e],
            s = {};s[e] = t(r), n(n.S + n.F * i(function () {
          r(1);
        }), "Object", s);
      };
    }, { "./$.core": 31, "./$.export": 37, "./$.fails": 38 }], 61: [function (e, t, r) {
      t.exports = function (e, t) {
        return { enumerable: !(1 & e), configurable: !(2 & e), writable: !(4 & e), value: t };
      };
    }, {}], 62: [function (e, t, r) {
      var n = e("./$.redefine");t.exports = function (e, t) {
        for (var r in t) {
          n(e, r, t[r]);
        }return e;
      };
    }, { "./$.redefine": 63 }], 63: [function (e, t, r) {
      t.exports = e("./$.hide");
    }, { "./$.hide": 43 }], 64: [function (e, t, r) {
      t.exports = Object.is || function (e, t) {
        return e === t ? 0 !== e || 1 / e === 1 / t : e != e && t != t;
      };
    }, {}], 65: [function (e, t, r) {
      var n = e("./$").getDesc,
          o = e("./$.is-object"),
          i = e("./$.an-object"),
          s = function s(e, t) {
        if (i(e), !o(t) && null !== t) throw TypeError(t + ": can't set as prototype!");
      };t.exports = { set: Object.setPrototypeOf || ("__proto__" in {} ? function (t, r, o) {
          try {
            o = e("./$.ctx")(Function.call, n(Object.prototype, "__proto__").set, 2), o(t, []), r = !(t instanceof Array);
          } catch (i) {
            r = !0;
          }return function (e, t) {
            return s(e, t), r ? e.__proto__ = t : o(e, t), e;
          };
        }({}, !1) : void 0), check: s };
    }, { "./$": 56, "./$.an-object": 28, "./$.ctx": 32, "./$.is-object": 49 }], 66: [function (e, t, r) {
      "use strict";
      var n = e("./$.core"),
          o = e("./$"),
          i = e("./$.descriptors"),
          s = e("./$.wks")("species");t.exports = function (e) {
        var t = n[e];i && t && !t[s] && o.setDesc(t, s, { configurable: !0, get: function get() {
            return this;
          } });
      };
    }, { "./$": 56, "./$.core": 31, "./$.descriptors": 34, "./$.wks": 78 }], 67: [function (e, t, r) {
      var n = e("./$").setDesc,
          o = e("./$.has"),
          i = e("./$.wks")("toStringTag");t.exports = function (e, t, r) {
        e && !o(e = r ? e : e.prototype, i) && n(e, i, { configurable: !0, value: t });
      };
    }, { "./$": 56, "./$.has": 42, "./$.wks": 78 }], 68: [function (e, t, r) {
      var n = e("./$.global"),
          o = "__core-js_shared__",
          i = n[o] || (n[o] = {});t.exports = function (e) {
        return i[e] || (i[e] = {});
      };
    }, { "./$.global": 41 }], 69: [function (e, t, r) {
      var n = e("./$.an-object"),
          o = e("./$.a-function"),
          i = e("./$.wks")("species");t.exports = function (e, t) {
        var r,
            s = n(e).constructor;return void 0 === s || void 0 == (r = n(s)[i]) ? t : o(r);
      };
    }, { "./$.a-function": 26, "./$.an-object": 28, "./$.wks": 78 }], 70: [function (e, t, r) {
      t.exports = function (e, t, r) {
        if (!(e instanceof t)) throw TypeError(r + ": use the 'new' operator!");return e;
      };
    }, {}], 71: [function (e, t, r) {
      var n = e("./$.to-integer"),
          o = e("./$.defined");t.exports = function (e) {
        return function (t, r) {
          var i,
              s,
              a = String(o(t)),
              c = n(r),
              u = a.length;return 0 > c || c >= u ? e ? "" : void 0 : (i = a.charCodeAt(c), 55296 > i || i > 56319 || c + 1 === u || (s = a.charCodeAt(c + 1)) < 56320 || s > 57343 ? e ? a.charAt(c) : i : e ? a.slice(c, c + 2) : (i - 55296 << 10) + (s - 56320) + 65536);
        };
      };
    }, { "./$.defined": 33, "./$.to-integer": 73 }], 72: [function (e, t, r) {
      var n,
          o,
          i,
          s = e("./$.ctx"),
          a = e("./$.invoke"),
          c = e("./$.html"),
          u = e("./$.dom-create"),
          l = e("./$.global"),
          f = l.process,
          d = l.setImmediate,
          p = l.clearImmediate,
          b = l.MessageChannel,
          h = 0,
          v = {},
          y = "onreadystatechange",
          _ = function _() {
        var e = +this;if (v.hasOwnProperty(e)) {
          var t = v[e];delete v[e], t();
        }
      },
          g = function g(e) {
        _.call(e.data);
      };d && p || (d = function d(e) {
        for (var t = [], r = 1; arguments.length > r;) {
          t.push(arguments[r++]);
        }return v[++h] = function () {
          a("function" == typeof e ? e : Function(e), t);
        }, n(h), h;
      }, p = function p(e) {
        delete v[e];
      }, "process" == e("./$.cof")(f) ? n = function n(e) {
        f.nextTick(s(_, e, 1));
      } : b ? (o = new b(), i = o.port2, o.port1.onmessage = g, n = s(i.postMessage, i, 1)) : l.addEventListener && "function" == typeof postMessage && !l.importScripts ? (n = function n(e) {
        l.postMessage(e + "", "*");
      }, l.addEventListener("message", g, !1)) : n = y in u("script") ? function (e) {
        c.appendChild(u("script"))[y] = function () {
          c.removeChild(this), _.call(e);
        };
      } : function (e) {
        setTimeout(s(_, e, 1), 0);
      }), t.exports = { set: d, clear: p };
    }, { "./$.cof": 30, "./$.ctx": 32, "./$.dom-create": 35, "./$.global": 41, "./$.html": 44, "./$.invoke": 45 }], 73: [function (e, t, r) {
      var n = Math.ceil,
          o = Math.floor;t.exports = function (e) {
        return isNaN(e = +e) ? 0 : (e > 0 ? o : n)(e);
      };
    }, {}], 74: [function (e, t, r) {
      var n = e("./$.iobject"),
          o = e("./$.defined");t.exports = function (e) {
        return n(o(e));
      };
    }, { "./$.defined": 33, "./$.iobject": 46 }], 75: [function (e, t, r) {
      var n = e("./$.to-integer"),
          o = Math.min;t.exports = function (e) {
        return e > 0 ? o(n(e), 9007199254740991) : 0;
      };
    }, { "./$.to-integer": 73 }], 76: [function (e, t, r) {
      var n = e("./$.defined");t.exports = function (e) {
        return Object(n(e));
      };
    }, { "./$.defined": 33 }], 77: [function (e, t, r) {
      var n = 0,
          o = Math.random();t.exports = function (e) {
        return "Symbol(".concat(void 0 === e ? "" : e, ")_", (++n + o).toString(36));
      };
    }, {}], 78: [function (e, t, r) {
      var n = e("./$.shared")("wks"),
          o = e("./$.uid"),
          i = e("./$.global").Symbol;t.exports = function (e) {
        return n[e] || (n[e] = i && i[e] || (i || o)("Symbol." + e));
      };
    }, { "./$.global": 41, "./$.shared": 68, "./$.uid": 77 }], 79: [function (e, t, r) {
      var n = e("./$.classof"),
          o = e("./$.wks")("iterator"),
          i = e("./$.iterators");t.exports = e("./$.core").getIteratorMethod = function (e) {
        return void 0 != e ? e[o] || e["@@iterator"] || i[n(e)] : void 0;
      };
    }, { "./$.classof": 29, "./$.core": 31, "./$.iterators": 55, "./$.wks": 78 }], 80: [function (e, t, r) {
      "use strict";
      var n = e("./$.add-to-unscopables"),
          o = e("./$.iter-step"),
          i = e("./$.iterators"),
          s = e("./$.to-iobject");t.exports = e("./$.iter-define")(Array, "Array", function (e, t) {
        this._t = s(e), this._i = 0, this._k = t;
      }, function () {
        var e = this._t,
            t = this._k,
            r = this._i++;return !e || r >= e.length ? (this._t = void 0, o(1)) : "keys" == t ? o(0, r) : "values" == t ? o(0, e[r]) : o(0, [r, e[r]]);
      }, "values"), i.Arguments = i.Array, n("keys"), n("values"), n("entries");
    }, { "./$.add-to-unscopables": 27, "./$.iter-define": 52, "./$.iter-step": 54, "./$.iterators": 55, "./$.to-iobject": 74 }], 81: [function (e, t, r) {
      var n = e("./$.to-iobject");e("./$.object-sap")("getOwnPropertyDescriptor", function (e) {
        return function (t, r) {
          return e(n(t), r);
        };
      });
    }, { "./$.object-sap": 60, "./$.to-iobject": 74 }], 82: [function (e, t, r) {
      var n = e("./$.to-object");e("./$.object-sap")("getPrototypeOf", function (e) {
        return function (t) {
          return e(n(t));
        };
      });
    }, { "./$.object-sap": 60, "./$.to-object": 76 }], 83: [function (e, t, r) {
      var n = e("./$.to-object");e("./$.object-sap")("keys", function (e) {
        return function (t) {
          return e(n(t));
        };
      });
    }, { "./$.object-sap": 60, "./$.to-object": 76 }], 84: [function (e, t, r) {
      var n = e("./$.export");n(n.S, "Object", { setPrototypeOf: e("./$.set-proto").set });
    }, { "./$.export": 37, "./$.set-proto": 65 }], 85: [function (e, t, r) {}, {}], 86: [function (e, t, r) {
      "use strict";
      var n,
          o = e("./$"),
          i = e("./$.library"),
          s = e("./$.global"),
          a = e("./$.ctx"),
          c = e("./$.classof"),
          u = e("./$.export"),
          l = e("./$.is-object"),
          f = e("./$.an-object"),
          d = e("./$.a-function"),
          p = e("./$.strict-new"),
          b = e("./$.for-of"),
          h = e("./$.set-proto").set,
          v = e("./$.same-value"),
          y = e("./$.wks")("species"),
          _ = e("./$.species-constructor"),
          g = e("./$.microtask"),
          m = "Promise",
          j = s.process,
          $ = "process" == c(j),
          _O = s[m],
          w = function w(e) {
        var t = new _O(function () {});return e && (t.constructor = Object), _O.resolve(t) === t;
      },
          k = function () {
        function t(e) {
          var r = new _O(e);return h(r, t.prototype), r;
        }var r = !1;try {
          if (r = _O && _O.resolve && w(), h(t, _O), t.prototype = o.create(_O.prototype, { constructor: { value: t } }), t.resolve(5).then(function () {}) instanceof t || (r = !1), r && e("./$.descriptors")) {
            var n = !1;_O.resolve(o.setDesc({}, "then", { get: function get() {
                n = !0;
              } })), r = n;
          }
        } catch (i) {
          r = !1;
        }return r;
      }(),
          x = function x(e, t) {
        return i && e === _O && t === n ? !0 : v(e, t);
      },
          C = function C(e) {
        var t = f(e)[y];return void 0 != t ? t : e;
      },
          E = function E(e) {
        var t;return l(e) && "function" == typeof (t = e.then) ? t : !1;
      },
          S = function S(e) {
        var t, r;this.promise = new e(function (e, n) {
          if (void 0 !== t || void 0 !== r) throw TypeError("Bad Promise constructor");t = e, r = n;
        }), this.resolve = d(t), this.reject = d(r);
      },
          T = function T(e) {
        try {
          e();
        } catch (t) {
          return { error: t };
        }
      },
          M = function M(e, t) {
        if (!e.n) {
          e.n = !0;var r = e.c;g(function () {
            for (var n = e.v, o = 1 == e.s, i = 0, a = function a(t) {
              var r,
                  i,
                  s = o ? t.ok : t.fail,
                  a = t.resolve,
                  c = t.reject;try {
                s ? (o || (e.h = !0), r = s === !0 ? n : s(n), r === t.promise ? c(TypeError("Promise-chain cycle")) : (i = E(r)) ? i.call(r, a, c) : a(r)) : c(n);
              } catch (u) {
                c(u);
              }
            }; r.length > i;) {
              a(r[i++]);
            }r.length = 0, e.n = !1, t && setTimeout(function () {
              var t,
                  r,
                  o = e.p;N(o) && ($ ? j.emit("unhandledRejection", n, o) : (t = s.onunhandledrejection) ? t({ promise: o, reason: n }) : (r = s.console) && r.error && r.error("Unhandled promise rejection", n)), e.a = void 0;
            }, 1);
          });
        }
      },
          N = function N(e) {
        var t,
            r = e._d,
            n = r.a || r.c,
            o = 0;if (r.h) return !1;for (; n.length > o;) {
          if (t = n[o++], t.fail || !N(t.promise)) return !1;
        }return !0;
      },
          R = function R(e) {
        var t = this;t.d || (t.d = !0, t = t.r || t, t.v = e, t.s = 2, t.a = t.c.slice(), M(t, !0));
      },
          D = function D(e) {
        var t,
            r = this;if (!r.d) {
          r.d = !0, r = r.r || r;try {
            if (r.p === e) throw TypeError("Promise can't be resolved itself");(t = E(e)) ? g(function () {
              var n = { r: r, d: !1 };try {
                t.call(e, a(D, n, 1), a(R, n, 1));
              } catch (o) {
                R.call(n, o);
              }
            }) : (r.v = e, r.s = 1, M(r, !1));
          } catch (n) {
            R.call({ r: r, d: !1 }, n);
          }
        }
      };k || (_O = function O(e) {
        d(e);var t = this._d = { p: p(this, _O, m), c: [], a: void 0, s: 0, d: !1, v: void 0, h: !1, n: !1 };try {
          e(a(D, t, 1), a(R, t, 1));
        } catch (r) {
          R.call(t, r);
        }
      }, e("./$.redefine-all")(_O.prototype, { then: function then(e, t) {
          var r = new S(_(this, _O)),
              n = r.promise,
              o = this._d;return r.ok = "function" == typeof e ? e : !0, r.fail = "function" == typeof t && t, o.c.push(r), o.a && o.a.push(r), o.s && M(o, !1), n;
        }, "catch": function _catch(e) {
          return this.then(void 0, e);
        } })), u(u.G + u.W + u.F * !k, { Promise: _O }), e("./$.set-to-string-tag")(_O, m), e("./$.set-species")(m), n = e("./$.core")[m], u(u.S + u.F * !k, m, { reject: function reject(e) {
          var t = new S(this),
              r = t.reject;return r(e), t.promise;
        } }), u(u.S + u.F * (!k || w(!0)), m, { resolve: function resolve(e) {
          if (e instanceof _O && x(e.constructor, this)) return e;var t = new S(this),
              r = t.resolve;return r(e), t.promise;
        } }), u(u.S + u.F * !(k && e("./$.iter-detect")(function (e) {
        _O.all(e)["catch"](function () {});
      })), m, { all: function all(e) {
          var t = C(this),
              r = new S(t),
              n = r.resolve,
              i = r.reject,
              s = [],
              a = T(function () {
            b(e, !1, s.push, s);var r = s.length,
                a = Array(r);r ? o.each.call(s, function (e, o) {
              var s = !1;t.resolve(e).then(function (e) {
                s || (s = !0, a[o] = e, --r || n(a));
              }, i);
            }) : n(a);
          });return a && i(a.error), r.promise;
        }, race: function race(e) {
          var t = C(this),
              r = new S(t),
              n = r.reject,
              o = T(function () {
            b(e, !1, function (e) {
              t.resolve(e).then(r.resolve, n);
            });
          });return o && n(o.error), r.promise;
        } });
    }, { "./$": 56, "./$.a-function": 26, "./$.an-object": 28, "./$.classof": 29, "./$.core": 31, "./$.ctx": 32, "./$.descriptors": 34, "./$.export": 37, "./$.for-of": 39, "./$.global": 41, "./$.is-object": 49, "./$.iter-detect": 53, "./$.library": 58, "./$.microtask": 59, "./$.redefine-all": 62, "./$.same-value": 64, "./$.set-proto": 65, "./$.set-species": 66, "./$.set-to-string-tag": 67, "./$.species-constructor": 69, "./$.strict-new": 70, "./$.wks": 78 }], 87: [function (e, t, r) {
      "use strict";
      var n = e("./$.string-at")(!0);e("./$.iter-define")(String, "String", function (e) {
        this._t = String(e), this._i = 0;
      }, function () {
        var e,
            t = this._t,
            r = this._i;return r >= t.length ? { value: void 0, done: !0 } : (e = n(t, r), this._i += e.length, { value: e, done: !1 });
      });
    }, { "./$.iter-define": 52, "./$.string-at": 71 }], 88: [function (e, t, r) {
      "use strict";
      var n = e("./$"),
          o = e("./$.global"),
          i = e("./$.has"),
          s = e("./$.descriptors"),
          a = e("./$.export"),
          c = e("./$.redefine"),
          u = e("./$.fails"),
          l = e("./$.shared"),
          f = e("./$.set-to-string-tag"),
          d = e("./$.uid"),
          p = e("./$.wks"),
          b = e("./$.keyof"),
          h = e("./$.get-names"),
          v = e("./$.enum-keys"),
          y = e("./$.is-array"),
          _ = e("./$.an-object"),
          g = e("./$.to-iobject"),
          m = e("./$.property-desc"),
          j = n.getDesc,
          $ = n.setDesc,
          O = n.create,
          w = h.get,
          k = o.Symbol,
          x = o.JSON,
          C = x && x.stringify,
          E = !1,
          S = p("_hidden"),
          T = n.isEnum,
          M = l("symbol-registry"),
          N = l("symbols"),
          R = "function" == typeof k,
          D = Object.prototype,
          P = s && u(function () {
        return 7 != O($({}, "a", { get: function get() {
            return $(this, "a", { value: 7 }).a;
          } })).a;
      }) ? function (e, t, r) {
        var n = j(D, t);n && delete D[t], $(e, t, r), n && e !== D && $(D, t, n);
      } : $,
          A = function A(e) {
        var t = N[e] = O(k.prototype);return t._k = e, s && E && P(D, e, { configurable: !0, set: function set(t) {
            i(this, S) && i(this[S], e) && (this[S][e] = !1), P(this, e, m(1, t));
          } }), t;
      },
          L = function L(e) {
        return "symbol" == (typeof e === "undefined" ? "undefined" : _typeof(e));
      },
          I = function I(e, t, r) {
        return r && i(N, t) ? (r.enumerable ? (i(e, S) && e[S][t] && (e[S][t] = !1), r = O(r, { enumerable: m(0, !1) })) : (i(e, S) || $(e, S, m(1, {})), e[S][t] = !0), P(e, t, r)) : $(e, t, r);
      },
          F = function F(e, t) {
        _(e);for (var r, n = v(t = g(t)), o = 0, i = n.length; i > o;) {
          I(e, r = n[o++], t[r]);
        }return e;
      },
          V = function V(e, t) {
        return void 0 === t ? O(e) : F(O(e), t);
      },
          z = function z(e) {
        var t = T.call(this, e);return t || !i(this, e) || !i(N, e) || i(this, S) && this[S][e] ? t : !0;
      },
          U = function U(e, t) {
        var r = j(e = g(e), t);return !r || !i(N, t) || i(e, S) && e[S][t] || (r.enumerable = !0), r;
      },
          H = function H(e) {
        for (var t, r = w(g(e)), n = [], o = 0; r.length > o;) {
          i(N, t = r[o++]) || t == S || n.push(t);
        }return n;
      },
          B = function B(e) {
        for (var t, r = w(g(e)), n = [], o = 0; r.length > o;) {
          i(N, t = r[o++]) && n.push(N[t]);
        }return n;
      },
          J = function J(e) {
        if (void 0 !== e && !L(e)) {
          for (var t, r, n = [e], o = 1, i = arguments; i.length > o;) {
            n.push(i[o++]);
          }return t = n[1], "function" == typeof t && (r = t), !r && y(t) || (t = function t(e, _t2) {
            return r && (_t2 = r.call(this, e, _t2)), L(_t2) ? void 0 : _t2;
          }), n[1] = t, C.apply(x, n);
        }
      },
          W = u(function () {
        var e = k();return "[null]" != C([e]) || "{}" != C({ a: e }) || "{}" != C(Object(e));
      });R || (k = function k() {
        if (L(this)) throw TypeError("Symbol is not a constructor");return A(d(arguments.length > 0 ? arguments[0] : void 0));
      }, c(k.prototype, "toString", function () {
        return this._k;
      }), L = function L(e) {
        return e instanceof k;
      }, n.create = V, n.isEnum = z, n.getDesc = U, n.setDesc = I, n.setDescs = F, n.getNames = h.get = H, n.getSymbols = B, s && !e("./$.library") && c(D, "propertyIsEnumerable", z, !0));var Y = { "for": function _for(e) {
          return i(M, e += "") ? M[e] : M[e] = k(e);
        }, keyFor: function keyFor(e) {
          return b(M, e);
        }, useSetter: function useSetter() {
          E = !0;
        }, useSimple: function useSimple() {
          E = !1;
        } };n.each.call("hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","), function (e) {
        var t = p(e);Y[e] = R ? t : A(t);
      }), E = !0, a(a.G + a.W, { Symbol: k }), a(a.S, "Symbol", Y), a(a.S + a.F * !R, "Object", { create: V, defineProperty: I, defineProperties: F, getOwnPropertyDescriptor: U, getOwnPropertyNames: H, getOwnPropertySymbols: B }), x && a(a.S + a.F * (!R || W), "JSON", { stringify: J }), f(k, "Symbol"), f(Math, "Math", !0), f(o.JSON, "JSON", !0);
    }, { "./$": 56, "./$.an-object": 28, "./$.descriptors": 34, "./$.enum-keys": 36, "./$.export": 37, "./$.fails": 38, "./$.get-names": 40, "./$.global": 41, "./$.has": 42, "./$.is-array": 48, "./$.keyof": 57, "./$.library": 58, "./$.property-desc": 61, "./$.redefine": 63, "./$.set-to-string-tag": 67, "./$.shared": 68, "./$.to-iobject": 74, "./$.uid": 77, "./$.wks": 78 }], 89: [function (e, t, r) {
      e("./es6.array.iterator");var n = e("./$.iterators");n.NodeList = n.HTMLCollection = n.Array;
    }, { "./$.iterators": 55, "./es6.array.iterator": 80 }], 90: [function (e, t, r) {
      window.MutationObserver = window.MutationObserver || window.WebKitMutationObserver || function (e) {
        function t(e) {
          this.g = [], this.k = e;
        }function r(e) {
          !function r() {
            var n = e.takeRecords();n.length && e.k(n, e), e.f = setTimeout(r, t._period);
          }();
        }function n(t) {
          var r,
              n = { type: null, target: null, addedNodes: [], removedNodes: [], previousSibling: null, nextSibling: null, attributeName: null, attributeNamespace: null, oldValue: null };for (r in t) {
            n[r] !== e && t[r] !== e && (n[r] = t[r]);
          }return n;
        }function o(e, t) {
          var r = a(e, t);return function (n) {
            var o,
                c = n.length;t.a && r.a && i(n, e, r.a, t.d), (t.b || t.e) && (o = s(n, e, r, t)), (o || n.length !== c) && (r = a(e, t));
          };
        }function i(t, r, o, i) {
          for (var s, a, c = {}, u = r.attributes, l = u.length; l--;) {
            s = u[l], a = s.name, i && i[a] === e || (s.value !== o[a] && t.push(n({ type: "attributes", target: r, attributeName: a, oldValue: o[a], attributeNamespace: s.namespaceURI })), c[a] = !0);
          }for (a in o) {
            c[a] || t.push(n({ target: r, type: "attributes", attributeName: a, oldValue: o[a] }));
          }
        }function s(t, r, o, s) {
          function a(e, r, o, a, c) {
            var l = e.length - 1;c = - ~((l - c) / 2);for (var f, d, p; p = e.pop();) {
              f = o[p.h], d = a[p.i], s.b && c && Math.abs(p.h - p.i) >= l && (t.push(n({ type: "childList", target: r, addedNodes: [f], removedNodes: [f], nextSibling: f.nextSibling, previousSibling: f.previousSibling })), c--), s.a && d.a && i(t, f, d.a, s.d), s.c && 3 === f.nodeType && f.nodeValue !== d.c && t.push(n({ type: "characterData", target: f })), s.e && u(f, d);
            }
          }function u(r, o) {
            for (var d, p, b, h, v, y = r.childNodes, _ = o.b, g = y.length, m = _ ? _.length : 0, j = 0, $ = 0, O = 0; g > $ || m > O;) {
              h = y[$], v = (b = _[O]) && b.j, h === v ? (s.a && b.a && i(t, h, b.a, s.d), s.c && b.c !== e && h.nodeValue !== b.c && t.push(n({ type: "characterData", target: h })), p && a(p, r, y, _, j), s.e && (h.childNodes.length || b.b && b.b.length) && u(h, b), $++, O++) : (l = !0, d || (d = {}, p = []), h && (d[b = c(h)] || (d[b] = !0, -1 === (b = f(_, h, O, "j")) ? s.b && (t.push(n({ type: "childList", target: r, addedNodes: [h], nextSibling: h.nextSibling, previousSibling: h.previousSibling })), j++) : p.push({ h: $, i: b })), $++), v && v !== y[$] && (d[b = c(v)] || (d[b] = !0, -1 === (b = f(y, v, $)) ? s.b && (t.push(n({ type: "childList", target: o.j, removedNodes: [v], nextSibling: _[O + 1], previousSibling: _[O - 1] })), j--) : p.push({ h: b, i: O })), O++));
            }p && a(p, r, y, _, j);
          }var l;return u(r, o), l;
        }function a(e, t) {
          var r = !0;return function n(e) {
            var o = { j: e };return !t.c || 3 !== e.nodeType && 8 !== e.nodeType ? (t.a && r && 1 === e.nodeType && (o.a = l(e.attributes, function (e, r) {
              return t.d && !t.d[r.name] || (e[r.name] = r.value), e;
            })), r && (t.b || t.c || t.a && t.e) && (o.b = u(e.childNodes, n)), r = t.e) : o.c = e.nodeValue, o;
          }(e);
        }function c(e) {
          try {
            return e.id || (e.mo_id = e.mo_id || d++);
          } catch (t) {
            try {
              return e.nodeValue;
            } catch (r) {
              return d++;
            }
          }
        }function u(e, t) {
          for (var r = [], n = 0; n < e.length; n++) {
            r[n] = t(e[n], n, e);
          }return r;
        }function l(e, t) {
          for (var r = {}, n = 0; n < e.length; n++) {
            r = t(r, e[n], n, e);
          }return r;
        }function f(e, t, r, n) {
          for (; r < e.length; r++) {
            if ((n ? e[r][n] : e[r]) === t) return r;
          }return -1;
        }t._period = 30, t.prototype = { observe: function observe(e, t) {
            for (var n = { a: !!(t.attributes || t.attributeFilter || t.attributeOldValue), b: !!t.childList, e: !!t.subtree, c: !(!t.characterData && !t.characterDataOldValue) }, i = this.g, s = 0; s < i.length; s++) {
              i[s].m === e && i.splice(s, 1);
            }t.attributeFilter && (n.d = l(t.attributeFilter, function (e, t) {
              return e[t] = !0, e;
            })), i.push({ m: e, l: o(e, n) }), this.f || r(this);
          }, takeRecords: function takeRecords() {
            for (var e = [], t = this.g, r = 0; r < t.length; r++) {
              t[r].l(e);
            }return e;
          }, disconnect: function disconnect() {
            this.g = [], clearTimeout(this.f), this.f = null;
          } };var d = 1;return t;
      }(void 0);
    }, {}], 91: [function (e, t, r) {
      Object.observe || function (e, t, r, n) {
        "use strict";
        var o,
            i,
            s = ["add", "update", "delete", "reconfigure", "setPrototype", "preventExtensions"],
            a = t.isArray || function (e) {
          return function (t) {
            return "[object Array]" === e.call(t);
          };
        }(e.prototype.toString),
            c = t.prototype.indexOf ? t.indexOf || function (e, r, n) {
          return t.prototype.indexOf.call(e, r, n);
        } : function (e, t, r) {
          for (var n = r || 0; n < e.length; n++) {
            if (e[n] === t) return n;
          }return -1;
        },
            u = r.Map !== n && Map.prototype.forEach ? function () {
          return new Map();
        } : function () {
          var e = [],
              t = [];return { size: 0, has: function has(t) {
              return c(e, t) > -1;
            }, get: function get(r) {
              return t[c(e, r)];
            }, set: function set(r, n) {
              var o = c(e, r);-1 === o ? (e.push(r), t.push(n), this.size++) : t[o] = n;
            }, "delete": function _delete(r) {
              var n = c(e, r);n > -1 && (e.splice(n, 1), t.splice(n, 1), this.size--);
            }, forEach: function forEach(r) {
              for (var n = 0; n < e.length; n++) {
                r.call(arguments[1], t[n], e[n], this);
              }
            } };
        },
            l = e.getOwnPropertyNames ? function () {
          var t = e.getOwnPropertyNames;try {
            arguments.callee;
          } catch (r) {
            var n = (t(c).join(" ") + " ").replace(/prototype |length |name /g, "").slice(0, -1).split(" ");n.length && (t = function t(_t3) {
              var r = e.getOwnPropertyNames(_t3);if ("function" == typeof _t3) for (var o, i = 0; i < n.length;) {
                (o = c(r, n[i++])) > -1 && r.splice(o, 1);
              }return r;
            });
          }return t;
        }() : function (t) {
          var r,
              n,
              o = [];if ("hasOwnProperty" in t) for (r in t) {
            t.hasOwnProperty(r) && o.push(r);
          } else {
            n = e.hasOwnProperty;for (r in t) {
              n.call(t, r) && o.push(r);
            }
          }return a(t) && o.push("length"), o;
        },
            f = e.getPrototypeOf,
            d = e.defineProperties && e.getOwnPropertyDescriptor,
            p = r.requestAnimationFrame || r.webkitRequestAnimationFrame || function () {
          var e = +new Date(),
              t = e;return function (r) {
            return setTimeout(function () {
              r((t = +new Date()) - e);
            }, 17);
          };
        }(),
            b = function b(e, t, r) {
          var n = o.get(e);n ? (v(n, e), m(e, n, t, r)) : (n = h(e), m(e, n, t, r), 1 === o.size && p(y));
        },
            h = function h(t, r) {
          var n,
              i = l(t),
              s = [],
              a = 0,
              r = { handlers: u(), frozen: e.isFrozen ? e.isFrozen(t) : !1, extensible: e.isExtensible ? e.isExtensible(t) : !0, proto: f && f(t), properties: i, values: s, notifier: g(t, r) };if (d) for (n = r.descriptors = []; a < i.length;) {
            n[a] = d(t, i[a]), s[a] = t[i[a++]];
          } else for (; a < i.length;) {
            s[a] = t[i[a++]];
          }return o.set(t, r), r;
        },
            v = function () {
          var t = d ? function (e, t, r, n, o) {
            var i = t.properties[r],
                s = e[i],
                a = t.values[r],
                c = t.descriptors[r];"value" in o && (a === s ? 0 === a && 1 / a !== 1 / s : a === a || s === s) && (j(e, t, { name: i, type: "update", object: e, oldValue: a }, n), t.values[r] = s), !c.configurable || o.configurable && o.writable === c.writable && o.enumerable === c.enumerable && o.get === c.get && o.set === c.set || (j(e, t, { name: i, type: "reconfigure", object: e, oldValue: a }, n), t.descriptors[r] = o);
          } : function (e, t, r, n) {
            var o = t.properties[r],
                i = e[o],
                s = t.values[r];(s === i ? 0 === s && 1 / s !== 1 / i : s === s || i === i) && (j(e, t, { name: o, type: "update", object: e, oldValue: s }, n), t.values[r] = i);
          },
              r = d ? function (e, r, n, o, i) {
            for (var s, a = r.length; n && a--;) {
              null !== r[a] && (s = d(e, r[a]), n--, s ? t(e, o, a, i, s) : (j(e, o, { name: r[a], type: "delete", object: e, oldValue: o.values[a] }, i), o.properties.splice(a, 1), o.values.splice(a, 1), o.descriptors.splice(a, 1)));
            }
          } : function (e, t, r, n, o) {
            for (var i = t.length; r && i--;) {
              null !== t[i] && (j(e, n, { name: t[i], type: "delete", object: e, oldValue: n.values[i] }, o), n.properties.splice(i, 1), n.values.splice(i, 1), r--);
            }
          };return function (n, o, i) {
            if (n.handlers.size && !n.frozen) {
              var s,
                  a,
                  u,
                  p,
                  b,
                  h,
                  v,
                  y,
                  _ = n.values,
                  g = n.descriptors,
                  m = 0;if (n.extensible) {
                if (s = n.properties.slice(), a = s.length, u = l(o), g) {
                  for (; m < u.length;) {
                    b = u[m++], p = c(s, b), y = d(o, b), -1 === p ? (j(o, n, { name: b, type: "add", object: o }, i), n.properties.push(b), _.push(o[b]), g.push(y)) : (s[p] = null, a--, t(o, n, p, i, y));
                  }r(o, s, a, n, i), e.isExtensible(o) || (n.extensible = !1, j(o, n, { type: "preventExtensions", object: o }, i), n.frozen = e.isFrozen(o));
                } else {
                  for (; m < u.length;) {
                    b = u[m++], p = c(s, b), h = o[b], -1 === p ? (j(o, n, { name: b, type: "add", object: o }, i), n.properties.push(b), _.push(h)) : (s[p] = null, a--, t(o, n, p, i));
                  }r(o, s, a, n, i);
                }
              } else if (!n.frozen) {
                for (; m < s.length; m++) {
                  b = s[m], t(o, n, m, i, d(o, b));
                }e.isFrozen(o) && (n.frozen = !0);
              }f && (v = f(o), v !== n.proto && (j(o, n, { type: "setPrototype", name: "__proto__", object: o, oldValue: n.proto }), n.proto = v));
            }
          };
        }(),
            y = function y() {
          o.size && (o.forEach(v), i.forEach(_), p(y));
        },
            _ = function _(e, t) {
          var r = e.changeRecords;r.length && (e.changeRecords = [], t(r));
        },
            g = function g(e, t) {
          return arguments.length < 2 && (t = o.get(e)), t && t.notifier || { notify: function notify(t) {
              t.type;var r = o.get(e);if (r) {
                var n,
                    i = { object: e };for (n in t) {
                  "object" !== n && (i[n] = t[n]);
                }j(e, r, i);
              }
            }, performChange: function performChange(t, r) {
              if ("string" != typeof t) throw new TypeError("Invalid non-string changeType");if ("function" != typeof r) throw new TypeError("Cannot perform non-function");var i,
                  s,
                  a = o.get(e),
                  c = arguments[2],
                  u = c === n ? r() : r.call(c);if (a && v(a, e, t), a && u && "object" == (typeof u === "undefined" ? "undefined" : _typeof(u))) {
                s = { object: e, type: t };for (i in u) {
                  "object" !== i && "type" !== i && (s[i] = u[i]);
                }j(e, a, s);
              }
            } };
        },
            m = function m(e, t, r, n) {
          var o = i.get(r);o || i.set(r, o = { observed: u(), changeRecords: [] }), o.observed.set(e, { acceptList: n.slice(), data: t }), t.handlers.set(r, o);
        },
            j = function j(e, t, r, n) {
          t.handlers.forEach(function (t) {
            var o = t.observed.get(e).acceptList;("string" != typeof n || -1 === c(o, n)) && c(o, r.type) > -1 && t.changeRecords.push(r);
          });
        };o = u(), i = u(), e.observe = function (t, r, o) {
          if (!t || "object" != (typeof t === "undefined" ? "undefined" : _typeof(t)) && "function" != typeof t) throw new TypeError("Object.observe cannot observe non-object");if ("function" != typeof r) throw new TypeError("Object.observe cannot deliver to non-function");if (e.isFrozen && e.isFrozen(r)) throw new TypeError("Object.observe cannot deliver to a frozen function object");if (o === n) o = s;else if (!o || "object" != (typeof o === "undefined" ? "undefined" : _typeof(o))) throw new TypeError("Third argument to Object.observe must be an array of strings.");return b(t, r, o), t;
        }, e.unobserve = function (e, t) {
          if (null === e || "object" != (typeof e === "undefined" ? "undefined" : _typeof(e)) && "function" != typeof e) throw new TypeError("Object.unobserve cannot unobserve non-object");if ("function" != typeof t) throw new TypeError("Object.unobserve cannot deliver to non-function");var r,
              n = i.get(t);return n && (r = n.observed.get(e)) && (n.observed.forEach(function (e, t) {
            v(e.data, t);
          }), p(function () {
            _(n, t);
          }), 1 === n.observed.size && n.observed.has(e) ? i["delete"](t) : n.observed["delete"](e), 1 === r.data.handlers.size ? o["delete"](e) : r.data.handlers["delete"](t)), e;
        }, e.getNotifier = function (t) {
          if (null === t || "object" != (typeof t === "undefined" ? "undefined" : _typeof(t)) && "function" != typeof t) throw new TypeError("Object.getNotifier cannot getNotifier non-object");return e.isFrozen && e.isFrozen(t) ? null : g(t);
        }, e.deliverChangeRecords = function (e) {
          if ("function" != typeof e) throw new TypeError("Object.deliverChangeRecords cannot deliver to non-function");var t = i.get(e);t && (t.observed.forEach(function (e, t) {
            v(e.data, t);
          }), _(t, e));
        };
      }(Object, Array, this);
    }, {}], 92: [function (e, t, r) {
      "use strict";
      function n(e) {
        return e && e.__esModule ? e : { "default": e };
      }Object.defineProperty(r, "__esModule", { value: !0 }), r.DataObjectObserver = r.DataObjectReporter = r.Syncher = void 0, e("mutationobserver-shim"), e("object.observe"), e("array.observe");var o = e("./syncher/Syncher"),
          i = n(o),
          s = e("./syncher/DataObjectReporter"),
          a = n(s),
          c = e("./syncher/DataObjectObserver"),
          u = n(c);r.Syncher = i["default"], r.DataObjectReporter = a["default"], r.DataObjectObserver = u["default"];
    }, { "./syncher/DataObjectObserver": 95, "./syncher/DataObjectReporter": 96, "./syncher/Syncher": 99, "array.observe": 1, "mutationobserver-shim": 90, "object.observe": 91 }], 93: [function (e, t, r) {
      "use strict";
      function n(e) {
        return e && e.__esModule ? e : { "default": e };
      }Object.defineProperty(r, "__esModule", { value: !0 });var o = e("babel-runtime/core-js/promise"),
          i = n(o),
          s = e("babel-runtime/core-js/object/keys"),
          a = n(s),
          c = e("babel-runtime/helpers/classCallCheck"),
          u = n(c),
          l = e("babel-runtime/helpers/createClass"),
          f = n(l),
          d = e("./SyncObject"),
          p = n(d),
          b = e("./DataObjectChild"),
          h = n(b),
          v = e("../utils/utils.js"),
          y = function () {
        function e(t, r, n, o, i, s) {
          (0, u["default"])(this, e);var a = this;a._syncher = t, a._url = r, a._schema = n, a._status = o, a._syncObj = new p["default"](i), a._childrens = s, a._version = 0, a._childId = 0, a._childrenObjects = {}, a._childrenListeners = [], a._owner = t._owner, a._bus = t._bus;
        }return (0, f["default"])(e, [{ key: "_allocateListeners", value: function value() {
            var e = this,
                t = this,
                r = t._url + "/children/";t._childrens && t._childrens.forEach(function (n) {
              var o = r + n,
                  i = t._bus.addListener(o, function (r) {
                if (r.from !== e._owner) switch (console.log("DataObject-Children-RCV: ", r), r.type) {case "create":
                    t._onChildCreate(r);break;case "delete":
                    console.log(r);break;default:
                    t._changeChildren(r);}
              });t._childrenListeners.push(i);
            });
          } }, { key: "_releaseListeners", value: function value() {
            var e = this;e._childrenListeners.forEach(function (e) {
              e.remove();
            }), (0, a["default"])(e._childrenObjects).forEach(function (t) {
              e._childrenObjects[t]._releaseListeners();
            });
          } }, { key: "pause", value: function value() {
            throw "Not implemented";
          } }, { key: "resume", value: function value() {
            throw "Not implemented";
          } }, { key: "stop", value: function value() {
            throw "Not implemented";
          } }, { key: "addChild", value: function value(e, t) {
            var r = this;r._childId++;var n = r._owner + "#" + r._childId,
                o = r._url + "/children/" + e,
                s = { type: "create", from: r._owner, to: o, body: { resource: n, value: t } };return new i["default"](function (e) {
              var i = r._bus.postMessage(s);console.log("create-reporter-child( " + r._owner + " ): ", s);var a = new h["default"](r, n, t, r._owner, i);a.onChange(function (e) {
                r._onChange(e, { path: o, childId: n });
              }), r._childrenObjects[n] = a, e(a);
            });
          } }, { key: "onAddChild", value: function value(e) {
            this._onAddChildrenHandler = e;
          } }, { key: "_onChildCreate", value: function value(e) {
            var t = this,
                r = e.body.resource;console.log("create-observer-child( " + t._owner + " ): ", e);var n = new h["default"](t, r, e.body.value);t._childrenObjects[r] = n, setTimeout(function () {
              t._bus.postMessage({ id: e.id, type: "response", from: e.to, to: e.from, body: { code: 200, source: t._owner } });
            });var o = { type: e.type, from: e.from, url: e.to, value: e.body.value, childId: r, identity: e.body.identity };t._onAddChildrenHandler && (console.log("ADD-CHILDREN-EVENT: ", o), t._onAddChildrenHandler(o));
          } }, { key: "_onChange", value: function value(e, t) {
            var r = this;if (r._version++, "on" === r._status) {
              var n = { type: "update", from: r._url, to: r._url + "/changes", body: { version: r._version, source: r._owner, attribute: e.field } };e.oType === d.ObjectType.OBJECT ? e.cType !== d.ChangeType.REMOVE && (n.body.value = e.data) : (n.body.attributeType = e.oType, n.body.value = e.data, e.cType !== d.ChangeType.UPDATE && (n.body.operation = e.cType)), t && (n.to = t.path, n.body.resource = t.childId), r._bus.postMessage(n);
            }
          } }, { key: "_changeObject", value: function value(e, t) {
            var r = this;if (r._version + 1 === t.body.version) {
              r._version++;var n = t.body.attribute,
                  o = (0, v.deepClone)(t.body.value),
                  i = e.findBefore(n);if (t.body.attributeType === d.ObjectType.ARRAY) {
                if (t.body.operation === d.ChangeType.ADD) {
                  var s = i.obj,
                      a = i.last;Array.prototype.splice.apply(s, [a, 0].concat(o));
                } else if (t.body.operation === d.ChangeType.REMOVE) {
                  var c = i.obj,
                      u = i.last;c.splice(u, o);
                } else i.obj[i.last] = o;
              } else t.body.value ? i.obj[i.last] = o : delete i.obj[i.last];
            } else console.log("UNSYNCHRONIZED VERSION: (data => " + r._version + ", msg => " + t.body.version + ")");
          } }, { key: "_changeChildren", value: function value(e) {
            var t = this;console.log("Change children: ", t._owner, e);var r = e.body.resource,
                n = t._childrenObjects[r];n ? t._changeObject(n._syncObj, e) : console.log("No children found for: ", r);
          } }, { key: "url", get: function get() {
            return this._url;
          } }, { key: "schema", get: function get() {
            return this._schema;
          } }, { key: "status", get: function get() {
            return this._status;
          } }, { key: "data", get: function get() {
            return this._syncObj.data;
          } }, { key: "childrens", get: function get() {
            return this._childrenObjects;
          } }]), e;
      }();r["default"] = y, t.exports = r["default"];
    }, { "../utils/utils.js": 100, "./DataObjectChild": 94, "./SyncObject": 98, "babel-runtime/core-js/object/keys": 7, "babel-runtime/core-js/promise": 9, "babel-runtime/helpers/classCallCheck": 11, "babel-runtime/helpers/createClass": 12 }], 94: [function (e, t, r) {
      "use strict";
      function n(e) {
        return e && e.__esModule ? e : { "default": e };
      }Object.defineProperty(r, "__esModule", { value: !0 });var o = e("babel-runtime/helpers/classCallCheck"),
          i = n(o),
          s = e("babel-runtime/helpers/createClass"),
          a = n(s),
          c = e("./SyncObject"),
          u = n(c),
          l = function () {
        function e(t, r, n, o, s) {
          (0, i["default"])(this, e);var a = this;a._parent = t, a._childId = r, a._owner = o, a._msgId = s, a._syncObj = new u["default"](n), a._bus = t._bus, a._allocateListeners();
        }return (0, a["default"])(e, [{ key: "_allocateListeners", value: function value() {
            var e = this;e._owner && (e._listener = e._bus.addListener(e._owner, function (t) {
              "response" === t.type && t.id === e._msgId && (console.log("DataObjectChild.onResponse:", t), e._onResponse(t));
            }));
          } }, { key: "_releaseListeners", value: function value() {
            var e = this;e._listener && e._listener.remove();
          } }, { key: "delete", value: function value() {
            var e = this;delete e._parent._children[e._childId], e._releaseListeners();
          } }, { key: "onChange", value: function value(e) {
            this._syncObj.observe(function (t) {
              e(t);
            });
          } }, { key: "onResponse", value: function value(e) {
            this._onResponseHandler = e;
          } }, { key: "_onResponse", value: function value(e) {
            var t = this,
                r = { type: e.type, url: e.body.source, code: e.body.code };t._onResponseHandler && t._onResponseHandler(r);
          } }, { key: "childId", get: function get() {
            return this._childId;
          } }, { key: "data", get: function get() {
            return this._syncObj.data;
          } }]), e;
      }();r["default"] = l, t.exports = r["default"];
    }, { "./SyncObject": 98, "babel-runtime/helpers/classCallCheck": 11, "babel-runtime/helpers/createClass": 12 }], 95: [function (e, t, r) {
      "use strict";
      function n(e) {
        return e && e.__esModule ? e : { "default": e };
      }Object.defineProperty(r, "__esModule", { value: !0 });var o = e("babel-runtime/core-js/object/keys"),
          i = n(o),
          s = e("babel-runtime/core-js/object/get-prototype-of"),
          a = n(s),
          c = e("babel-runtime/helpers/classCallCheck"),
          u = n(c),
          l = e("babel-runtime/helpers/createClass"),
          f = n(l),
          d = e("babel-runtime/helpers/possibleConstructorReturn"),
          p = n(d),
          b = e("babel-runtime/helpers/get"),
          h = n(b),
          v = e("babel-runtime/helpers/inherits"),
          y = n(v),
          _ = e("./DataObject"),
          g = n(_),
          m = e("./DataObjectChild"),
          j = n(m),
          $ = { ANY: "any", START: "start", EXACT: "exact" },
          O = function (e) {
        function t(e, r, n, o, s, c, l) {
          (0, u["default"])(this, t);var f = (0, p["default"])(this, (0, a["default"])(t).call(this, e, r, n, o, s.data, c)),
              d = f;return d._version = l, d._filters = {}, d._syncObj.observe(function (e) {
            d._onFilter(e);
          }), (0, i["default"])(s.childrens).forEach(function (e) {
            var t = s.childrens[e];d._childrenObjects[e] = new j["default"](d, e, t);
          }), d._allocateListeners(), f;
        }return (0, y["default"])(t, e), (0, f["default"])(t, [{ key: "_allocateListeners", value: function value() {
            (0, h["default"])((0, a["default"])(t.prototype), "_allocateListeners", this).call(this);var e = this;e._changeListener = e._bus.addListener(e._url + "/changes", function (t) {
              "update" === t.type && (console.log("DataObjectObserver-" + e._url + "-RCV: ", t), e._changeObject(e._syncObj, t));
            });
          } }, { key: "_releaseListeners", value: function value() {
            (0, h["default"])((0, a["default"])(t.prototype), "_releaseListeners", this).call(this);var e = this;e._changeListener.remove();
          } }, { key: "delete", value: function value() {
            var e = this;e._releaseListeners(), delete e._syncher._observers[e._url];
          } }, { key: "unsubscribe", value: function value() {
            var e = this,
                t = { type: "unsubscribe", from: e._owner, to: e._syncher._subURL, body: { resource: e._url } };e._bus.postMessage(t, function (t) {
              console.log("DataObjectObserver-UNSUBSCRIBE: ", t), 200 === t.body.code && (e._releaseListeners(), delete e._syncher._observers[e._url]);
            });
          } }, { key: "onChange", value: function value(e, t) {
            var r = e,
                n = { type: $.EXACT, callback: t },
                o = e.indexOf("*");o === e.length - 1 && (0 === o ? n.type = $.ANY : (n.type = $.START, r = e.substr(0, e.length - 1))), this._filters[r] = n;
          } }, { key: "_onFilter", value: function value(e) {
            var t = this;(0, i["default"])(t._filters).forEach(function (r) {
              var n = t._filters[r];n.type === $.ANY ? n.callback(e) : n.type === $.START ? 0 === e.field.indexOf(r) && n.callback(e) : n.type === $.EXACT && e.field === r && n.callback(e);
            });
          } }]), t;
      }(g["default"]);r["default"] = O, t.exports = r["default"];
    }, { "./DataObject": 93, "./DataObjectChild": 94, "babel-runtime/core-js/object/get-prototype-of": 6, "babel-runtime/core-js/object/keys": 7, "babel-runtime/helpers/classCallCheck": 11, "babel-runtime/helpers/createClass": 12, "babel-runtime/helpers/get": 13, "babel-runtime/helpers/inherits": 14, "babel-runtime/helpers/possibleConstructorReturn": 15 }], 96: [function (e, t, r) {
      "use strict";
      function n(e) {
        return e && e.__esModule ? e : { "default": e };
      }Object.defineProperty(r, "__esModule", { value: !0 });var o = e("babel-runtime/core-js/object/keys"),
          i = n(o),
          s = e("babel-runtime/core-js/object/get-prototype-of"),
          a = n(s),
          c = e("babel-runtime/helpers/classCallCheck"),
          u = n(c),
          l = e("babel-runtime/helpers/createClass"),
          f = n(l),
          d = e("babel-runtime/helpers/possibleConstructorReturn"),
          p = n(d),
          b = e("babel-runtime/helpers/get"),
          h = n(b),
          v = e("babel-runtime/helpers/inherits"),
          y = n(v),
          _ = e("./DataObject"),
          g = n(_),
          m = e("../utils/utils.js"),
          j = function (e) {
        function t(e, r, n, o, i, s) {
          (0, u["default"])(this, t);var c = (0, p["default"])(this, (0, a["default"])(t).call(this, e, r, n, o, i, s)),
              l = c;return l._subscriptions = {}, l._syncObj.observe(function (e) {
            console.log("DataObjectReporter-" + r + "-SEND: ", e), l._onChange(e);
          }), l._allocateListeners(), c;
        }return (0, y["default"])(t, e), (0, f["default"])(t, [{ key: "_allocateListeners", value: function value() {
            (0, h["default"])((0, a["default"])(t.prototype), "_allocateListeners", this).call(this);var e = this;e._responseListener = e._bus.addListener(e._url, function (t) {
              "response" === t.type && e._onResponse(t);
            });
          } }, { key: "_releaseListeners", value: function value() {
            (0, h["default"])((0, a["default"])(t.prototype), "_releaseListeners", this).call(this);var e = this;e._responseListener.remove();
          } }, { key: "inviteObservers", value: function value(e) {
            var t = this,
                r = { type: "create", from: t._syncher._owner, to: t._syncher._subURL, body: { resource: t._url, schema: t._schema, value: t._syncObj.data, authorise: e } };t._bus.postMessage(r);
          } }, { key: "delete", value: function value() {
            var e = this,
                t = { type: "delete", from: e._owner, to: e._syncher._subURL, body: { resource: e._url } };e._bus.postMessage(t, function (t) {
              console.log("DataObjectReporter-DELETE: ", t), 200 === t.body.code && (e._releaseListeners(), delete e._syncher._reporters[e._url]);
            });
          } }, { key: "onSubscription", value: function value(e) {
            this._onSubscriptionHandler = e;
          } }, { key: "onResponse", value: function value(e) {
            this._onResponseHandler = e;
          } }, { key: "_onForward", value: function value(e) {
            var t = this;switch (console.log("DataObjectReporter-RCV: ", e), e.body.type) {case "subscribe":
                t._onSubscribe(e);break;case "unsubscribe":
                t._onUnSubscribe(e);}
          } }, { key: "_onSubscribe", value: function value(e) {
            var t = this,
                r = e.body.from,
                n = { type: e.body.type, url: r, accept: function accept() {
                var n = { url: r, status: "on" };t._subscriptions[r] = n;var o = {};return (0, i["default"])(t._childrenObjects).forEach(function (e) {
                  var r = t._childrenObjects[e].data;o[e] = (0, m.deepClone)(r);
                }), t._bus.postMessage({ id: e.id, type: "response", from: e.to, to: e.from, body: { code: 200, schema: t._schema, version: t._version, value: { data: (0, m.deepClone)(t.data), childrens: o } } }), n;
              }, reject: function reject(r) {
                t._bus.postMessage({ id: e.id, type: "response", from: e.to, to: e.from, body: { code: 403, desc: r } });
              } };t._onSubscriptionHandler && (console.log("SUBSCRIPTION-EVENT: ", n), t._onSubscriptionHandler(n));
          } }, { key: "_onUnSubscribe", value: function value(e) {
            var t = this,
                r = e.body.from,
                n = t._subscriptions[r];delete t._subscriptions[r];var o = { type: e.body.type, url: r, object: n };t._onSubscriptionHandler && (console.log("UN-SUBSCRIPTION-EVENT: ", o), t._onSubscriptionHandler(o));
          } }, { key: "_onResponse", value: function value(e) {
            var t = this,
                r = { type: e.type, url: e.from, code: e.body.code };t._onResponseHandler && (console.log("RESPONSE-EVENT: ", r), t._onResponseHandler(r));
          } }, { key: "subscriptions", get: function get() {
            return this._subscriptions;
          } }]), t;
      }(g["default"]);r["default"] = j, t.exports = r["default"];
    }, { "../utils/utils.js": 100, "./DataObject": 93, "babel-runtime/core-js/object/get-prototype-of": 6, "babel-runtime/core-js/object/keys": 7, "babel-runtime/helpers/classCallCheck": 11, "babel-runtime/helpers/createClass": 12, "babel-runtime/helpers/get": 13, "babel-runtime/helpers/inherits": 14, "babel-runtime/helpers/possibleConstructorReturn": 15 }], 97: [function (e, t, r) {
      "use strict";
      function n(e) {
        return e && e.__esModule ? e : { "default": e };
      }Object.defineProperty(r, "__esModule", { value: !0 });var o = e("babel-runtime/helpers/classCallCheck"),
          i = n(o),
          s = e("babel-runtime/helpers/createClass"),
          a = n(s),
          c = function () {
        function e(t, r, n, o) {
          (0, i["default"])(this, e);var s = this;s._owner = t, s._url = r, s._bus = n, s._children = o, s._changes = [], s._allocateListeners();
        }return (0, a["default"])(e, [{ key: "_allocateListeners", value: function value() {
            var e = this;e._listener = e._bus.addListener(e._url, function (t) {
              console.log("DataProvisional-" + e._url + "-RCV: ", t), e._changes.push(t);
            });
          } }, { key: "_releaseListeners", value: function value() {
            var e = this;e._listener.remove();
          } }, { key: "apply", value: function value(e) {
            var t = this;t._changes.forEach(function (t) {
              e._changeObject(e._syncObj, t);
            });
          } }, { key: "children", get: function get() {
            return this._children;
          } }]), e;
      }();r["default"] = c, t.exports = r["default"];
    }, { "babel-runtime/helpers/classCallCheck": 11, "babel-runtime/helpers/createClass": 12 }], 98: [function (e, t, r) {
      "use strict";
      function n(e) {
        return e && e.__esModule ? e : { "default": e };
      }Object.defineProperty(r, "__esModule", { value: !0 }), r.ObjectType = r.ChangeType = void 0;var o = e("babel-runtime/core-js/object/keys"),
          i = n(o),
          s = e("babel-runtime/helpers/classCallCheck"),
          a = n(s),
          c = e("babel-runtime/helpers/createClass"),
          u = n(c),
          l = e("../utils/utils.js"),
          f = function () {
        function e(t) {
          (0, a["default"])(this, e);var r = this;r._observers = [], r._filters = {}, t ? r._data = (0, l.deepClone)(t) : r._data = {}, r._internalObserve(new d(), r._data);
        }return (0, u["default"])(e, [{ key: "observe", value: function value(e) {
            this._observers.push(e);
          } }, { key: "find", value: function value(e) {
            var t = e.split(".");return this._findWithSplit(t);
          } }, { key: "findBefore", value: function value(e) {
            var t = {},
                r = e.split(".");return t.last = r.pop(), t.obj = this._findWithSplit(r), t;
          } }, { key: "_findWithSplit", value: function value(e) {
            var t = this._data;return e.forEach(function (e) {
              t = t[e];
            }), t;
          } }, { key: "_fireEvent", value: function value(e) {
            this._observers.forEach(function (t) {
              t(e);
            });
          } }, { key: "_isObservable", value: function value(e) {
            return e.constructor === Object || e.constructor === Array;
          } }, { key: "_internalObserve", value: function value(e, t) {
            var r = this;if (r._isObservable(t)) {
              var n = function n(t) {
                r._onChanges(e, t);
              };if (t.constructor === Object) {
                Object.observe(t, n);for (var o in t) {
                  r._isObservable(t[o]) && r._internalObserve(e["new"](o), t[o]);
                }
              } else if (t.constructor === Array) {
                Array.observe(t, n);for (var i in t) {
                  if (r._isObservable(t[i])) {
                    var s = e["new"](new p(t[i], i));r._internalObserve(s, t[i]);
                  }
                }
              }
            }
          } }, { key: "_onChanges", value: function value(e, t) {
            var r = this;for (var n in t) {
              var o = t[n].object,
                  i = void 0;if (o.constructor === Object && (i = h.OBJECT), o.constructor === Array && (i = h.ARRAY), "splice" === t[n].type) !function () {
                var s = t[n].index,
                    a = e["new"]("" + s),
                    c = a.toString(),
                    u = t[n].removed.length;if (0 !== u) {
                  var f = t[n].removed;f.forEach(function (t, n) {
                    r._isObservable(t) && e.removeIndex(s + n);
                  }), r._fireEvent({ cType: b.REMOVE, oType: i, field: c, data: u });
                }var d = t[n].addedCount;if (0 !== d) {
                  var h = o.slice(s, s + d);h.forEach(function (t, n) {
                    if (r._isObservable(t)) {
                      var o = e["new"](new p(t, s + n));r._internalObserve(o, t);
                    }
                  }), r._fireEvent({ cType: b.ADD, oType: i, field: c, data: (0, l.deepClone)(h) });
                }s !== o.length - 1 && e.reIndexFrom(o);
              }();else {
                var s = e["new"](t[n].name),
                    a = s.toString();if (-1 !== a.indexOf("Symbol")) continue;var c = o[t[n].name];"update" === t[n].type && this._fireEvent({ cType: b.UPDATE, oType: i, field: a, data: (0, l.deepClone)(c) }), "add" === t[n].type && (this._internalObserve(s, c), this._fireEvent({ cType: b.ADD, oType: i, field: a, data: (0, l.deepClone)(c) })), "delete" === t[n].type && this._fireEvent({ cType: b.REMOVE, oType: i, field: a });
              }
            }
          } }, { key: "data", get: function get() {
            return this._data;
          } }]), e;
      }(),
          d = function () {
        function e() {
          (0, a["default"])(this, e), this._path = [], this._observables = {};
        }return (0, u["default"])(e, [{ key: "removeIndex", value: function value(e) {
            delete this._observables[e];
          } }, { key: "reIndexFrom", value: function value(e) {
            var t = this;(0, i["default"])(this._observables).forEach(function (r) {
              var n = t._observables[r],
                  o = e.indexOf(n.obj);n.idx != o && (n.idx = o, delete t._observables[r], t._observables[o] = n);
            });
          } }, { key: "new", value: function value(e) {
            e.constructor == p && (this._observables[e.idx] = e);var t = this.clone();return t._path.push(e), t;
          } }, { key: "clone", value: function value() {
            var t = new e();return this._path.forEach(function (e) {
              t._path.push(e);
            }), t;
          } }, { key: "toString", value: function value() {
            var e = "";return this._path.forEach(function (t, r) {
              0 === r ? e = t.toString() : e += "." + t.toString();
            }), e;
          } }]), e;
      }(),
          p = function () {
        function e(t, r) {
          (0, a["default"])(this, e), this.obj = t, this.idx = r;
        }return (0, u["default"])(e, [{ key: "toString", value: function value() {
            return this.idx.toString();
          } }]), e;
      }(),
          b = r.ChangeType = { UPDATE: "update", ADD: "add", REMOVE: "remove" },
          h = r.ObjectType = { OBJECT: "object", ARRAY: "array" };r["default"] = f;
    }, { "../utils/utils.js": 100, "babel-runtime/core-js/object/keys": 7, "babel-runtime/helpers/classCallCheck": 11, "babel-runtime/helpers/createClass": 12 }], 99: [function (e, t, r) {
      "use strict";
      function n(e) {
        return e && e.__esModule ? e : { "default": e };
      }Object.defineProperty(r, "__esModule", { value: !0 });var o = e("babel-runtime/core-js/promise"),
          i = n(o),
          s = e("babel-runtime/helpers/classCallCheck"),
          a = n(s),
          c = e("babel-runtime/helpers/createClass"),
          u = n(c),
          l = e("./DataObjectReporter"),
          f = n(l),
          d = e("./DataObjectObserver"),
          p = n(d),
          b = e("./DataProvisional"),
          h = n(b),
          v = function () {
        function e(t, r, n) {
          (0, a["default"])(this, e);var o = this;o._owner = t, o._bus = r, o._subURL = n.runtimeURL + "/sm", o._reporters = {}, o._observers = {}, o._provisionals = {}, r.addListener(t, function (e) {
            if (e.from !== t) switch (console.log("Syncher-RCV: ", e), e.type) {case "forward":
                o._onForward(e);break;case "create":
                o._onRemoteCreate(e);break;case "delete":
                o._onRemoteDelete(e);}
          });
        }return (0, u["default"])(e, [{ key: "create", value: function value(e, t, r) {
            var n = this;r.reporter = n._owner, r.schema = e;var o = { type: "create", from: n._owner, to: n._subURL, body: { schema: e, value: r, authorise: t } };return new i["default"](function (t, i) {
              n._bus.postMessage(o, function (o) {
                if (console.log("create-response: ", o), 200 === o.body.code) {
                  var s = o.body.resource,
                      a = new f["default"](n, s, e, "on", r, o.body.childrenResources);n._reporters[s] = a, t(a);
                } else i(o.body.desc);
              });
            });
          } }, { key: "subscribe", value: function value(e, t) {
            var r = this,
                n = { type: "subscribe", from: r._owner, to: r._subURL, body: { schema: e, resource: t } };return new i["default"](function (o, i) {
              r._bus.postMessage(n, function (n) {
                console.log("subscribe-response: ", n);var s = r._provisionals[t];if (delete r._provisionals[t], s && s._releaseListeners(), n.body.code < 200) s = new h["default"](r._owner, t, r._bus, n.body.childrenResources), r._provisionals[t] = s;else if (200 === n.body.code) {
                  var a = new p["default"](r, t, e, "on", n.body.value, s.children, n.body.version);r._observers[t] = a, o(a), s.apply(a);
                } else i(n.body.desc);
              });
            });
          } }, { key: "onNotification", value: function value(e) {
            this._onNotificationHandler = e;
          } }, { key: "_onForward", value: function value(e) {
            var t = this,
                r = t._reporters[e.body.to];r._onForward(e);
          } }, { key: "_onRemoteCreate", value: function value(e) {
            var t = this,
                r = e.from.slice(0, -13),
                n = { type: e.type, from: e.body.source, url: r, schema: e.body.schema, value: e.body.value, identity: e.body.identity, ack: function ack(r) {
                var n = 200;r && (n = r), t._bus.postMessage({ id: e.id, type: "response", from: e.to, to: e.from, body: { code: n } });
              } };t._onNotificationHandler && (console.log("NOTIFICATION-EVENT: ", n), t._onNotificationHandler(n));
          } }, { key: "_onRemoteDelete", value: function value(e) {
            var t = this,
                r = e.body.resource,
                n = t._observers[r];if (n) {
              var o = { type: e.type, url: r, identity: e.body.identity, ack: function ack(r) {
                  var o = 200;r && (o = r), 200 === o && n["delete"](), t._bus.postMessage({ id: e.id, type: "response", from: e.to, to: e.from, body: { code: o, source: t._owner } });
                } };t._onNotificationHandler && (console.log("NOTIFICATION-EVENT: ", o), t._onNotificationHandler(o));
            } else t._bus.postMessage({ id: e.id, type: "response", from: e.to, to: e.from, body: { code: 404, source: t._owner } });
          } }, { key: "owner", get: function get() {
            return this._owner;
          } }, { key: "reporters", get: function get() {
            return this._reporters;
          } }, { key: "observers", get: function get() {
            return this._observers;
          } }]), e;
      }();r["default"] = v, t.exports = r["default"];
    }, { "./DataObjectObserver": 95, "./DataObjectReporter": 96, "./DataProvisional": 97, "babel-runtime/core-js/promise": 9, "babel-runtime/helpers/classCallCheck": 11, "babel-runtime/helpers/createClass": 12 }], 100: [function (e, t, r) {
      "use strict";
      function n(e) {
        return e && e.__esModule ? e : { "default": e };
      }function o(e) {
        var t = /([a-zA-Z-]*):\/\/(?:\.)?([-a-zA-Z0-9@:%._\+~#=]{2,256})([-a-zA-Z0-9@:%._\+~#=\/]*)/gi,
            r = "$1,$2,$3",
            n = e.replace(t, r).split(",");n[0] === e && (n[0] = "https", n[1] = e);var o = { type: n[0], domain: n[1], identity: n[2] };return o;
      }function i(e) {
        return e ? JSON.parse((0, a["default"])(e)) : void 0;
      }Object.defineProperty(r, "__esModule", { value: !0 });var s = e("babel-runtime/core-js/json/stringify"),
          a = n(s);r.divideURL = o, r.deepClone = i;
    }, { "babel-runtime/core-js/json/stringify": 2 }] }, {}, [92])(92);
});

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],4:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.default = activate;

var _HypertyDiscovery = require('service-framework/dist/HypertyDiscovery');

var _HypertyDiscovery2 = _interopRequireDefault(_HypertyDiscovery);

var _Syncher = require('service-framework/dist/Syncher');

var _IdentityManager = require('./utils/IdentityManager.js');

var _IdentityManager2 = _interopRequireDefault(_IdentityManager);

var _EventEmitter2 = require('./utils/EventEmitter.js');

var _EventEmitter3 = _interopRequireDefault(_EventEmitter2);

var _utils = require('./utils/utils.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Copyright 2016 PT Inovação e Sistemas SA
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Copyright 2016 INESC-ID
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Copyright 2016 QUOBIS NETWORKS SL
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Copyright 2016 ORANGE SA
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Copyright 2016 Deutsche Telekom AG
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Copyright 2016 Apizee
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Licensed under the Apache License, Version 2.0 (the "License");
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * you may not use this file except in compliance with the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * You may obtain a copy of the License at
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *   http://www.apache.org/licenses/LICENSE-2.0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Unless required by applicable law or agreed to in writing, software
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * distributed under the License is distributed on an "AS IS" BASIS,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * See the License for the specific language governing permissions and
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * limitations under the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               **/

// Service Framework


// Utils


var status = {
  name: 'status',
  status: 'disconnected'
};

/**
* Hyperty Presence;
* @author Apizee [dev@apizee.com]
* @version 0.1.0
*/

var UserStatus = function (_EventEmitter) {
  _inherits(UserStatus, _EventEmitter);

  function UserStatus(hypertyURL, bus, configuration) {
    _classCallCheck(this, UserStatus);

    if (!hypertyURL) throw new Error('The hypertyURL is a needed parameter');
    if (!bus) throw new Error('The MiniBus is a needed parameter');
    if (!configuration) throw new Error('The configuration is a needed parameter');

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(UserStatus).call(this, hypertyURL, bus, configuration));

    var domain = (0, _utils.divideURL)(hypertyURL).domain;

    _this._syncher = new _Syncher.Syncher(hypertyURL, bus, configuration);

    _this._hypertyDiscovery = new _HypertyDiscovery2.default(hypertyURL, bus);

    _this._identityManager = new _IdentityManager2.default(hypertyURL, configuration.runtimeURL, bus);

    _this._objectDescURL = 'hyperty-catalogue://' + domain + '/.well-known/dataschemas/UserStatusDataSchema';

    _this._hypertyURL = hypertyURL;
    _this._domain = domain;

    _this._heartbeat = [];

    _this._syncher.onNotification(function (event) {
      _this._onNotification(event);
    });

    return _this;
  }

  _createClass(UserStatus, [{
    key: '_onNotification',
    value: function _onNotification(event) {
      var _this2 = this;

      console.info('Event Received: ', event);

      this.trigger('invitation', event.identity);

      event.ack();

      // Subscribe Hello World Object
      this._syncher.subscribe(this._objectDescURL, event.url).then(function (statusObjectObserver) {
        console.info('-------- Status Observer received ---------', statusObjectObserver);

        _this2.trigger('statusChange', {
          identity: event.identity,
          status: statusObjectObserver.data.status
        });

        _this2._managePresenceHeartbeat(event.identity);

        statusObjectObserver.onChange('*', function () {
          console.info('status event received:', event);
          _this2.trigger('statusChange', {
            identity: event.identity,
            status: statusObjectObserver.data.status
          });
          _this2._managePresenceHeartbeat(event.identity);
        });

        console.log(event.identity.email, 'has subscribe to my status data object, send invite to listen mine');
        _this2._statusObjectReporter.inviteObservers([event.from]);
      }).catch(function (reason) {
        console.error(reason);
      });
    }

    /**
     * This function is used to create a new status object syncher
     * @param  {URL.UserURL} participants List of User allowed
     * @return {Promise}
     */

  }, {
    key: 'create',
    value: function create(participants) {
      var _this3 = this;

      return new Promise(function (resolve, reject) {

        status.status = 'connected';
        status.owner = _this3._hypertyURL;
        status.name = 'presence';

        console.info('----------------------- Mapping Particpants --------------------');
        _this3._mappingUser(participants).then(function (hyperties) {
          return _this3.createSyncher(hyperties, status);
        }).then(function (statusObjectReporter) {
          _this3._statusObjectReporter = statusObjectReporter;
          _this3._statusObjectReporter.onSubscription(function (event) {
            console.info('-------- Status Reporter received subscription request ---------', event);
            event.accept();
          });
          setInterval(function () {
            _this3._sendHeartbeat();
          }, 50000);
        }).catch(function (reason) {
          reject(reason);
        });
      });
    }
  }, {
    key: 'createSyncher',
    value: function createSyncher(hyperties, status) {
      console.info('------------------------ Syncher Create ----------------------', hyperties, status);
      return this._syncher.create(this._objectDescURL, hyperties, status);
    }
  }, {
    key: 'join',
    value: function join(resource) {
      var _this4 = this;

      return new Promise(function (resolve, reject) {

        console.info('------------------------ Syncher subscribe ----------------------');

        _this4._syncher.subscribe(_this4._objectDescURL, resource).then(function (dataObjectObserver) {
          console.info('Data Object Observer: ', dataObjectObserver);
        }).catch(function (reason) {
          reject(reason);
        });
      });
    }
  }, {
    key: 'setStatus',
    value: function setStatus(newStatus) {
      console.log('change status to', newStatus);
      this._statusObjectReporter.data.status = newStatus;
    }

    /**
     * Update status object date
     */

  }, {
    key: '_sendHeartbeat',
    value: function _sendHeartbeat() {
      console.log('send heartbeat');
      this._statusObjectReporter.data.date = new Date().getTime();
    }

    /**
     * Monitor user activity within heartbeat timeout period
     */

  }, {
    key: '_managePresenceHeartbeat',
    value: function _managePresenceHeartbeat(identity) {
      var _this5 = this;

      console.log('renew heartbeat period for', identity);
      var email = identity.email;
      if (email in this._heartbeat) {
        clearTimeout(this._heartbeat[email]);
      }
      this._heartbeat[email] = setTimeout(function () {
        console.log(email, 'has disconnect');
        clearTimeout(_this5._heartbeat[email]);
        _this5.trigger('statusChange', {
          identity: identity,
          status: 'disconnected'
        });
      }, 60000);
    }
  }, {
    key: '_mappingUser',
    value: function _mappingUser(userList) {
      var _this6 = this;

      console.info('------------------------ _mappingUser ----------------------', userList);

      return new Promise(function (resolve, reject) {
        var hyperties = [];
        var count = 0;

        if (userList.length === 0) reject(hyperties);

        var resultUsers = function resultUsers() {
          if (count === userList.length) {
            console.info('Have ' + hyperties.length + 'users found;');
            resolve(hyperties);
          }
        };

        var activeUsers = function activeUsers(user) {
          count++;
          hyperties.push(user.hypertyURL);
          resultUsers();
        };

        var inactiveUsers = function inactiveUsers() {
          count++;
          resultUsers();
        };

        userList.forEach(function (user) {
          console.log(user);
          if (user.email.length) {
            console.info('------------------------ _mappingUser ----------------------', userList);
            return _this6._hypertyDiscovery.discoverHypertyPerUser(user.email, user.domain).then(activeUsers).catch(inactiveUsers);
          }
        });
      });
    }
  }]);

  return UserStatus;
}(_EventEmitter3.default);

function activate(hypertyURL, bus, configuration) {

  return {
    name: 'UserStatus',
    instance: new UserStatus(hypertyURL, bus, configuration)
  };
}

},{"./utils/EventEmitter.js":5,"./utils/IdentityManager.js":6,"./utils/utils.js":7,"service-framework/dist/HypertyDiscovery":2,"service-framework/dist/Syncher":3}],5:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/

/**
 * EventEmitter
 * All classes which extends this, can have addEventListener and trigger events;
 */

var EventEmitter = function () {
  function EventEmitter() {
    _classCallCheck(this, EventEmitter);
  }

  _createClass(EventEmitter, [{
    key: "addEventListener",


    /**
     * addEventListener listen for an eventType
     * @param  {string}         eventType - listening for this type of event
     * @param  {Function}       cb        - callback function will be executed when the event it is invoked
     */
    value: function addEventListener(eventType, cb) {
      var _this = this;
      _this[eventType] = cb;
    }

    /**
     * Invoke the eventType
     * @param  {string} eventType - event will be invoked
     * @param  {object} params - parameters will be passed to the addEventListener
     */

  }, {
    key: "trigger",
    value: function trigger(eventType, params) {
      var _this = this;

      if (_this[eventType]) {
        _this[eventType](params);
      }
    }
  }]);

  return EventEmitter;
}();

exports.default = EventEmitter;

},{}],6:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Copyright 2016 PT Inovação e Sistemas SA
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Copyright 2016 INESC-ID
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Copyright 2016 QUOBIS NETWORKS SL
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Copyright 2016 ORANGE SA
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Copyright 2016 Deutsche Telekom AG
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Copyright 2016 Apizee
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Licensed under the Apache License, Version 2.0 (the "License");
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * you may not use this file except in compliance with the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * You may obtain a copy of the License at
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *   http://www.apache.org/licenses/LICENSE-2.0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Unless required by applicable law or agreed to in writing, software
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * distributed under the License is distributed on an "AS IS" BASIS,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * See the License for the specific language governing permissions and
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * limitations under the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     **/


var _utils = require('./utils');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* Core IdentityManager interface
* Class to allow applications to search for Identities registered in runtime-core
*/

var IdentityManager = function () {

  /**
  * To initialise the IdentityManager, which will provide the support for hyperties to
  * query about identities registered
  * @param  {String}          hypertyURL            hypertyURL
  * @param  {String}          runtimeURL            runtimeURL
  * @param  {MessageBus}          msgbus                msgbus
  */

  function IdentityManager(hypertyURL, runtimeURL, msgBus) {
    _classCallCheck(this, IdentityManager);

    var _this = this;
    _this.messageBus = msgBus;

    _this.domain = (0, _utils.divideURL)(hypertyURL).domain;
    _this.hypertyURL = hypertyURL;
    _this.runtimeURL = runtimeURL;
  }

  /**
  * Function to query the runtime registry about the identity to which the hyperty was associated
  * @param {String}       hypertyURL   (Optional)
  * @return {Promise}     userURL       userURL associated to the hyperty
  */


  _createClass(IdentityManager, [{
    key: 'discoverUserRegistered',
    value: function discoverUserRegistered(hypertyURL) {
      var _this = this;
      var activeDomain = void 0;
      var activeHypertyURL = void 0;

      if (!hypertyURL) {
        activeHypertyURL = _this.hypertyURL;
      } else {
        activeHypertyURL = hypertyURL;
      }

      var msg = {
        type: 'read', from: activeHypertyURL, to: _this.runtimeURL + '/registry/', body: { resource: '.', criteria: activeHypertyURL }
      };

      return new Promise(function (resolve, reject) {

        _this.messageBus.postMessage(msg, function (reply) {

          var userURL = reply.body.resource;
          if (userURL) {
            resolve(userURL);
          } else {
            reject('No user was not found');
          }
        });
      });
    }
  }]);

  return IdentityManager;
}();

exports.default = IdentityManager;

},{"./utils":7}],7:[function(require,module,exports){
(function (process){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.divideURL = divideURL;
exports.deepClone = deepClone;
exports.getConfig = getConfig;
exports.getUserMedia = getUserMedia;
exports.serialize = serialize;
exports.getTemplate = getTemplate;
/**
 * Copyright 2016 PT Inovação e Sistemas SA
 * Copyright 2016 INESC-ID
 * Copyright 2016 QUOBIS NETWORKS SL
 * Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
 * Copyright 2016 ORANGE SA
 * Copyright 2016 Deutsche Telekom AG
 * Copyright 2016 Apizee
 * Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 **/

// jshint browser:true, jquery: true
// jshint varstmt: true
/* global Handlebars */

/**
 * Support module with some functions will be useful
 * @module utils
 */

/**
 * @typedef divideURL
 * @type Object
 * @property {string} type The type of URL
 * @property {string} domain The domain of URL
 * @property {string} identity The identity of URL
 */

/**
 * Divide an url in type, domain and identity
 * @param  {URL.URL} url - url address
 * @return {divideURL} the result of divideURL
 */
function divideURL(url) {

  // let re = /([a-zA-Z-]*)?:\/\/(?:\.)?([-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b)*(\/[\/\d\w\.-]*)*(?:[\?])*(.+)*/gi;
  var re = /([a-zA-Z-]*):\/\/(?:\.)?([-a-zA-Z0-9@:%._\+~#=]{2,256})([-a-zA-Z0-9@:%._\+~#=\/]*)/gi;
  var subst = '$1,$2,$3';
  var parts = url.replace(re, subst).split(',');

  // If the url has no protocol, the default protocol set is https
  if (parts[0] === url) {
    parts[0] = 'https';
    parts[1] = url;
  }

  var result = {
    type: parts[0],
    domain: parts[1],
    identity: parts[2]
  };

  return result;
}

/**
 * Make a COPY of the original data
 * @param  {Object}  obj - object to be cloned
 * @return {Object}
 */
function deepClone(obj) {
  //TODO: simple but inefficient JSON deep clone...
  if (obj) return JSON.parse(JSON.stringify(obj));
}

/**
 * Get the configuration from an json file;
 * @param  {JSONObject} jsonFile
 * @return {object}
 */
function getConfig(JSONObject) {
  console.log(process.env.environment);
  return JSONObject[process.env.environment];
}

/**
 * Get WebRTC API resources
 * @param  {Object}     options Object containing the information that resources will be used (camera, mic, resolution, etc);
 * @return {Promise}
 */
function getUserMedia(constraints) {

  return new Promise(function (resolve, reject) {

    navigator.mediaDevices.getUserMedia(constraints).then(function (mediaStream) {
      resolve(mediaStream);
    }).catch(function (reason) {
      reject(reason);
    });
  });
}

function serialize() {

  $.fn.serializeObject = function () {
    var o = {};
    var a = this.serializeArray();
    $.each(a, function () {
      if (o[this.name] !== undefined) {
        if (!o[this.name].push) {
          o[this.name] = [o[this.name]];
        }

        o[this.name].push(this.value || '');
      } else {
        o[this.name] = this.value || '';
      }
    });

    return o;
  };

  $.fn.serializeObjectArray = function () {
    var o = {};
    var a = this.serializeArray();
    $.each(a, function () {
      if (o[this.name] !== undefined) {
        if (!o[this.name].push) {
          o[this.name] = [o[this.name]];
        }

        o[this.name].push(this.value || '');
      } else {
        if (!o[this.name]) o[this.name] = [];
        o[this.name].push(this.value || '');
      }
    });

    return o;
  };
}

function getTemplate(path, script) {

  return new Promise(function (resolve, reject) {

    if (Handlebars.templates === undefined || Handlebars.templates[name] === undefined) {
      Handlebars.templates = {};
    } else {
      resolve(Handlebars.templates[name]);
    }

    var templateFile = $.ajax({
      url: path + '.hbs',
      success: function success(data) {
        Handlebars.templates[name] = Handlebars.compile(data);
      },

      fail: function fail(reason) {
        return reason;
      }
    });

    var scriptFile = $.getScript(script);

    var requests = [];
    if (path) requests.push(templateFile);
    if (script) requests.push(scriptFile);

    Promise.all(requests).then(function (result) {
      resolve(Handlebars.templates[name]);
    }).catch(function (reason) {
      reject(reason);
    });
  });
}

}).call(this,require('_process'))
},{"_process":1}]},{},[4])(4)
});",
      "sourceCodeClassname": "UserStatusHyperty",
      "encoding": "base64",
      "signature": ""
    },
    "cguid": 1,
    "type": "Hyperties",
    "version": "0.1",
    "description": "Description of UserStatusHyperty",
    "objectName": "UserStatusHyperty",
    "configuration": {},
    "sourcePackageURL": "/sourcePackage",
    "language": "javascript",
    "signature": "",
    "messageSchemas": "",
    "dataObjects": [],
    "accessControlPolicy": "somePolicy"
},
"HypertyConnector": {
    "sourcePackage": {
      "sourceCode": "(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.activate = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (global){
/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/

// Distribution file for HypertyDiscovery.js 
// version: 0.2.0

!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var t;t="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this,t.HypertyDiscovery=e()}}(function(){return function e(t,r,n){function o(c,s){if(!r[c]){if(!t[c]){var u="function"==typeof require&&require;if(!s&&u)return u(c,!0);if(i)return i(c,!0);var a=new Error("Cannot find module '"+c+"'");throw a.code="MODULE_NOT_FOUND",a}var f=r[c]={exports:{}};t[c][0].call(f.exports,function(e){var r=t[c][1][e];return o(r?r:e)},f,f.exports,e,t,r,n)}return r[c].exports}for(var i="function"==typeof require&&require,c=0;c<n.length;c++)o(n[c]);return o}({1:[function(e,t,r){t.exports={"default":e("core-js/library/fn/json/stringify"),__esModule:!0}},{"core-js/library/fn/json/stringify":6}],2:[function(e,t,r){t.exports={"default":e("core-js/library/fn/object/define-property"),__esModule:!0}},{"core-js/library/fn/object/define-property":7}],3:[function(e,t,r){t.exports={"default":e("core-js/library/fn/promise"),__esModule:!0}},{"core-js/library/fn/promise":8}],4:[function(e,t,r){"use strict";r.__esModule=!0,r["default"]=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}},{}],5:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}r.__esModule=!0;var o=e("babel-runtime/core-js/object/define-property"),i=n(o);r["default"]=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),(0,i["default"])(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}()},{"babel-runtime/core-js/object/define-property":2}],6:[function(e,t,r){var n=e("../../modules/_core"),o=n.JSON||(n.JSON={stringify:JSON.stringify});t.exports=function(e){return o.stringify.apply(o,arguments)}},{"../../modules/_core":16}],7:[function(e,t,r){e("../../modules/es6.object.define-property");var n=e("../../modules/_core").Object;t.exports=function(e,t,r){return n.defineProperty(e,t,r)}},{"../../modules/_core":16,"../../modules/es6.object.define-property":71}],8:[function(e,t,r){e("../modules/es6.object.to-string"),e("../modules/es6.string.iterator"),e("../modules/web.dom.iterable"),e("../modules/es6.promise"),t.exports=e("../modules/_core").Promise},{"../modules/_core":16,"../modules/es6.object.to-string":72,"../modules/es6.promise":73,"../modules/es6.string.iterator":74,"../modules/web.dom.iterable":75}],9:[function(e,t,r){t.exports=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e}},{}],10:[function(e,t,r){t.exports=function(){}},{}],11:[function(e,t,r){t.exports=function(e,t,r,n){if(!(e instanceof t)||void 0!==n&&n in e)throw TypeError(r+": incorrect invocation!");return e}},{}],12:[function(e,t,r){var n=e("./_is-object");t.exports=function(e){if(!n(e))throw TypeError(e+" is not an object!");return e}},{"./_is-object":33}],13:[function(e,t,r){var n=e("./_to-iobject"),o=e("./_to-length"),i=e("./_to-index");t.exports=function(e){return function(t,r,c){var s,u=n(t),a=o(u.length),f=i(c,a);if(e&&r!=r){for(;a>f;)if(s=u[f++],s!=s)return!0}else for(;a>f;f++)if((e||f in u)&&u[f]===r)return e||f||0;return!e&&-1}}},{"./_to-index":61,"./_to-iobject":63,"./_to-length":64}],14:[function(e,t,r){var n=e("./_cof"),o=e("./_wks")("toStringTag"),i="Arguments"==n(function(){return arguments}()),c=function(e,t){try{return e[t]}catch(r){}};t.exports=function(e){var t,r,s;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(r=c(t=Object(e),o))?r:i?n(t):"Object"==(s=n(t))&&"function"==typeof t.callee?"Arguments":s}},{"./_cof":15,"./_wks":68}],15:[function(e,t,r){var n={}.toString;t.exports=function(e){return n.call(e).slice(8,-1)}},{}],16:[function(e,t,r){var n=t.exports={version:"2.4.0"};"number"==typeof __e&&(__e=n)},{}],17:[function(e,t,r){var n=e("./_a-function");t.exports=function(e,t,r){if(n(e),void 0===t)return e;switch(r){case 1:return function(r){return e.call(t,r)};case 2:return function(r,n){return e.call(t,r,n)};case 3:return function(r,n,o){return e.call(t,r,n,o)}}return function(){return e.apply(t,arguments)}}},{"./_a-function":9}],18:[function(e,t,r){t.exports=function(e){if(void 0==e)throw TypeError("Can't call method on  "+e);return e}},{}],19:[function(e,t,r){t.exports=!e("./_fails")(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},{"./_fails":23}],20:[function(e,t,r){var n=e("./_is-object"),o=e("./_global").document,i=n(o)&&n(o.createElement);t.exports=function(e){return i?o.createElement(e):{}}},{"./_global":25,"./_is-object":33}],21:[function(e,t,r){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},{}],22:[function(e,t,r){var n=e("./_global"),o=e("./_core"),i=e("./_ctx"),c=e("./_hide"),s="prototype",u=function(e,t,r){var a,f,_,l=e&u.F,d=e&u.G,p=e&u.S,v=e&u.P,y=e&u.B,h=e&u.W,b=d?o:o[t]||(o[t]={}),m=b[s],g=d?n:p?n[t]:(n[t]||{})[s];d&&(r=t);for(a in r)f=!l&&g&&void 0!==g[a],f&&a in b||(_=f?g[a]:r[a],b[a]=d&&"function"!=typeof g[a]?r[a]:y&&f?i(_,n):h&&g[a]==_?function(e){var t=function(t,r,n){if(this instanceof e){switch(arguments.length){case 0:return new e;case 1:return new e(t);case 2:return new e(t,r)}return new e(t,r,n)}return e.apply(this,arguments)};return t[s]=e[s],t}(_):v&&"function"==typeof _?i(Function.call,_):_,v&&((b.virtual||(b.virtual={}))[a]=_,e&u.R&&m&&!m[a]&&c(m,a,_)))};u.F=1,u.G=2,u.S=4,u.P=8,u.B=16,u.W=32,u.U=64,u.R=128,t.exports=u},{"./_core":16,"./_ctx":17,"./_global":25,"./_hide":27}],23:[function(e,t,r){t.exports=function(e){try{return!!e()}catch(t){return!0}}},{}],24:[function(e,t,r){var n=e("./_ctx"),o=e("./_iter-call"),i=e("./_is-array-iter"),c=e("./_an-object"),s=e("./_to-length"),u=e("./core.get-iterator-method"),a={},f={},r=t.exports=function(e,t,r,_,l){var d,p,v,y,h=l?function(){return e}:u(e),b=n(r,_,t?2:1),m=0;if("function"!=typeof h)throw TypeError(e+" is not iterable!");if(i(h)){for(d=s(e.length);d>m;m++)if(y=t?b(c(p=e[m])[0],p[1]):b(e[m]),y===a||y===f)return y}else for(v=h.call(e);!(p=v.next()).done;)if(y=o(v,b,p.value,t),y===a||y===f)return y};r.BREAK=a,r.RETURN=f},{"./_an-object":12,"./_ctx":17,"./_is-array-iter":32,"./_iter-call":34,"./_to-length":64,"./core.get-iterator-method":69}],25:[function(e,t,r){var n=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},{}],26:[function(e,t,r){var n={}.hasOwnProperty;t.exports=function(e,t){return n.call(e,t)}},{}],27:[function(e,t,r){var n=e("./_object-dp"),o=e("./_property-desc");t.exports=e("./_descriptors")?function(e,t,r){return n.f(e,t,o(1,r))}:function(e,t,r){return e[t]=r,e}},{"./_descriptors":19,"./_object-dp":43,"./_property-desc":50}],28:[function(e,t,r){t.exports=e("./_global").document&&document.documentElement},{"./_global":25}],29:[function(e,t,r){t.exports=!e("./_descriptors")&&!e("./_fails")(function(){return 7!=Object.defineProperty(e("./_dom-create")("div"),"a",{get:function(){return 7}}).a})},{"./_descriptors":19,"./_dom-create":20,"./_fails":23}],30:[function(e,t,r){t.exports=function(e,t,r){var n=void 0===r;switch(t.length){case 0:return n?e():e.call(r);case 1:return n?e(t[0]):e.call(r,t[0]);case 2:return n?e(t[0],t[1]):e.call(r,t[0],t[1]);case 3:return n?e(t[0],t[1],t[2]):e.call(r,t[0],t[1],t[2]);case 4:return n?e(t[0],t[1],t[2],t[3]):e.call(r,t[0],t[1],t[2],t[3])}return e.apply(r,t)}},{}],31:[function(e,t,r){var n=e("./_cof");t.exports=Object("z").propertyIsEnumerable(0)?Object:function(e){return"String"==n(e)?e.split(""):Object(e)}},{"./_cof":15}],32:[function(e,t,r){var n=e("./_iterators"),o=e("./_wks")("iterator"),i=Array.prototype;t.exports=function(e){return void 0!==e&&(n.Array===e||i[o]===e)}},{"./_iterators":39,"./_wks":68}],33:[function(e,t,r){t.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},{}],34:[function(e,t,r){var n=e("./_an-object");t.exports=function(e,t,r,o){try{return o?t(n(r)[0],r[1]):t(r)}catch(i){var c=e["return"];throw void 0!==c&&n(c.call(e)),i}}},{"./_an-object":12}],35:[function(e,t,r){"use strict";var n=e("./_object-create"),o=e("./_property-desc"),i=e("./_set-to-string-tag"),c={};e("./_hide")(c,e("./_wks")("iterator"),function(){return this}),t.exports=function(e,t,r){e.prototype=n(c,{next:o(1,r)}),i(e,t+" Iterator")}},{"./_hide":27,"./_object-create":42,"./_property-desc":50,"./_set-to-string-tag":55,"./_wks":68}],36:[function(e,t,r){"use strict";var n=e("./_library"),o=e("./_export"),i=e("./_redefine"),c=e("./_hide"),s=e("./_has"),u=e("./_iterators"),a=e("./_iter-create"),f=e("./_set-to-string-tag"),_=e("./_object-gpo"),l=e("./_wks")("iterator"),d=!([].keys&&"next"in[].keys()),p="@@iterator",v="keys",y="values",h=function(){return this};t.exports=function(e,t,r,b,m,g,j){a(r,t,b);var x,w,k,O=function(e){if(!d&&e in E)return E[e];switch(e){case v:return function(){return new r(this,e)};case y:return function(){return new r(this,e)}}return function(){return new r(this,e)}},M=t+" Iterator",P=m==y,S=!1,E=e.prototype,T=E[l]||E[p]||m&&E[m],A=T||O(m),U=m?P?O("entries"):A:void 0,C="Array"==t?E.entries||T:T;if(C&&(k=_(C.call(new e)),k!==Object.prototype&&(f(k,M,!0),n||s(k,l)||c(k,l,h))),P&&T&&T.name!==y&&(S=!0,A=function(){return T.call(this)}),n&&!j||!d&&!S&&E[l]||c(E,l,A),u[t]=A,u[M]=h,m)if(x={values:P?A:O(y),keys:g?A:O(v),entries:U},j)for(w in x)w in E||i(E,w,x[w]);else o(o.P+o.F*(d||S),t,x);return x}},{"./_export":22,"./_has":26,"./_hide":27,"./_iter-create":35,"./_iterators":39,"./_library":40,"./_object-gpo":46,"./_redefine":52,"./_set-to-string-tag":55,"./_wks":68}],37:[function(e,t,r){var n=e("./_wks")("iterator"),o=!1;try{var i=[7][n]();i["return"]=function(){o=!0},Array.from(i,function(){throw 2})}catch(c){}t.exports=function(e,t){if(!t&&!o)return!1;var r=!1;try{var i=[7],c=i[n]();c.next=function(){return{done:r=!0}},i[n]=function(){return c},e(i)}catch(s){}return r}},{"./_wks":68}],38:[function(e,t,r){t.exports=function(e,t){return{value:t,done:!!e}}},{}],39:[function(e,t,r){t.exports={}},{}],40:[function(e,t,r){t.exports=!0},{}],41:[function(e,t,r){var n=e("./_global"),o=e("./_task").set,i=n.MutationObserver||n.WebKitMutationObserver,c=n.process,s=n.Promise,u="process"==e("./_cof")(c);t.exports=function(){var e,t,r,a=function(){var n,o;for(u&&(n=c.domain)&&n.exit();e;){o=e.fn,e=e.next;try{o()}catch(i){throw e?r():t=void 0,i}}t=void 0,n&&n.enter()};if(u)r=function(){c.nextTick(a)};else if(i){var f=!0,_=document.createTextNode("");new i(a).observe(_,{characterData:!0}),r=function(){_.data=f=!f}}else if(s&&s.resolve){var l=s.resolve();r=function(){l.then(a)}}else r=function(){o.call(n,a)};return function(n){var o={fn:n,next:void 0};t&&(t.next=o),e||(e=o,r()),t=o}}},{"./_cof":15,"./_global":25,"./_task":60}],42:[function(e,t,r){var n=e("./_an-object"),o=e("./_object-dps"),i=e("./_enum-bug-keys"),c=e("./_shared-key")("IE_PROTO"),s=function(){},u="prototype",a=function(){var t,r=e("./_dom-create")("iframe"),n=i.length,o=">";for(r.style.display="none",e("./_html").appendChild(r),r.src="javascript:",t=r.contentWindow.document,t.open(),t.write("<script>document.F=Object</script"+o),t.close(),a=t.F;n--;)delete a[u][i[n]];return a()};t.exports=Object.create||function(e,t){var r;return null!==e?(s[u]=n(e),r=new s,s[u]=null,r[c]=e):r=a(),void 0===t?r:o(r,t)}},{"./_an-object":12,"./_dom-create":20,"./_enum-bug-keys":21,"./_html":28,"./_object-dps":44,"./_shared-key":56}],43:[function(e,t,r){var n=e("./_an-object"),o=e("./_ie8-dom-define"),i=e("./_to-primitive"),c=Object.defineProperty;r.f=e("./_descriptors")?Object.defineProperty:function(e,t,r){if(n(e),t=i(t,!0),n(r),o)try{return c(e,t,r)}catch(s){}if("get"in r||"set"in r)throw TypeError("Accessors not supported!");return"value"in r&&(e[t]=r.value),e}},{"./_an-object":12,"./_descriptors":19,"./_ie8-dom-define":29,"./_to-primitive":66}],44:[function(e,t,r){var n=e("./_object-dp"),o=e("./_an-object"),i=e("./_object-keys");t.exports=e("./_descriptors")?Object.defineProperties:function(e,t){o(e);for(var r,c=i(t),s=c.length,u=0;s>u;)n.f(e,r=c[u++],t[r]);return e}},{"./_an-object":12,"./_descriptors":19,"./_object-dp":43,"./_object-keys":48}],45:[function(e,t,r){var n=e("./_object-pie"),o=e("./_property-desc"),i=e("./_to-iobject"),c=e("./_to-primitive"),s=e("./_has"),u=e("./_ie8-dom-define"),a=Object.getOwnPropertyDescriptor;r.f=e("./_descriptors")?a:function(e,t){if(e=i(e),t=c(t,!0),u)try{return a(e,t)}catch(r){}return s(e,t)?o(!n.f.call(e,t),e[t]):void 0}},{"./_descriptors":19,"./_has":26,"./_ie8-dom-define":29,"./_object-pie":49,"./_property-desc":50,"./_to-iobject":63,"./_to-primitive":66}],46:[function(e,t,r){var n=e("./_has"),o=e("./_to-object"),i=e("./_shared-key")("IE_PROTO"),c=Object.prototype;t.exports=Object.getPrototypeOf||function(e){return e=o(e),n(e,i)?e[i]:"function"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?c:null}},{"./_has":26,"./_shared-key":56,"./_to-object":65}],47:[function(e,t,r){var n=e("./_has"),o=e("./_to-iobject"),i=e("./_array-includes")(!1),c=e("./_shared-key")("IE_PROTO");t.exports=function(e,t){var r,s=o(e),u=0,a=[];for(r in s)r!=c&&n(s,r)&&a.push(r);for(;t.length>u;)n(s,r=t[u++])&&(~i(a,r)||a.push(r));return a}},{"./_array-includes":13,"./_has":26,"./_shared-key":56,"./_to-iobject":63}],48:[function(e,t,r){var n=e("./_object-keys-internal"),o=e("./_enum-bug-keys");t.exports=Object.keys||function(e){return n(e,o)}},{"./_enum-bug-keys":21,"./_object-keys-internal":47}],49:[function(e,t,r){r.f={}.propertyIsEnumerable},{}],50:[function(e,t,r){t.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},{}],51:[function(e,t,r){var n=e("./_hide");t.exports=function(e,t,r){for(var o in t)r&&e[o]?e[o]=t[o]:n(e,o,t[o]);return e}},{"./_hide":27}],52:[function(e,t,r){t.exports=e("./_hide")},{"./_hide":27}],53:[function(e,t,r){var n=e("./_is-object"),o=e("./_an-object"),i=function(e,t){if(o(e),!n(t)&&null!==t)throw TypeError(t+": can't set as prototype!")};t.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(t,r,n){try{n=e("./_ctx")(Function.call,e("./_object-gopd").f(Object.prototype,"__proto__").set,2),n(t,[]),r=!(t instanceof Array)}catch(o){r=!0}return function(e,t){return i(e,t),r?e.__proto__=t:n(e,t),e}}({},!1):void 0),check:i}},{"./_an-object":12,"./_ctx":17,"./_is-object":33,"./_object-gopd":45}],54:[function(e,t,r){"use strict";var n=e("./_global"),o=e("./_core"),i=e("./_object-dp"),c=e("./_descriptors"),s=e("./_wks")("species");t.exports=function(e){var t="function"==typeof o[e]?o[e]:n[e];c&&t&&!t[s]&&i.f(t,s,{configurable:!0,get:function(){return this}})}},{"./_core":16,"./_descriptors":19,"./_global":25,"./_object-dp":43,"./_wks":68}],55:[function(e,t,r){var n=e("./_object-dp").f,o=e("./_has"),i=e("./_wks")("toStringTag");t.exports=function(e,t,r){e&&!o(e=r?e:e.prototype,i)&&n(e,i,{configurable:!0,value:t})}},{"./_has":26,"./_object-dp":43,"./_wks":68}],56:[function(e,t,r){var n=e("./_shared")("keys"),o=e("./_uid");t.exports=function(e){return n[e]||(n[e]=o(e))}},{"./_shared":57,"./_uid":67}],57:[function(e,t,r){var n=e("./_global"),o="__core-js_shared__",i=n[o]||(n[o]={});t.exports=function(e){return i[e]||(i[e]={})}},{"./_global":25}],58:[function(e,t,r){var n=e("./_an-object"),o=e("./_a-function"),i=e("./_wks")("species");t.exports=function(e,t){var r,c=n(e).constructor;return void 0===c||void 0==(r=n(c)[i])?t:o(r)}},{"./_a-function":9,"./_an-object":12,"./_wks":68}],59:[function(e,t,r){var n=e("./_to-integer"),o=e("./_defined");t.exports=function(e){return function(t,r){var i,c,s=String(o(t)),u=n(r),a=s.length;return 0>u||u>=a?e?"":void 0:(i=s.charCodeAt(u),55296>i||i>56319||u+1===a||(c=s.charCodeAt(u+1))<56320||c>57343?e?s.charAt(u):i:e?s.slice(u,u+2):(i-55296<<10)+(c-56320)+65536)}}},{"./_defined":18,"./_to-integer":62}],60:[function(e,t,r){var n,o,i,c=e("./_ctx"),s=e("./_invoke"),u=e("./_html"),a=e("./_dom-create"),f=e("./_global"),_=f.process,l=f.setImmediate,d=f.clearImmediate,p=f.MessageChannel,v=0,y={},h="onreadystatechange",b=function(){var e=+this;if(y.hasOwnProperty(e)){var t=y[e];delete y[e],t()}},m=function(e){b.call(e.data)};l&&d||(l=function(e){for(var t=[],r=1;arguments.length>r;)t.push(arguments[r++]);return y[++v]=function(){s("function"==typeof e?e:Function(e),t)},n(v),v},d=function(e){delete y[e]},"process"==e("./_cof")(_)?n=function(e){_.nextTick(c(b,e,1))}:p?(o=new p,i=o.port2,o.port1.onmessage=m,n=c(i.postMessage,i,1)):f.addEventListener&&"function"==typeof postMessage&&!f.importScripts?(n=function(e){f.postMessage(e+"","*")},f.addEventListener("message",m,!1)):n=h in a("script")?function(e){u.appendChild(a("script"))[h]=function(){u.removeChild(this),b.call(e)}}:function(e){setTimeout(c(b,e,1),0)}),t.exports={set:l,clear:d}},{"./_cof":15,"./_ctx":17,"./_dom-create":20,"./_global":25,"./_html":28,"./_invoke":30}],61:[function(e,t,r){var n=e("./_to-integer"),o=Math.max,i=Math.min;t.exports=function(e,t){return e=n(e),0>e?o(e+t,0):i(e,t)}},{"./_to-integer":62}],62:[function(e,t,r){var n=Math.ceil,o=Math.floor;t.exports=function(e){return isNaN(e=+e)?0:(e>0?o:n)(e)}},{}],63:[function(e,t,r){var n=e("./_iobject"),o=e("./_defined");t.exports=function(e){return n(o(e))}},{"./_defined":18,"./_iobject":31}],64:[function(e,t,r){var n=e("./_to-integer"),o=Math.min;t.exports=function(e){return e>0?o(n(e),9007199254740991):0}},{"./_to-integer":62}],65:[function(e,t,r){var n=e("./_defined");t.exports=function(e){return Object(n(e))}},{"./_defined":18}],66:[function(e,t,r){var n=e("./_is-object");t.exports=function(e,t){if(!n(e))return e;var r,o;if(t&&"function"==typeof(r=e.toString)&&!n(o=r.call(e)))return o;if("function"==typeof(r=e.valueOf)&&!n(o=r.call(e)))return o;if(!t&&"function"==typeof(r=e.toString)&&!n(o=r.call(e)))return o;throw TypeError("Can't convert object to primitive value")}},{"./_is-object":33}],67:[function(e,t,r){var n=0,o=Math.random();t.exports=function(e){return"Symbol(".concat(void 0===e?"":e,")_",(++n+o).toString(36))}},{}],68:[function(e,t,r){var n=e("./_shared")("wks"),o=e("./_uid"),i=e("./_global").Symbol,c="function"==typeof i,s=t.exports=function(e){return n[e]||(n[e]=c&&i[e]||(c?i:o)("Symbol."+e))};s.store=n},{"./_global":25,"./_shared":57,"./_uid":67}],69:[function(e,t,r){var n=e("./_classof"),o=e("./_wks")("iterator"),i=e("./_iterators");t.exports=e("./_core").getIteratorMethod=function(e){return void 0!=e?e[o]||e["@@iterator"]||i[n(e)]:void 0}},{"./_classof":14,"./_core":16,"./_iterators":39,"./_wks":68}],70:[function(e,t,r){"use strict";var n=e("./_add-to-unscopables"),o=e("./_iter-step"),i=e("./_iterators"),c=e("./_to-iobject");t.exports=e("./_iter-define")(Array,"Array",function(e,t){this._t=c(e),this._i=0,this._k=t},function(){var e=this._t,t=this._k,r=this._i++;return!e||r>=e.length?(this._t=void 0,o(1)):"keys"==t?o(0,r):"values"==t?o(0,e[r]):o(0,[r,e[r]])},"values"),i.Arguments=i.Array,n("keys"),n("values"),n("entries")},{"./_add-to-unscopables":10,"./_iter-define":36,"./_iter-step":38,"./_iterators":39,"./_to-iobject":63}],71:[function(e,t,r){var n=e("./_export");n(n.S+n.F*!e("./_descriptors"),"Object",{defineProperty:e("./_object-dp").f})},{"./_descriptors":19,"./_export":22,"./_object-dp":43}],72:[function(e,t,r){},{}],73:[function(e,t,r){"use strict";var n,o,i,c=e("./_library"),s=e("./_global"),u=e("./_ctx"),a=e("./_classof"),f=e("./_export"),_=e("./_is-object"),l=(e("./_an-object"),e("./_a-function")),d=e("./_an-instance"),p=e("./_for-of"),v=(e("./_set-proto").set,e("./_species-constructor")),y=e("./_task").set,h=e("./_microtask")(),b="Promise",m=s.TypeError,g=s.process,j=s[b],g=s.process,x="process"==a(g),w=function(){},k=!!function(){try{var t=j.resolve(1),r=(t.constructor={})[e("./_wks")("species")]=function(e){e(w,w)};return(x||"function"==typeof PromiseRejectionEvent)&&t.then(w)instanceof r}catch(n){}}(),O=function(e,t){return e===t||e===j&&t===i},M=function(e){var t;return _(e)&&"function"==typeof(t=e.then)?t:!1},P=function(e){return O(j,e)?new S(e):new o(e)},S=o=function(e){var t,r;this.promise=new e(function(e,n){if(void 0!==t||void 0!==r)throw m("Bad Promise constructor");t=e,r=n}),this.resolve=l(t),this.reject=l(r)},E=function(e){try{e()}catch(t){return{error:t}}},T=function(e,t){if(!e._n){e._n=!0;var r=e._c;h(function(){for(var n=e._v,o=1==e._s,i=0,c=function(t){var r,i,c=o?t.ok:t.fail,s=t.resolve,u=t.reject,a=t.domain;try{c?(o||(2==e._h&&C(e),e._h=1),c===!0?r=n:(a&&a.enter(),r=c(n),a&&a.exit()),r===t.promise?u(m("Promise-chain cycle")):(i=M(r))?i.call(r,s,u):s(r)):u(n)}catch(f){u(f)}};r.length>i;)c(r[i++]);e._c=[],e._n=!1,t&&!e._h&&A(e)})}},A=function(e){y.call(s,function(){var t,r,n,o=e._v;if(U(e)&&(t=E(function(){x?g.emit("unhandledRejection",o,e):(r=s.onunhandledrejection)?r({promise:e,reason:o}):(n=s.console)&&n.error&&n.error("Unhandled promise rejection",o)}),e._h=x||U(e)?2:1),e._a=void 0,t)throw t.error})},U=function(e){if(1==e._h)return!1;for(var t,r=e._a||e._c,n=0;r.length>n;)if(t=r[n++],t.fail||!U(t.promise))return!1;return!0},C=function(e){y.call(s,function(){var t;x?g.emit("rejectionHandled",e):(t=s.onrejectionhandled)&&t({promise:e,reason:e._v})})},R=function(e){var t=this;t._d||(t._d=!0,t=t._w||t,t._v=e,t._s=2,t._a||(t._a=t._c.slice()),T(t,!0))},L=function(e){var t,r=this;if(!r._d){r._d=!0,r=r._w||r;try{if(r===e)throw m("Promise can't be resolved itself");(t=M(e))?h(function(){var n={_w:r,_d:!1};try{t.call(e,u(L,n,1),u(R,n,1))}catch(o){R.call(n,o)}}):(r._v=e,r._s=1,T(r,!1))}catch(n){R.call({_w:r,_d:!1},n)}}};k||(j=function(e){d(this,j,b,"_h"),l(e),n.call(this);try{e(u(L,this,1),u(R,this,1))}catch(t){R.call(this,t)}},n=function(e){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1},n.prototype=e("./_redefine-all")(j.prototype,{then:function(e,t){var r=P(v(this,j));return r.ok="function"==typeof e?e:!0,r.fail="function"==typeof t&&t,r.domain=x?g.domain:void 0,this._c.push(r),this._a&&this._a.push(r),this._s&&T(this,!1),r.promise},"catch":function(e){return this.then(void 0,e)}}),S=function(){var e=new n;this.promise=e,this.resolve=u(L,e,1),this.reject=u(R,e,1)}),f(f.G+f.W+f.F*!k,{Promise:j}),e("./_set-to-string-tag")(j,b),e("./_set-species")(b),i=e("./_core")[b],f(f.S+f.F*!k,b,{reject:function(e){var t=P(this),r=t.reject;return r(e),t.promise}}),f(f.S+f.F*(c||!k),b,{resolve:function(e){if(e instanceof j&&O(e.constructor,this))return e;var t=P(this),r=t.resolve;return r(e),t.promise}}),f(f.S+f.F*!(k&&e("./_iter-detect")(function(e){j.all(e)["catch"](w)})),b,{all:function(e){var t=this,r=P(t),n=r.resolve,o=r.reject,i=E(function(){var r=[],i=0,c=1;p(e,!1,function(e){var s=i++,u=!1;r.push(void 0),c++,t.resolve(e).then(function(e){u||(u=!0,r[s]=e,--c||n(r))},o)}),--c||n(r)});return i&&o(i.error),r.promise},race:function(e){var t=this,r=P(t),n=r.reject,o=E(function(){p(e,!1,function(e){t.resolve(e).then(r.resolve,n)})});return o&&n(o.error),r.promise}})},{"./_a-function":9,"./_an-instance":11,"./_an-object":12,"./_classof":14,"./_core":16,"./_ctx":17,"./_export":22,"./_for-of":24,"./_global":25,"./_is-object":33,"./_iter-detect":37,"./_library":40,"./_microtask":41,"./_redefine-all":51,"./_set-proto":53,"./_set-species":54,"./_set-to-string-tag":55,"./_species-constructor":58,"./_task":60,"./_wks":68}],74:[function(e,t,r){"use strict";var n=e("./_string-at")(!0);e("./_iter-define")(String,"String",function(e){this._t=String(e),this._i=0},function(){var e,t=this._t,r=this._i;return r>=t.length?{value:void 0,done:!0}:(e=n(t,r),this._i+=e.length,{value:e,done:!1})})},{"./_iter-define":36,"./_string-at":59}],75:[function(e,t,r){e("./es6.array.iterator");for(var n=e("./_global"),o=e("./_hide"),i=e("./_iterators"),c=e("./_wks")("toStringTag"),s=["NodeList","DOMTokenList","MediaList","StyleSheetList","CSSRuleList"],u=0;5>u;u++){var a=s[u],f=n[a],_=f&&f.prototype;_&&!_[c]&&o(_,c,a),i[a]=i.Array}},{"./_global":25,"./_hide":27,"./_iterators":39,"./_wks":68,"./es6.array.iterator":70}],76:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(r,"__esModule",{value:!0});var o=e("./hyperty-discovery/HypertyDiscovery"),i=n(o);r["default"]=i["default"],t.exports=r["default"]},{"./hyperty-discovery/HypertyDiscovery":77}],77:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(r,"__esModule",{value:!0});var o=e("babel-runtime/core-js/promise"),i=n(o),c=e("babel-runtime/helpers/classCallCheck"),s=n(c),u=e("babel-runtime/helpers/createClass"),a=n(u),f=e("../utils/utils"),_=function(){function e(t,r){(0,s["default"])(this,e);var n=this;n.messageBus=r,n.domain=(0,f.divideURL)(t).domain,n.discoveryURL=t}return(0,a["default"])(e,[{key:"discoverDataObjectPerName",value:function(e,t){var r=this,n=void 0;n=t?t:r.domain;var o={type:"read",from:r.discoveryURL,to:"domain://registry."+n+"/",body:{resource:"dataObject://"+e}};return new i["default"](function(e,t){r.messageBus.postMessage(o,function(r){var n=r.body.value.url;n?e(n):t("DataObject name does not exist")})})}},{key:"discoverHypertyPerUser",value:function(e,t){var r=this,n=void 0;n=t?t:r.domain;var o="user://"+e.substring(e.indexOf("@")+1,e.length)+"/"+e.substring(0,e.indexOf("@")),c={type:"read",from:r.discoveryURL,to:"domain://registry."+n+"/",body:{resource:o}};return console.log("Message: ",c,n,o),new i["default"](function(t,n){r.messageBus.postMessage(c,function(r){console.log("message reply",r);var o=void 0,i=void 0,c=void 0,s=r.body.value;for(o in s)if(void 0!==s[o].lastModified)if(void 0===i)i=new Date(s[o].lastModified),c=o;else{var u=new Date(s[o].lastModified);i.getTime()<u.getTime()&&(i=u,c=o)}console.log("Last Hyperty: ",c,i);var a=c;if(void 0===a)return n("User Hyperty not found");var f={id:e,descriptor:s[a].descriptor,hypertyURL:a};console.log("===> hypertyDiscovery messageBundle: ",f),t(f)})})}},{key:"discoverHypertiesPerUser",value:function(e,t){var r=this,n=void 0;n=t?t:r.domain;var o="user://"+e.substring(e.indexOf("@")+1,e.length)+"/"+e.substring(0,e.indexOf("@")),c={type:"read",from:r.discoveryURL,to:"domain://registry."+n+"/",body:{resource:o}};return console.log("Message discoverHypertiesPerUser: ",c,n,o),new i["default"](function(e,t){r.messageBus.postMessage(c,function(r){console.log("discoverHypertiesPerUser reply",r);var n=r.body.value;return n?void e(n):t("User Hyperty not found")})})}}]),e}();r["default"]=_,t.exports=r["default"]},{"../utils/utils":78,"babel-runtime/core-js/promise":3,"babel-runtime/helpers/classCallCheck":4,"babel-runtime/helpers/createClass":5}],78:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function o(e){var t=/([a-zA-Z-]*):\/\/(?:\.)?([-a-zA-Z0-9@:%._\+~#=]{2,256})([-a-zA-Z0-9@:%._\+~#=\/]*)/gi,r="$1,$2,$3",n=e.replace(t,r).split(",");n[0]===e&&(n[0]="https",n[1]=e);var o={type:n[0],domain:n[1],identity:n[2]};return o}function i(e){return e?JSON.parse((0,s["default"])(e)):void 0}Object.defineProperty(r,"__esModule",{value:!0});var c=e("babel-runtime/core-js/json/stringify"),s=n(c);r.divideURL=o,r.deepClone=i},{"babel-runtime/core-js/json/stringify":1}]},{},[76])(76)});
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],2:[function(require,module,exports){
(function (global){
/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/

// Distribution file for Syncher.js 
// version: 0.2.0

!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var t;t="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this,t.Syncher=e()}}(function(){return function e(t,r,n){function o(s,a){if(!r[s]){if(!t[s]){var c="function"==typeof require&&require;if(!a&&c)return c(s,!0);if(i)return i(s,!0);var u=new Error("Cannot find module '"+s+"'");throw u.code="MODULE_NOT_FOUND",u}var l=r[s]={exports:{}};t[s][0].call(l.exports,function(e){var r=t[s][1][e];return o(r?r:e)},l,l.exports,e,t,r,n)}return r[s].exports}for(var i="function"==typeof require&&require,s=0;s<n.length;s++)o(n[s]);return o}({1:[function(e,t,r){Object.observe&&!Array.observe&&function(e,t){"use strict";var r=e.getNotifier,n="performChange",o="_original",i="splice",s={push:function c(e){var t=arguments,s=c[o].apply(this,t);return r(this)[n](i,function(){return{index:s-t.length,addedCount:t.length,removed:[]}}),s},unshift:function u(e){var t=arguments,s=u[o].apply(this,t);return r(this)[n](i,function(){return{index:0,addedCount:t.length,removed:[]}}),s},pop:function l(){var e=this.length,t=l[o].call(this);return this.length!==e&&r(this)[n](i,function(){return{index:this.length,addedCount:0,removed:[t]}},this),t},shift:function f(){var e=this.length,t=f[o].call(this);return this.length!==e&&r(this)[n](i,function(){return{index:0,addedCount:0,removed:[t]}},this),t},splice:function d(e,t){var s=arguments,a=d[o].apply(this,s);return(a.length||s.length>2)&&r(this)[n](i,function(){return{index:e,addedCount:s.length-2,removed:a}},this),a}};for(var a in s)s[a][o]=t.prototype[a],t.prototype[a]=s[a];t.observe=function(t,r){return e.observe(t,r,["add","update","delete",i])},t.unobserve=e.unobserve}(Object,Array)},{}],2:[function(e,t,r){t.exports={"default":e("core-js/library/fn/json/stringify"),__esModule:!0}},{"core-js/library/fn/json/stringify":17}],3:[function(e,t,r){t.exports={"default":e("core-js/library/fn/object/create"),__esModule:!0}},{"core-js/library/fn/object/create":18}],4:[function(e,t,r){t.exports={"default":e("core-js/library/fn/object/define-property"),__esModule:!0}},{"core-js/library/fn/object/define-property":19}],5:[function(e,t,r){t.exports={"default":e("core-js/library/fn/object/get-own-property-descriptor"),__esModule:!0}},{"core-js/library/fn/object/get-own-property-descriptor":20}],6:[function(e,t,r){t.exports={"default":e("core-js/library/fn/object/get-prototype-of"),__esModule:!0}},{"core-js/library/fn/object/get-prototype-of":21}],7:[function(e,t,r){t.exports={"default":e("core-js/library/fn/object/keys"),__esModule:!0}},{"core-js/library/fn/object/keys":22}],8:[function(e,t,r){t.exports={"default":e("core-js/library/fn/object/set-prototype-of"),__esModule:!0}},{"core-js/library/fn/object/set-prototype-of":23}],9:[function(e,t,r){t.exports={"default":e("core-js/library/fn/promise"),__esModule:!0}},{"core-js/library/fn/promise":24}],10:[function(e,t,r){t.exports={"default":e("core-js/library/fn/symbol"),__esModule:!0}},{"core-js/library/fn/symbol":25}],11:[function(e,t,r){"use strict";r.__esModule=!0,r["default"]=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}},{}],12:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}r.__esModule=!0;var o=e("../core-js/object/define-property"),i=n(o);r["default"]=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),(0,i["default"])(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}()},{"../core-js/object/define-property":4}],13:[function(e,t,r){"use strict";var n=e("babel-runtime/core-js/object/get-own-property-descriptor")["default"];r["default"]=function(e,t,r){for(var o=!0;o;){var i=e,s=t,a=r;o=!1,null===i&&(i=Function.prototype);var c=n(i,s);if(void 0!==c){if("value"in c)return c.value;var u=c.get;if(void 0===u)return;return u.call(a)}var l=Object.getPrototypeOf(i);if(null===l)return;e=l,t=s,r=a,o=!0,c=l=void 0}},r.__esModule=!0},{"babel-runtime/core-js/object/get-own-property-descriptor":5}],14:[function(e,t,r){"use strict";var n=e("babel-runtime/core-js/object/create")["default"],o=e("babel-runtime/core-js/object/set-prototype-of")["default"];r["default"]=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=n(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(o?o(e,t):e.__proto__=t)},r.__esModule=!0},{"babel-runtime/core-js/object/create":3,"babel-runtime/core-js/object/set-prototype-of":8}],15:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}r.__esModule=!0;var o=e("../helpers/typeof"),i=n(o);r["default"]=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==("undefined"==typeof t?"undefined":(0,i["default"])(t))&&"function"!=typeof t?e:t}},{"../helpers/typeof":16}],16:[function(e,t,r){"use strict";var n=e("babel-runtime/core-js/symbol")["default"];r["default"]=function(e){return e&&e.constructor===n?"symbol":typeof e},r.__esModule=!0},{"babel-runtime/core-js/symbol":10}],17:[function(e,t,r){var n=e("../../modules/$.core");t.exports=function(e){return(n.JSON&&n.JSON.stringify||JSON.stringify).apply(JSON,arguments)}},{"../../modules/$.core":31}],18:[function(e,t,r){var n=e("../../modules/$");t.exports=function(e,t){return n.create(e,t)}},{"../../modules/$":56}],19:[function(e,t,r){var n=e("../../modules/$");t.exports=function(e,t,r){return n.setDesc(e,t,r)}},{"../../modules/$":56}],20:[function(e,t,r){var n=e("../../modules/$");e("../../modules/es6.object.get-own-property-descriptor"),t.exports=function(e,t){return n.getDesc(e,t)}},{"../../modules/$":56,"../../modules/es6.object.get-own-property-descriptor":81}],21:[function(e,t,r){e("../../modules/es6.object.get-prototype-of"),t.exports=e("../../modules/$.core").Object.getPrototypeOf},{"../../modules/$.core":31,"../../modules/es6.object.get-prototype-of":82}],22:[function(e,t,r){e("../../modules/es6.object.keys"),t.exports=e("../../modules/$.core").Object.keys},{"../../modules/$.core":31,"../../modules/es6.object.keys":83}],23:[function(e,t,r){e("../../modules/es6.object.set-prototype-of"),t.exports=e("../../modules/$.core").Object.setPrototypeOf},{"../../modules/$.core":31,"../../modules/es6.object.set-prototype-of":84}],24:[function(e,t,r){e("../modules/es6.object.to-string"),e("../modules/es6.string.iterator"),e("../modules/web.dom.iterable"),e("../modules/es6.promise"),t.exports=e("../modules/$.core").Promise},{"../modules/$.core":31,"../modules/es6.object.to-string":85,"../modules/es6.promise":86,"../modules/es6.string.iterator":87,"../modules/web.dom.iterable":89}],25:[function(e,t,r){e("../../modules/es6.symbol"),e("../../modules/es6.object.to-string"),t.exports=e("../../modules/$.core").Symbol},{"../../modules/$.core":31,"../../modules/es6.object.to-string":85,"../../modules/es6.symbol":88}],26:[function(e,t,r){t.exports=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e}},{}],27:[function(e,t,r){t.exports=function(){}},{}],28:[function(e,t,r){var n=e("./$.is-object");t.exports=function(e){if(!n(e))throw TypeError(e+" is not an object!");return e}},{"./$.is-object":49}],29:[function(e,t,r){var n=e("./$.cof"),o=e("./$.wks")("toStringTag"),i="Arguments"==n(function(){return arguments}());t.exports=function(e){var t,r,s;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(r=(t=Object(e))[o])?r:i?n(t):"Object"==(s=n(t))&&"function"==typeof t.callee?"Arguments":s}},{"./$.cof":30,"./$.wks":78}],30:[function(e,t,r){var n={}.toString;t.exports=function(e){return n.call(e).slice(8,-1)}},{}],31:[function(e,t,r){var n=t.exports={version:"1.2.6"};"number"==typeof __e&&(__e=n)},{}],32:[function(e,t,r){var n=e("./$.a-function");t.exports=function(e,t,r){if(n(e),void 0===t)return e;switch(r){case 1:return function(r){return e.call(t,r)};case 2:return function(r,n){return e.call(t,r,n)};case 3:return function(r,n,o){return e.call(t,r,n,o)}}return function(){return e.apply(t,arguments)}}},{"./$.a-function":26}],33:[function(e,t,r){t.exports=function(e){if(void 0==e)throw TypeError("Can't call method on  "+e);return e}},{}],34:[function(e,t,r){t.exports=!e("./$.fails")(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},{"./$.fails":38}],35:[function(e,t,r){var n=e("./$.is-object"),o=e("./$.global").document,i=n(o)&&n(o.createElement);t.exports=function(e){return i?o.createElement(e):{}}},{"./$.global":41,"./$.is-object":49}],36:[function(e,t,r){var n=e("./$");t.exports=function(e){var t=n.getKeys(e),r=n.getSymbols;if(r)for(var o,i=r(e),s=n.isEnum,a=0;i.length>a;)s.call(e,o=i[a++])&&t.push(o);return t}},{"./$":56}],37:[function(e,t,r){var n=e("./$.global"),o=e("./$.core"),i=e("./$.ctx"),s="prototype",a=function(e,t,r){var c,u,l,f=e&a.F,d=e&a.G,p=e&a.S,b=e&a.P,h=e&a.B,v=e&a.W,y=d?o:o[t]||(o[t]={}),_=d?n:p?n[t]:(n[t]||{})[s];d&&(r=t);for(c in r)u=!f&&_&&c in _,u&&c in y||(l=u?_[c]:r[c],y[c]=d&&"function"!=typeof _[c]?r[c]:h&&u?i(l,n):v&&_[c]==l?function(e){var t=function(t){return this instanceof e?new e(t):e(t)};return t[s]=e[s],t}(l):b&&"function"==typeof l?i(Function.call,l):l,b&&((y[s]||(y[s]={}))[c]=l))};a.F=1,a.G=2,a.S=4,a.P=8,a.B=16,a.W=32,t.exports=a},{"./$.core":31,"./$.ctx":32,"./$.global":41}],38:[function(e,t,r){t.exports=function(e){try{return!!e()}catch(t){return!0}}},{}],39:[function(e,t,r){var n=e("./$.ctx"),o=e("./$.iter-call"),i=e("./$.is-array-iter"),s=e("./$.an-object"),a=e("./$.to-length"),c=e("./core.get-iterator-method");t.exports=function(e,t,r,u){var l,f,d,p=c(e),b=n(r,u,t?2:1),h=0;if("function"!=typeof p)throw TypeError(e+" is not iterable!");if(i(p))for(l=a(e.length);l>h;h++)t?b(s(f=e[h])[0],f[1]):b(e[h]);else for(d=p.call(e);!(f=d.next()).done;)o(d,b,f.value,t)}},{"./$.an-object":28,"./$.ctx":32,"./$.is-array-iter":47,"./$.iter-call":50,"./$.to-length":75,"./core.get-iterator-method":79}],40:[function(e,t,r){var n=e("./$.to-iobject"),o=e("./$").getNames,i={}.toString,s="object"==typeof window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[],a=function(e){try{return o(e)}catch(t){return s.slice()}};t.exports.get=function(e){return s&&"[object Window]"==i.call(e)?a(e):o(n(e))}},{"./$":56,"./$.to-iobject":74}],41:[function(e,t,r){var n=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},{}],42:[function(e,t,r){var n={}.hasOwnProperty;t.exports=function(e,t){return n.call(e,t)}},{}],43:[function(e,t,r){var n=e("./$"),o=e("./$.property-desc");t.exports=e("./$.descriptors")?function(e,t,r){return n.setDesc(e,t,o(1,r))}:function(e,t,r){return e[t]=r,e}},{"./$":56,"./$.descriptors":34,"./$.property-desc":61}],44:[function(e,t,r){t.exports=e("./$.global").document&&document.documentElement},{"./$.global":41}],45:[function(e,t,r){t.exports=function(e,t,r){var n=void 0===r;switch(t.length){case 0:return n?e():e.call(r);case 1:return n?e(t[0]):e.call(r,t[0]);case 2:return n?e(t[0],t[1]):e.call(r,t[0],t[1]);case 3:return n?e(t[0],t[1],t[2]):e.call(r,t[0],t[1],t[2]);case 4:return n?e(t[0],t[1],t[2],t[3]):e.call(r,t[0],t[1],t[2],t[3])}return e.apply(r,t)}},{}],46:[function(e,t,r){var n=e("./$.cof");t.exports=Object("z").propertyIsEnumerable(0)?Object:function(e){return"String"==n(e)?e.split(""):Object(e)}},{"./$.cof":30}],47:[function(e,t,r){var n=e("./$.iterators"),o=e("./$.wks")("iterator"),i=Array.prototype;t.exports=function(e){return void 0!==e&&(n.Array===e||i[o]===e)}},{"./$.iterators":55,"./$.wks":78}],48:[function(e,t,r){var n=e("./$.cof");t.exports=Array.isArray||function(e){return"Array"==n(e)}},{"./$.cof":30}],49:[function(e,t,r){t.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},{}],50:[function(e,t,r){var n=e("./$.an-object");t.exports=function(e,t,r,o){try{return o?t(n(r)[0],r[1]):t(r)}catch(i){var s=e["return"];throw void 0!==s&&n(s.call(e)),i}}},{"./$.an-object":28}],51:[function(e,t,r){"use strict";var n=e("./$"),o=e("./$.property-desc"),i=e("./$.set-to-string-tag"),s={};e("./$.hide")(s,e("./$.wks")("iterator"),function(){return this}),t.exports=function(e,t,r){e.prototype=n.create(s,{next:o(1,r)}),i(e,t+" Iterator")}},{"./$":56,"./$.hide":43,"./$.property-desc":61,"./$.set-to-string-tag":67,"./$.wks":78}],52:[function(e,t,r){"use strict";var n=e("./$.library"),o=e("./$.export"),i=e("./$.redefine"),s=e("./$.hide"),a=e("./$.has"),c=e("./$.iterators"),u=e("./$.iter-create"),l=e("./$.set-to-string-tag"),f=e("./$").getProto,d=e("./$.wks")("iterator"),p=!([].keys&&"next"in[].keys()),b="@@iterator",h="keys",v="values",y=function(){return this};t.exports=function(e,t,r,_,g,m,j){u(r,t,_);var $,O,w=function(e){if(!p&&e in E)return E[e];switch(e){case h:return function(){return new r(this,e)};case v:return function(){return new r(this,e)}}return function(){return new r(this,e)}},k=t+" Iterator",x=g==v,C=!1,E=e.prototype,S=E[d]||E[b]||g&&E[g],T=S||w(g);if(S){var M=f(T.call(new e));l(M,k,!0),!n&&a(E,b)&&s(M,d,y),x&&S.name!==v&&(C=!0,T=function(){return S.call(this)})}if(n&&!j||!p&&!C&&E[d]||s(E,d,T),c[t]=T,c[k]=y,g)if($={values:x?T:w(v),keys:m?T:w(h),entries:x?w("entries"):T},j)for(O in $)O in E||i(E,O,$[O]);else o(o.P+o.F*(p||C),t,$);return $}},{"./$":56,"./$.export":37,"./$.has":42,"./$.hide":43,"./$.iter-create":51,"./$.iterators":55,"./$.library":58,"./$.redefine":63,"./$.set-to-string-tag":67,"./$.wks":78}],53:[function(e,t,r){var n=e("./$.wks")("iterator"),o=!1;try{var i=[7][n]();i["return"]=function(){o=!0},Array.from(i,function(){throw 2})}catch(s){}t.exports=function(e,t){if(!t&&!o)return!1;var r=!1;try{var i=[7],s=i[n]();s.next=function(){r=!0},i[n]=function(){return s},e(i)}catch(a){}return r}},{"./$.wks":78}],54:[function(e,t,r){t.exports=function(e,t){return{value:t,done:!!e}}},{}],55:[function(e,t,r){t.exports={}},{}],56:[function(e,t,r){var n=Object;t.exports={create:n.create,getProto:n.getPrototypeOf,isEnum:{}.propertyIsEnumerable,getDesc:n.getOwnPropertyDescriptor,setDesc:n.defineProperty,setDescs:n.defineProperties,getKeys:n.keys,getNames:n.getOwnPropertyNames,getSymbols:n.getOwnPropertySymbols,each:[].forEach}},{}],57:[function(e,t,r){var n=e("./$"),o=e("./$.to-iobject");t.exports=function(e,t){for(var r,i=o(e),s=n.getKeys(i),a=s.length,c=0;a>c;)if(i[r=s[c++]]===t)return r}},{"./$":56,"./$.to-iobject":74}],58:[function(e,t,r){t.exports=!0},{}],59:[function(e,t,r){var n,o,i,s=e("./$.global"),a=e("./$.task").set,c=s.MutationObserver||s.WebKitMutationObserver,u=s.process,l=s.Promise,f="process"==e("./$.cof")(u),d=function(){var e,t,r;for(f&&(e=u.domain)&&(u.domain=null,e.exit());n;)t=n.domain,r=n.fn,t&&t.enter(),r(),t&&t.exit(),n=n.next;o=void 0,e&&e.enter()};if(f)i=function(){u.nextTick(d)};else if(c){var p=1,b=document.createTextNode("");new c(d).observe(b,{characterData:!0}),i=function(){b.data=p=-p}}else i=l&&l.resolve?function(){l.resolve().then(d)}:function(){a.call(s,d)};t.exports=function(e){var t={fn:e,next:void 0,domain:f&&u.domain};o&&(o.next=t),n||(n=t,i()),o=t}},{"./$.cof":30,"./$.global":41,"./$.task":72}],60:[function(e,t,r){var n=e("./$.export"),o=e("./$.core"),i=e("./$.fails");t.exports=function(e,t){var r=(o.Object||{})[e]||Object[e],s={};s[e]=t(r),n(n.S+n.F*i(function(){r(1)}),"Object",s)}},{"./$.core":31,"./$.export":37,"./$.fails":38}],61:[function(e,t,r){t.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},{}],62:[function(e,t,r){var n=e("./$.redefine");t.exports=function(e,t){for(var r in t)n(e,r,t[r]);return e}},{"./$.redefine":63}],63:[function(e,t,r){t.exports=e("./$.hide")},{"./$.hide":43}],64:[function(e,t,r){t.exports=Object.is||function(e,t){return e===t?0!==e||1/e===1/t:e!=e&&t!=t}},{}],65:[function(e,t,r){var n=e("./$").getDesc,o=e("./$.is-object"),i=e("./$.an-object"),s=function(e,t){if(i(e),!o(t)&&null!==t)throw TypeError(t+": can't set as prototype!")};t.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(t,r,o){try{o=e("./$.ctx")(Function.call,n(Object.prototype,"__proto__").set,2),o(t,[]),r=!(t instanceof Array)}catch(i){r=!0}return function(e,t){return s(e,t),r?e.__proto__=t:o(e,t),e}}({},!1):void 0),check:s}},{"./$":56,"./$.an-object":28,"./$.ctx":32,"./$.is-object":49}],66:[function(e,t,r){"use strict";var n=e("./$.core"),o=e("./$"),i=e("./$.descriptors"),s=e("./$.wks")("species");t.exports=function(e){var t=n[e];i&&t&&!t[s]&&o.setDesc(t,s,{configurable:!0,get:function(){return this}})}},{"./$":56,"./$.core":31,"./$.descriptors":34,"./$.wks":78}],67:[function(e,t,r){var n=e("./$").setDesc,o=e("./$.has"),i=e("./$.wks")("toStringTag");t.exports=function(e,t,r){e&&!o(e=r?e:e.prototype,i)&&n(e,i,{configurable:!0,value:t})}},{"./$":56,"./$.has":42,"./$.wks":78}],68:[function(e,t,r){var n=e("./$.global"),o="__core-js_shared__",i=n[o]||(n[o]={});t.exports=function(e){return i[e]||(i[e]={})}},{"./$.global":41}],69:[function(e,t,r){var n=e("./$.an-object"),o=e("./$.a-function"),i=e("./$.wks")("species");t.exports=function(e,t){var r,s=n(e).constructor;return void 0===s||void 0==(r=n(s)[i])?t:o(r)}},{"./$.a-function":26,"./$.an-object":28,"./$.wks":78}],70:[function(e,t,r){t.exports=function(e,t,r){if(!(e instanceof t))throw TypeError(r+": use the 'new' operator!");return e}},{}],71:[function(e,t,r){var n=e("./$.to-integer"),o=e("./$.defined");t.exports=function(e){return function(t,r){var i,s,a=String(o(t)),c=n(r),u=a.length;return 0>c||c>=u?e?"":void 0:(i=a.charCodeAt(c),55296>i||i>56319||c+1===u||(s=a.charCodeAt(c+1))<56320||s>57343?e?a.charAt(c):i:e?a.slice(c,c+2):(i-55296<<10)+(s-56320)+65536)}}},{"./$.defined":33,"./$.to-integer":73}],72:[function(e,t,r){var n,o,i,s=e("./$.ctx"),a=e("./$.invoke"),c=e("./$.html"),u=e("./$.dom-create"),l=e("./$.global"),f=l.process,d=l.setImmediate,p=l.clearImmediate,b=l.MessageChannel,h=0,v={},y="onreadystatechange",_=function(){var e=+this;if(v.hasOwnProperty(e)){var t=v[e];delete v[e],t()}},g=function(e){_.call(e.data)};d&&p||(d=function(e){for(var t=[],r=1;arguments.length>r;)t.push(arguments[r++]);return v[++h]=function(){a("function"==typeof e?e:Function(e),t)},n(h),h},p=function(e){delete v[e]},"process"==e("./$.cof")(f)?n=function(e){f.nextTick(s(_,e,1))}:b?(o=new b,i=o.port2,o.port1.onmessage=g,n=s(i.postMessage,i,1)):l.addEventListener&&"function"==typeof postMessage&&!l.importScripts?(n=function(e){l.postMessage(e+"","*")},l.addEventListener("message",g,!1)):n=y in u("script")?function(e){c.appendChild(u("script"))[y]=function(){c.removeChild(this),_.call(e)}}:function(e){setTimeout(s(_,e,1),0)}),t.exports={set:d,clear:p}},{"./$.cof":30,"./$.ctx":32,"./$.dom-create":35,"./$.global":41,"./$.html":44,"./$.invoke":45}],73:[function(e,t,r){var n=Math.ceil,o=Math.floor;t.exports=function(e){return isNaN(e=+e)?0:(e>0?o:n)(e)}},{}],74:[function(e,t,r){var n=e("./$.iobject"),o=e("./$.defined");t.exports=function(e){return n(o(e))}},{"./$.defined":33,"./$.iobject":46}],75:[function(e,t,r){var n=e("./$.to-integer"),o=Math.min;t.exports=function(e){return e>0?o(n(e),9007199254740991):0}},{"./$.to-integer":73}],76:[function(e,t,r){var n=e("./$.defined");t.exports=function(e){return Object(n(e))}},{"./$.defined":33}],77:[function(e,t,r){var n=0,o=Math.random();t.exports=function(e){return"Symbol(".concat(void 0===e?"":e,")_",(++n+o).toString(36))}},{}],78:[function(e,t,r){var n=e("./$.shared")("wks"),o=e("./$.uid"),i=e("./$.global").Symbol;t.exports=function(e){return n[e]||(n[e]=i&&i[e]||(i||o)("Symbol."+e))}},{"./$.global":41,"./$.shared":68,"./$.uid":77}],79:[function(e,t,r){var n=e("./$.classof"),o=e("./$.wks")("iterator"),i=e("./$.iterators");t.exports=e("./$.core").getIteratorMethod=function(e){return void 0!=e?e[o]||e["@@iterator"]||i[n(e)]:void 0}},{"./$.classof":29,"./$.core":31,"./$.iterators":55,"./$.wks":78}],80:[function(e,t,r){"use strict";var n=e("./$.add-to-unscopables"),o=e("./$.iter-step"),i=e("./$.iterators"),s=e("./$.to-iobject");t.exports=e("./$.iter-define")(Array,"Array",function(e,t){this._t=s(e),this._i=0,this._k=t},function(){var e=this._t,t=this._k,r=this._i++;return!e||r>=e.length?(this._t=void 0,o(1)):"keys"==t?o(0,r):"values"==t?o(0,e[r]):o(0,[r,e[r]])},"values"),i.Arguments=i.Array,n("keys"),n("values"),n("entries")},{"./$.add-to-unscopables":27,"./$.iter-define":52,"./$.iter-step":54,"./$.iterators":55,"./$.to-iobject":74}],81:[function(e,t,r){var n=e("./$.to-iobject");e("./$.object-sap")("getOwnPropertyDescriptor",function(e){return function(t,r){return e(n(t),r)}})},{"./$.object-sap":60,"./$.to-iobject":74}],82:[function(e,t,r){var n=e("./$.to-object");e("./$.object-sap")("getPrototypeOf",function(e){return function(t){return e(n(t))}})},{"./$.object-sap":60,"./$.to-object":76}],83:[function(e,t,r){var n=e("./$.to-object");e("./$.object-sap")("keys",function(e){return function(t){return e(n(t))}})},{"./$.object-sap":60,"./$.to-object":76}],84:[function(e,t,r){var n=e("./$.export");n(n.S,"Object",{setPrototypeOf:e("./$.set-proto").set})},{"./$.export":37,"./$.set-proto":65}],85:[function(e,t,r){},{}],86:[function(e,t,r){"use strict";var n,o=e("./$"),i=e("./$.library"),s=e("./$.global"),a=e("./$.ctx"),c=e("./$.classof"),u=e("./$.export"),l=e("./$.is-object"),f=e("./$.an-object"),d=e("./$.a-function"),p=e("./$.strict-new"),b=e("./$.for-of"),h=e("./$.set-proto").set,v=e("./$.same-value"),y=e("./$.wks")("species"),_=e("./$.species-constructor"),g=e("./$.microtask"),m="Promise",j=s.process,$="process"==c(j),O=s[m],w=function(e){var t=new O(function(){});return e&&(t.constructor=Object),O.resolve(t)===t},k=function(){function t(e){var r=new O(e);return h(r,t.prototype),r}var r=!1;try{if(r=O&&O.resolve&&w(),h(t,O),t.prototype=o.create(O.prototype,{constructor:{value:t}}),t.resolve(5).then(function(){})instanceof t||(r=!1),r&&e("./$.descriptors")){var n=!1;O.resolve(o.setDesc({},"then",{get:function(){n=!0}})),r=n}}catch(i){r=!1}return r}(),x=function(e,t){return i&&e===O&&t===n?!0:v(e,t)},C=function(e){var t=f(e)[y];return void 0!=t?t:e},E=function(e){var t;return l(e)&&"function"==typeof(t=e.then)?t:!1},S=function(e){var t,r;this.promise=new e(function(e,n){if(void 0!==t||void 0!==r)throw TypeError("Bad Promise constructor");t=e,r=n}),this.resolve=d(t),this.reject=d(r)},T=function(e){try{e()}catch(t){return{error:t}}},M=function(e,t){if(!e.n){e.n=!0;var r=e.c;g(function(){for(var n=e.v,o=1==e.s,i=0,a=function(t){var r,i,s=o?t.ok:t.fail,a=t.resolve,c=t.reject;try{s?(o||(e.h=!0),r=s===!0?n:s(n),r===t.promise?c(TypeError("Promise-chain cycle")):(i=E(r))?i.call(r,a,c):a(r)):c(n)}catch(u){c(u)}};r.length>i;)a(r[i++]);r.length=0,e.n=!1,t&&setTimeout(function(){var t,r,o=e.p;N(o)&&($?j.emit("unhandledRejection",n,o):(t=s.onunhandledrejection)?t({promise:o,reason:n}):(r=s.console)&&r.error&&r.error("Unhandled promise rejection",n)),e.a=void 0},1)})}},N=function(e){var t,r=e._d,n=r.a||r.c,o=0;if(r.h)return!1;for(;n.length>o;)if(t=n[o++],t.fail||!N(t.promise))return!1;return!0},R=function(e){var t=this;t.d||(t.d=!0,t=t.r||t,t.v=e,t.s=2,t.a=t.c.slice(),M(t,!0))},D=function(e){var t,r=this;if(!r.d){r.d=!0,r=r.r||r;try{if(r.p===e)throw TypeError("Promise can't be resolved itself");(t=E(e))?g(function(){var n={r:r,d:!1};try{t.call(e,a(D,n,1),a(R,n,1))}catch(o){R.call(n,o)}}):(r.v=e,r.s=1,M(r,!1))}catch(n){R.call({r:r,d:!1},n)}}};k||(O=function(e){d(e);var t=this._d={p:p(this,O,m),c:[],a:void 0,s:0,d:!1,v:void 0,h:!1,n:!1};try{e(a(D,t,1),a(R,t,1))}catch(r){R.call(t,r)}},e("./$.redefine-all")(O.prototype,{then:function(e,t){var r=new S(_(this,O)),n=r.promise,o=this._d;return r.ok="function"==typeof e?e:!0,r.fail="function"==typeof t&&t,o.c.push(r),o.a&&o.a.push(r),o.s&&M(o,!1),n},"catch":function(e){return this.then(void 0,e)}})),u(u.G+u.W+u.F*!k,{Promise:O}),e("./$.set-to-string-tag")(O,m),e("./$.set-species")(m),n=e("./$.core")[m],u(u.S+u.F*!k,m,{reject:function(e){var t=new S(this),r=t.reject;return r(e),t.promise}}),u(u.S+u.F*(!k||w(!0)),m,{resolve:function(e){if(e instanceof O&&x(e.constructor,this))return e;var t=new S(this),r=t.resolve;return r(e),t.promise}}),u(u.S+u.F*!(k&&e("./$.iter-detect")(function(e){O.all(e)["catch"](function(){})})),m,{all:function(e){var t=C(this),r=new S(t),n=r.resolve,i=r.reject,s=[],a=T(function(){b(e,!1,s.push,s);var r=s.length,a=Array(r);r?o.each.call(s,function(e,o){var s=!1;t.resolve(e).then(function(e){s||(s=!0,a[o]=e,--r||n(a))},i)}):n(a)});return a&&i(a.error),r.promise},race:function(e){var t=C(this),r=new S(t),n=r.reject,o=T(function(){b(e,!1,function(e){t.resolve(e).then(r.resolve,n)})});return o&&n(o.error),r.promise}})},{"./$":56,"./$.a-function":26,"./$.an-object":28,"./$.classof":29,"./$.core":31,"./$.ctx":32,"./$.descriptors":34,"./$.export":37,"./$.for-of":39,"./$.global":41,"./$.is-object":49,"./$.iter-detect":53,"./$.library":58,"./$.microtask":59,"./$.redefine-all":62,"./$.same-value":64,"./$.set-proto":65,"./$.set-species":66,"./$.set-to-string-tag":67,"./$.species-constructor":69,"./$.strict-new":70,"./$.wks":78}],87:[function(e,t,r){"use strict";var n=e("./$.string-at")(!0);e("./$.iter-define")(String,"String",function(e){this._t=String(e),this._i=0},function(){var e,t=this._t,r=this._i;return r>=t.length?{value:void 0,done:!0}:(e=n(t,r),this._i+=e.length,{value:e,done:!1})})},{"./$.iter-define":52,"./$.string-at":71}],88:[function(e,t,r){"use strict";var n=e("./$"),o=e("./$.global"),i=e("./$.has"),s=e("./$.descriptors"),a=e("./$.export"),c=e("./$.redefine"),u=e("./$.fails"),l=e("./$.shared"),f=e("./$.set-to-string-tag"),d=e("./$.uid"),p=e("./$.wks"),b=e("./$.keyof"),h=e("./$.get-names"),v=e("./$.enum-keys"),y=e("./$.is-array"),_=e("./$.an-object"),g=e("./$.to-iobject"),m=e("./$.property-desc"),j=n.getDesc,$=n.setDesc,O=n.create,w=h.get,k=o.Symbol,x=o.JSON,C=x&&x.stringify,E=!1,S=p("_hidden"),T=n.isEnum,M=l("symbol-registry"),N=l("symbols"),R="function"==typeof k,D=Object.prototype,P=s&&u(function(){return 7!=O($({},"a",{get:function(){return $(this,"a",{value:7}).a}})).a})?function(e,t,r){var n=j(D,t);n&&delete D[t],$(e,t,r),n&&e!==D&&$(D,t,n)}:$,A=function(e){var t=N[e]=O(k.prototype);return t._k=e,s&&E&&P(D,e,{configurable:!0,set:function(t){i(this,S)&&i(this[S],e)&&(this[S][e]=!1),P(this,e,m(1,t))}}),t},L=function(e){return"symbol"==typeof e},I=function(e,t,r){return r&&i(N,t)?(r.enumerable?(i(e,S)&&e[S][t]&&(e[S][t]=!1),r=O(r,{enumerable:m(0,!1)})):(i(e,S)||$(e,S,m(1,{})),e[S][t]=!0),P(e,t,r)):$(e,t,r)},F=function(e,t){_(e);for(var r,n=v(t=g(t)),o=0,i=n.length;i>o;)I(e,r=n[o++],t[r]);return e},V=function(e,t){return void 0===t?O(e):F(O(e),t)},z=function(e){var t=T.call(this,e);return t||!i(this,e)||!i(N,e)||i(this,S)&&this[S][e]?t:!0},U=function(e,t){var r=j(e=g(e),t);return!r||!i(N,t)||i(e,S)&&e[S][t]||(r.enumerable=!0),r},H=function(e){for(var t,r=w(g(e)),n=[],o=0;r.length>o;)i(N,t=r[o++])||t==S||n.push(t);return n},B=function(e){for(var t,r=w(g(e)),n=[],o=0;r.length>o;)i(N,t=r[o++])&&n.push(N[t]);return n},J=function(e){if(void 0!==e&&!L(e)){for(var t,r,n=[e],o=1,i=arguments;i.length>o;)n.push(i[o++]);return t=n[1],"function"==typeof t&&(r=t),!r&&y(t)||(t=function(e,t){return r&&(t=r.call(this,e,t)),L(t)?void 0:t}),n[1]=t,C.apply(x,n)}},W=u(function(){var e=k();return"[null]"!=C([e])||"{}"!=C({a:e})||"{}"!=C(Object(e))});R||(k=function(){if(L(this))throw TypeError("Symbol is not a constructor");return A(d(arguments.length>0?arguments[0]:void 0))},c(k.prototype,"toString",function(){return this._k}),L=function(e){return e instanceof k},n.create=V,n.isEnum=z,n.getDesc=U,n.setDesc=I,n.setDescs=F,n.getNames=h.get=H,n.getSymbols=B,s&&!e("./$.library")&&c(D,"propertyIsEnumerable",z,!0));var Y={"for":function(e){return i(M,e+="")?M[e]:M[e]=k(e)},keyFor:function(e){return b(M,e)},useSetter:function(){E=!0},useSimple:function(){E=!1}};n.each.call("hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),function(e){var t=p(e);Y[e]=R?t:A(t)}),E=!0,a(a.G+a.W,{Symbol:k}),a(a.S,"Symbol",Y),a(a.S+a.F*!R,"Object",{create:V,defineProperty:I,defineProperties:F,getOwnPropertyDescriptor:U,getOwnPropertyNames:H,getOwnPropertySymbols:B}),x&&a(a.S+a.F*(!R||W),"JSON",{stringify:J}),f(k,"Symbol"),f(Math,"Math",!0),f(o.JSON,"JSON",!0)},{"./$":56,"./$.an-object":28,"./$.descriptors":34,"./$.enum-keys":36,"./$.export":37,"./$.fails":38,"./$.get-names":40,"./$.global":41,"./$.has":42,"./$.is-array":48,"./$.keyof":57,"./$.library":58,"./$.property-desc":61,"./$.redefine":63,"./$.set-to-string-tag":67,"./$.shared":68,"./$.to-iobject":74,"./$.uid":77,"./$.wks":78}],89:[function(e,t,r){e("./es6.array.iterator");var n=e("./$.iterators");n.NodeList=n.HTMLCollection=n.Array},{"./$.iterators":55,"./es6.array.iterator":80}],90:[function(e,t,r){window.MutationObserver=window.MutationObserver||window.WebKitMutationObserver||function(e){function t(e){this.g=[],this.k=e}function r(e){!function r(){var n=e.takeRecords();n.length&&e.k(n,e),e.f=setTimeout(r,t._period)}()}function n(t){var r,n={type:null,target:null,addedNodes:[],removedNodes:[],previousSibling:null,nextSibling:null,attributeName:null,attributeNamespace:null,oldValue:null};for(r in t)n[r]!==e&&t[r]!==e&&(n[r]=t[r]);return n}function o(e,t){var r=a(e,t);return function(n){var o,c=n.length;t.a&&r.a&&i(n,e,r.a,t.d),(t.b||t.e)&&(o=s(n,e,r,t)),(o||n.length!==c)&&(r=a(e,t))}}function i(t,r,o,i){for(var s,a,c={},u=r.attributes,l=u.length;l--;)s=u[l],a=s.name,i&&i[a]===e||(s.value!==o[a]&&t.push(n({type:"attributes",target:r,attributeName:a,oldValue:o[a],attributeNamespace:s.namespaceURI})),c[a]=!0);for(a in o)c[a]||t.push(n({target:r,type:"attributes",attributeName:a,oldValue:o[a]}))}function s(t,r,o,s){function a(e,r,o,a,c){var l=e.length-1;c=-~((l-c)/2);for(var f,d,p;p=e.pop();)f=o[p.h],d=a[p.i],s.b&&c&&Math.abs(p.h-p.i)>=l&&(t.push(n({type:"childList",target:r,addedNodes:[f],removedNodes:[f],nextSibling:f.nextSibling,previousSibling:f.previousSibling})),c--),s.a&&d.a&&i(t,f,d.a,s.d),s.c&&3===f.nodeType&&f.nodeValue!==d.c&&t.push(n({type:"characterData",target:f})),s.e&&u(f,d)}function u(r,o){for(var d,p,b,h,v,y=r.childNodes,_=o.b,g=y.length,m=_?_.length:0,j=0,$=0,O=0;g>$||m>O;)h=y[$],v=(b=_[O])&&b.j,h===v?(s.a&&b.a&&i(t,h,b.a,s.d),s.c&&b.c!==e&&h.nodeValue!==b.c&&t.push(n({type:"characterData",target:h})),p&&a(p,r,y,_,j),s.e&&(h.childNodes.length||b.b&&b.b.length)&&u(h,b),$++,O++):(l=!0,d||(d={},p=[]),h&&(d[b=c(h)]||(d[b]=!0,-1===(b=f(_,h,O,"j"))?s.b&&(t.push(n({type:"childList",target:r,addedNodes:[h],nextSibling:h.nextSibling,previousSibling:h.previousSibling})),j++):p.push({h:$,i:b})),$++),v&&v!==y[$]&&(d[b=c(v)]||(d[b]=!0,-1===(b=f(y,v,$))?s.b&&(t.push(n({type:"childList",target:o.j,removedNodes:[v],nextSibling:_[O+1],previousSibling:_[O-1]})),j--):p.push({h:b,i:O})),O++));p&&a(p,r,y,_,j)}var l;return u(r,o),l}function a(e,t){var r=!0;return function n(e){var o={j:e};return!t.c||3!==e.nodeType&&8!==e.nodeType?(t.a&&r&&1===e.nodeType&&(o.a=l(e.attributes,function(e,r){return t.d&&!t.d[r.name]||(e[r.name]=r.value),e})),r&&(t.b||t.c||t.a&&t.e)&&(o.b=u(e.childNodes,n)),r=t.e):o.c=e.nodeValue,o}(e)}function c(e){try{return e.id||(e.mo_id=e.mo_id||d++)}catch(t){try{return e.nodeValue}catch(r){return d++}}}function u(e,t){for(var r=[],n=0;n<e.length;n++)r[n]=t(e[n],n,e);return r}function l(e,t){for(var r={},n=0;n<e.length;n++)r=t(r,e[n],n,e);return r}function f(e,t,r,n){for(;r<e.length;r++)if((n?e[r][n]:e[r])===t)return r;return-1}t._period=30,t.prototype={observe:function(e,t){for(var n={a:!!(t.attributes||t.attributeFilter||t.attributeOldValue),b:!!t.childList,e:!!t.subtree,c:!(!t.characterData&&!t.characterDataOldValue)},i=this.g,s=0;s<i.length;s++)i[s].m===e&&i.splice(s,1);t.attributeFilter&&(n.d=l(t.attributeFilter,function(e,t){
return e[t]=!0,e})),i.push({m:e,l:o(e,n)}),this.f||r(this)},takeRecords:function(){for(var e=[],t=this.g,r=0;r<t.length;r++)t[r].l(e);return e},disconnect:function(){this.g=[],clearTimeout(this.f),this.f=null}};var d=1;return t}(void 0)},{}],91:[function(e,t,r){Object.observe||function(e,t,r,n){"use strict";var o,i,s=["add","update","delete","reconfigure","setPrototype","preventExtensions"],a=t.isArray||function(e){return function(t){return"[object Array]"===e.call(t)}}(e.prototype.toString),c=t.prototype.indexOf?t.indexOf||function(e,r,n){return t.prototype.indexOf.call(e,r,n)}:function(e,t,r){for(var n=r||0;n<e.length;n++)if(e[n]===t)return n;return-1},u=r.Map!==n&&Map.prototype.forEach?function(){return new Map}:function(){var e=[],t=[];return{size:0,has:function(t){return c(e,t)>-1},get:function(r){return t[c(e,r)]},set:function(r,n){var o=c(e,r);-1===o?(e.push(r),t.push(n),this.size++):t[o]=n},"delete":function(r){var n=c(e,r);n>-1&&(e.splice(n,1),t.splice(n,1),this.size--)},forEach:function(r){for(var n=0;n<e.length;n++)r.call(arguments[1],t[n],e[n],this)}}},l=e.getOwnPropertyNames?function(){var t=e.getOwnPropertyNames;try{arguments.callee}catch(r){var n=(t(c).join(" ")+" ").replace(/prototype |length |name /g,"").slice(0,-1).split(" ");n.length&&(t=function(t){var r=e.getOwnPropertyNames(t);if("function"==typeof t)for(var o,i=0;i<n.length;)(o=c(r,n[i++]))>-1&&r.splice(o,1);return r})}return t}():function(t){var r,n,o=[];if("hasOwnProperty"in t)for(r in t)t.hasOwnProperty(r)&&o.push(r);else{n=e.hasOwnProperty;for(r in t)n.call(t,r)&&o.push(r)}return a(t)&&o.push("length"),o},f=e.getPrototypeOf,d=e.defineProperties&&e.getOwnPropertyDescriptor,p=r.requestAnimationFrame||r.webkitRequestAnimationFrame||function(){var e=+new Date,t=e;return function(r){return setTimeout(function(){r((t=+new Date)-e)},17)}}(),b=function(e,t,r){var n=o.get(e);n?(v(n,e),m(e,n,t,r)):(n=h(e),m(e,n,t,r),1===o.size&&p(y))},h=function(t,r){var n,i=l(t),s=[],a=0,r={handlers:u(),frozen:e.isFrozen?e.isFrozen(t):!1,extensible:e.isExtensible?e.isExtensible(t):!0,proto:f&&f(t),properties:i,values:s,notifier:g(t,r)};if(d)for(n=r.descriptors=[];a<i.length;)n[a]=d(t,i[a]),s[a]=t[i[a++]];else for(;a<i.length;)s[a]=t[i[a++]];return o.set(t,r),r},v=function(){var t=d?function(e,t,r,n,o){var i=t.properties[r],s=e[i],a=t.values[r],c=t.descriptors[r];"value"in o&&(a===s?0===a&&1/a!==1/s:a===a||s===s)&&(j(e,t,{name:i,type:"update",object:e,oldValue:a},n),t.values[r]=s),!c.configurable||o.configurable&&o.writable===c.writable&&o.enumerable===c.enumerable&&o.get===c.get&&o.set===c.set||(j(e,t,{name:i,type:"reconfigure",object:e,oldValue:a},n),t.descriptors[r]=o)}:function(e,t,r,n){var o=t.properties[r],i=e[o],s=t.values[r];(s===i?0===s&&1/s!==1/i:s===s||i===i)&&(j(e,t,{name:o,type:"update",object:e,oldValue:s},n),t.values[r]=i)},r=d?function(e,r,n,o,i){for(var s,a=r.length;n&&a--;)null!==r[a]&&(s=d(e,r[a]),n--,s?t(e,o,a,i,s):(j(e,o,{name:r[a],type:"delete",object:e,oldValue:o.values[a]},i),o.properties.splice(a,1),o.values.splice(a,1),o.descriptors.splice(a,1)))}:function(e,t,r,n,o){for(var i=t.length;r&&i--;)null!==t[i]&&(j(e,n,{name:t[i],type:"delete",object:e,oldValue:n.values[i]},o),n.properties.splice(i,1),n.values.splice(i,1),r--)};return function(n,o,i){if(n.handlers.size&&!n.frozen){var s,a,u,p,b,h,v,y,_=n.values,g=n.descriptors,m=0;if(n.extensible)if(s=n.properties.slice(),a=s.length,u=l(o),g){for(;m<u.length;)b=u[m++],p=c(s,b),y=d(o,b),-1===p?(j(o,n,{name:b,type:"add",object:o},i),n.properties.push(b),_.push(o[b]),g.push(y)):(s[p]=null,a--,t(o,n,p,i,y));r(o,s,a,n,i),e.isExtensible(o)||(n.extensible=!1,j(o,n,{type:"preventExtensions",object:o},i),n.frozen=e.isFrozen(o))}else{for(;m<u.length;)b=u[m++],p=c(s,b),h=o[b],-1===p?(j(o,n,{name:b,type:"add",object:o},i),n.properties.push(b),_.push(h)):(s[p]=null,a--,t(o,n,p,i));r(o,s,a,n,i)}else if(!n.frozen){for(;m<s.length;m++)b=s[m],t(o,n,m,i,d(o,b));e.isFrozen(o)&&(n.frozen=!0)}f&&(v=f(o),v!==n.proto&&(j(o,n,{type:"setPrototype",name:"__proto__",object:o,oldValue:n.proto}),n.proto=v))}}}(),y=function(){o.size&&(o.forEach(v),i.forEach(_),p(y))},_=function(e,t){var r=e.changeRecords;r.length&&(e.changeRecords=[],t(r))},g=function(e,t){return arguments.length<2&&(t=o.get(e)),t&&t.notifier||{notify:function(t){t.type;var r=o.get(e);if(r){var n,i={object:e};for(n in t)"object"!==n&&(i[n]=t[n]);j(e,r,i)}},performChange:function(t,r){if("string"!=typeof t)throw new TypeError("Invalid non-string changeType");if("function"!=typeof r)throw new TypeError("Cannot perform non-function");var i,s,a=o.get(e),c=arguments[2],u=c===n?r():r.call(c);if(a&&v(a,e,t),a&&u&&"object"==typeof u){s={object:e,type:t};for(i in u)"object"!==i&&"type"!==i&&(s[i]=u[i]);j(e,a,s)}}}},m=function(e,t,r,n){var o=i.get(r);o||i.set(r,o={observed:u(),changeRecords:[]}),o.observed.set(e,{acceptList:n.slice(),data:t}),t.handlers.set(r,o)},j=function(e,t,r,n){t.handlers.forEach(function(t){var o=t.observed.get(e).acceptList;("string"!=typeof n||-1===c(o,n))&&c(o,r.type)>-1&&t.changeRecords.push(r)})};o=u(),i=u(),e.observe=function(t,r,o){if(!t||"object"!=typeof t&&"function"!=typeof t)throw new TypeError("Object.observe cannot observe non-object");if("function"!=typeof r)throw new TypeError("Object.observe cannot deliver to non-function");if(e.isFrozen&&e.isFrozen(r))throw new TypeError("Object.observe cannot deliver to a frozen function object");if(o===n)o=s;else if(!o||"object"!=typeof o)throw new TypeError("Third argument to Object.observe must be an array of strings.");return b(t,r,o),t},e.unobserve=function(e,t){if(null===e||"object"!=typeof e&&"function"!=typeof e)throw new TypeError("Object.unobserve cannot unobserve non-object");if("function"!=typeof t)throw new TypeError("Object.unobserve cannot deliver to non-function");var r,n=i.get(t);return n&&(r=n.observed.get(e))&&(n.observed.forEach(function(e,t){v(e.data,t)}),p(function(){_(n,t)}),1===n.observed.size&&n.observed.has(e)?i["delete"](t):n.observed["delete"](e),1===r.data.handlers.size?o["delete"](e):r.data.handlers["delete"](t)),e},e.getNotifier=function(t){if(null===t||"object"!=typeof t&&"function"!=typeof t)throw new TypeError("Object.getNotifier cannot getNotifier non-object");return e.isFrozen&&e.isFrozen(t)?null:g(t)},e.deliverChangeRecords=function(e){if("function"!=typeof e)throw new TypeError("Object.deliverChangeRecords cannot deliver to non-function");var t=i.get(e);t&&(t.observed.forEach(function(e,t){v(e.data,t)}),_(t,e))}}(Object,Array,this)},{}],92:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(r,"__esModule",{value:!0}),r.DataObjectObserver=r.DataObjectReporter=r.Syncher=void 0,e("mutationobserver-shim"),e("object.observe"),e("array.observe");var o=e("./syncher/Syncher"),i=n(o),s=e("./syncher/DataObjectReporter"),a=n(s),c=e("./syncher/DataObjectObserver"),u=n(c);r.Syncher=i["default"],r.DataObjectReporter=a["default"],r.DataObjectObserver=u["default"]},{"./syncher/DataObjectObserver":95,"./syncher/DataObjectReporter":96,"./syncher/Syncher":99,"array.observe":1,"mutationobserver-shim":90,"object.observe":91}],93:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(r,"__esModule",{value:!0});var o=e("babel-runtime/core-js/promise"),i=n(o),s=e("babel-runtime/core-js/object/keys"),a=n(s),c=e("babel-runtime/helpers/classCallCheck"),u=n(c),l=e("babel-runtime/helpers/createClass"),f=n(l),d=e("./SyncObject"),p=n(d),b=e("./DataObjectChild"),h=n(b),v=e("../utils/utils.js"),y=function(){function e(t,r,n,o,i,s){(0,u["default"])(this,e);var a=this;a._syncher=t,a._url=r,a._schema=n,a._status=o,a._syncObj=new p["default"](i),a._childrens=s,a._version=0,a._childId=0,a._childrenObjects={},a._childrenListeners=[],a._owner=t._owner,a._bus=t._bus}return(0,f["default"])(e,[{key:"_allocateListeners",value:function(){var e=this,t=this,r=t._url+"/children/";t._childrens&&t._childrens.forEach(function(n){var o=r+n,i=t._bus.addListener(o,function(r){if(r.from!==e._owner)switch(console.log("DataObject-Children-RCV: ",r),r.type){case"create":t._onChildCreate(r);break;case"delete":console.log(r);break;default:t._changeChildren(r)}});t._childrenListeners.push(i)})}},{key:"_releaseListeners",value:function(){var e=this;e._childrenListeners.forEach(function(e){e.remove()}),(0,a["default"])(e._childrenObjects).forEach(function(t){e._childrenObjects[t]._releaseListeners()})}},{key:"pause",value:function(){throw"Not implemented"}},{key:"resume",value:function(){throw"Not implemented"}},{key:"stop",value:function(){throw"Not implemented"}},{key:"addChild",value:function(e,t){var r=this;r._childId++;var n=r._owner+"#"+r._childId,o=r._url+"/children/"+e,s={type:"create",from:r._owner,to:o,body:{resource:n,value:t}};return new i["default"](function(e){var i=r._bus.postMessage(s);console.log("create-reporter-child( "+r._owner+" ): ",s);var a=new h["default"](r,n,t,r._owner,i);a.onChange(function(e){r._onChange(e,{path:o,childId:n})}),r._childrenObjects[n]=a,e(a)})}},{key:"onAddChild",value:function(e){this._onAddChildrenHandler=e}},{key:"_onChildCreate",value:function(e){var t=this,r=e.body.resource;console.log("create-observer-child( "+t._owner+" ): ",e);var n=new h["default"](t,r,e.body.value);t._childrenObjects[r]=n,setTimeout(function(){t._bus.postMessage({id:e.id,type:"response",from:e.to,to:e.from,body:{code:200,source:t._owner}})});var o={type:e.type,from:e.from,url:e.to,value:e.body.value,childId:r,identity:e.body.identity};t._onAddChildrenHandler&&(console.log("ADD-CHILDREN-EVENT: ",o),t._onAddChildrenHandler(o))}},{key:"_onChange",value:function(e,t){var r=this;if(r._version++,"on"===r._status){var n={type:"update",from:r._url,to:r._url+"/changes",body:{version:r._version,source:r._owner,attribute:e.field}};e.oType===d.ObjectType.OBJECT?e.cType!==d.ChangeType.REMOVE&&(n.body.value=e.data):(n.body.attributeType=e.oType,n.body.value=e.data,e.cType!==d.ChangeType.UPDATE&&(n.body.operation=e.cType)),t&&(n.to=t.path,n.body.resource=t.childId),r._bus.postMessage(n)}}},{key:"_changeObject",value:function(e,t){var r=this;if(r._version+1===t.body.version){r._version++;var n=t.body.attribute,o=(0,v.deepClone)(t.body.value),i=e.findBefore(n);if(t.body.attributeType===d.ObjectType.ARRAY)if(t.body.operation===d.ChangeType.ADD){var s=i.obj,a=i.last;Array.prototype.splice.apply(s,[a,0].concat(o))}else if(t.body.operation===d.ChangeType.REMOVE){var c=i.obj,u=i.last;c.splice(u,o)}else i.obj[i.last]=o;else t.body.value?i.obj[i.last]=o:delete i.obj[i.last]}else console.log("UNSYNCHRONIZED VERSION: (data => "+r._version+", msg => "+t.body.version+")")}},{key:"_changeChildren",value:function(e){var t=this;console.log("Change children: ",t._owner,e);var r=e.body.resource,n=t._childrenObjects[r];n?t._changeObject(n._syncObj,e):console.log("No children found for: ",r)}},{key:"url",get:function(){return this._url}},{key:"schema",get:function(){return this._schema}},{key:"status",get:function(){return this._status}},{key:"data",get:function(){return this._syncObj.data}},{key:"childrens",get:function(){return this._childrenObjects}}]),e}();r["default"]=y,t.exports=r["default"]},{"../utils/utils.js":100,"./DataObjectChild":94,"./SyncObject":98,"babel-runtime/core-js/object/keys":7,"babel-runtime/core-js/promise":9,"babel-runtime/helpers/classCallCheck":11,"babel-runtime/helpers/createClass":12}],94:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(r,"__esModule",{value:!0});var o=e("babel-runtime/helpers/classCallCheck"),i=n(o),s=e("babel-runtime/helpers/createClass"),a=n(s),c=e("./SyncObject"),u=n(c),l=function(){function e(t,r,n,o,s){(0,i["default"])(this,e);var a=this;a._parent=t,a._childId=r,a._owner=o,a._msgId=s,a._syncObj=new u["default"](n),a._bus=t._bus,a._allocateListeners()}return(0,a["default"])(e,[{key:"_allocateListeners",value:function(){var e=this;e._owner&&(e._listener=e._bus.addListener(e._owner,function(t){"response"===t.type&&t.id===e._msgId&&(console.log("DataObjectChild.onResponse:",t),e._onResponse(t))}))}},{key:"_releaseListeners",value:function(){var e=this;e._listener&&e._listener.remove()}},{key:"delete",value:function(){var e=this;delete e._parent._children[e._childId],e._releaseListeners()}},{key:"onChange",value:function(e){this._syncObj.observe(function(t){e(t)})}},{key:"onResponse",value:function(e){this._onResponseHandler=e}},{key:"_onResponse",value:function(e){var t=this,r={type:e.type,url:e.body.source,code:e.body.code};t._onResponseHandler&&t._onResponseHandler(r)}},{key:"childId",get:function(){return this._childId}},{key:"data",get:function(){return this._syncObj.data}}]),e}();r["default"]=l,t.exports=r["default"]},{"./SyncObject":98,"babel-runtime/helpers/classCallCheck":11,"babel-runtime/helpers/createClass":12}],95:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(r,"__esModule",{value:!0});var o=e("babel-runtime/core-js/object/keys"),i=n(o),s=e("babel-runtime/core-js/object/get-prototype-of"),a=n(s),c=e("babel-runtime/helpers/classCallCheck"),u=n(c),l=e("babel-runtime/helpers/createClass"),f=n(l),d=e("babel-runtime/helpers/possibleConstructorReturn"),p=n(d),b=e("babel-runtime/helpers/get"),h=n(b),v=e("babel-runtime/helpers/inherits"),y=n(v),_=e("./DataObject"),g=n(_),m=e("./DataObjectChild"),j=n(m),$={ANY:"any",START:"start",EXACT:"exact"},O=function(e){function t(e,r,n,o,s,c,l){(0,u["default"])(this,t);var f=(0,p["default"])(this,(0,a["default"])(t).call(this,e,r,n,o,s.data,c)),d=f;return d._version=l,d._filters={},d._syncObj.observe(function(e){d._onFilter(e)}),(0,i["default"])(s.childrens).forEach(function(e){var t=s.childrens[e];d._childrenObjects[e]=new j["default"](d,e,t)}),d._allocateListeners(),f}return(0,y["default"])(t,e),(0,f["default"])(t,[{key:"_allocateListeners",value:function(){(0,h["default"])((0,a["default"])(t.prototype),"_allocateListeners",this).call(this);var e=this;e._changeListener=e._bus.addListener(e._url+"/changes",function(t){"update"===t.type&&(console.log("DataObjectObserver-"+e._url+"-RCV: ",t),e._changeObject(e._syncObj,t))})}},{key:"_releaseListeners",value:function(){(0,h["default"])((0,a["default"])(t.prototype),"_releaseListeners",this).call(this);var e=this;e._changeListener.remove()}},{key:"delete",value:function(){var e=this;e._releaseListeners(),delete e._syncher._observers[e._url]}},{key:"unsubscribe",value:function(){var e=this,t={type:"unsubscribe",from:e._owner,to:e._syncher._subURL,body:{resource:e._url}};e._bus.postMessage(t,function(t){console.log("DataObjectObserver-UNSUBSCRIBE: ",t),200===t.body.code&&(e._releaseListeners(),delete e._syncher._observers[e._url])})}},{key:"onChange",value:function(e,t){var r=e,n={type:$.EXACT,callback:t},o=e.indexOf("*");o===e.length-1&&(0===o?n.type=$.ANY:(n.type=$.START,r=e.substr(0,e.length-1))),this._filters[r]=n}},{key:"_onFilter",value:function(e){var t=this;(0,i["default"])(t._filters).forEach(function(r){var n=t._filters[r];n.type===$.ANY?n.callback(e):n.type===$.START?0===e.field.indexOf(r)&&n.callback(e):n.type===$.EXACT&&e.field===r&&n.callback(e)})}}]),t}(g["default"]);r["default"]=O,t.exports=r["default"]},{"./DataObject":93,"./DataObjectChild":94,"babel-runtime/core-js/object/get-prototype-of":6,"babel-runtime/core-js/object/keys":7,"babel-runtime/helpers/classCallCheck":11,"babel-runtime/helpers/createClass":12,"babel-runtime/helpers/get":13,"babel-runtime/helpers/inherits":14,"babel-runtime/helpers/possibleConstructorReturn":15}],96:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(r,"__esModule",{value:!0});var o=e("babel-runtime/core-js/object/keys"),i=n(o),s=e("babel-runtime/core-js/object/get-prototype-of"),a=n(s),c=e("babel-runtime/helpers/classCallCheck"),u=n(c),l=e("babel-runtime/helpers/createClass"),f=n(l),d=e("babel-runtime/helpers/possibleConstructorReturn"),p=n(d),b=e("babel-runtime/helpers/get"),h=n(b),v=e("babel-runtime/helpers/inherits"),y=n(v),_=e("./DataObject"),g=n(_),m=e("../utils/utils.js"),j=function(e){function t(e,r,n,o,i,s){(0,u["default"])(this,t);var c=(0,p["default"])(this,(0,a["default"])(t).call(this,e,r,n,o,i,s)),l=c;return l._subscriptions={},l._syncObj.observe(function(e){console.log("DataObjectReporter-"+r+"-SEND: ",e),l._onChange(e)}),l._allocateListeners(),c}return(0,y["default"])(t,e),(0,f["default"])(t,[{key:"_allocateListeners",value:function(){(0,h["default"])((0,a["default"])(t.prototype),"_allocateListeners",this).call(this);var e=this;e._responseListener=e._bus.addListener(e._url,function(t){"response"===t.type&&e._onResponse(t)})}},{key:"_releaseListeners",value:function(){(0,h["default"])((0,a["default"])(t.prototype),"_releaseListeners",this).call(this);var e=this;e._responseListener.remove()}},{key:"inviteObservers",value:function(e){var t=this,r={type:"create",from:t._syncher._owner,to:t._syncher._subURL,body:{resource:t._url,schema:t._schema,value:t._syncObj.data,authorise:e}};t._bus.postMessage(r)}},{key:"delete",value:function(){var e=this,t={type:"delete",from:e._owner,to:e._syncher._subURL,body:{resource:e._url}};e._bus.postMessage(t,function(t){console.log("DataObjectReporter-DELETE: ",t),200===t.body.code&&(e._releaseListeners(),delete e._syncher._reporters[e._url])})}},{key:"onSubscription",value:function(e){this._onSubscriptionHandler=e}},{key:"onResponse",value:function(e){this._onResponseHandler=e}},{key:"_onForward",value:function(e){var t=this;switch(console.log("DataObjectReporter-RCV: ",e),e.body.type){case"subscribe":t._onSubscribe(e);break;case"unsubscribe":t._onUnSubscribe(e)}}},{key:"_onSubscribe",value:function(e){var t=this,r=e.body.from,n={type:e.body.type,url:r,accept:function(){var n={url:r,status:"on"};t._subscriptions[r]=n;var o={};return(0,i["default"])(t._childrenObjects).forEach(function(e){var r=t._childrenObjects[e].data;o[e]=(0,m.deepClone)(r)}),t._bus.postMessage({id:e.id,type:"response",from:e.to,to:e.from,body:{code:200,schema:t._schema,version:t._version,value:{data:(0,m.deepClone)(t.data),childrens:o}}}),n},reject:function(r){t._bus.postMessage({id:e.id,type:"response",from:e.to,to:e.from,body:{code:403,desc:r}})}};t._onSubscriptionHandler&&(console.log("SUBSCRIPTION-EVENT: ",n),t._onSubscriptionHandler(n))}},{key:"_onUnSubscribe",value:function(e){var t=this,r=e.body.from,n=t._subscriptions[r];delete t._subscriptions[r];var o={type:e.body.type,url:r,object:n};t._onSubscriptionHandler&&(console.log("UN-SUBSCRIPTION-EVENT: ",o),t._onSubscriptionHandler(o))}},{key:"_onResponse",value:function(e){var t=this,r={type:e.type,url:e.from,code:e.body.code};t._onResponseHandler&&(console.log("RESPONSE-EVENT: ",r),t._onResponseHandler(r))}},{key:"subscriptions",get:function(){return this._subscriptions}}]),t}(g["default"]);r["default"]=j,t.exports=r["default"]},{"../utils/utils.js":100,"./DataObject":93,"babel-runtime/core-js/object/get-prototype-of":6,"babel-runtime/core-js/object/keys":7,"babel-runtime/helpers/classCallCheck":11,"babel-runtime/helpers/createClass":12,"babel-runtime/helpers/get":13,"babel-runtime/helpers/inherits":14,"babel-runtime/helpers/possibleConstructorReturn":15}],97:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(r,"__esModule",{value:!0});var o=e("babel-runtime/helpers/classCallCheck"),i=n(o),s=e("babel-runtime/helpers/createClass"),a=n(s),c=function(){function e(t,r,n,o){(0,i["default"])(this,e);var s=this;s._owner=t,s._url=r,s._bus=n,s._children=o,s._changes=[],s._allocateListeners()}return(0,a["default"])(e,[{key:"_allocateListeners",value:function(){var e=this;e._listener=e._bus.addListener(e._url,function(t){console.log("DataProvisional-"+e._url+"-RCV: ",t),e._changes.push(t)})}},{key:"_releaseListeners",value:function(){var e=this;e._listener.remove()}},{key:"apply",value:function(e){var t=this;t._changes.forEach(function(t){e._changeObject(e._syncObj,t)})}},{key:"children",get:function(){return this._children}}]),e}();r["default"]=c,t.exports=r["default"]},{"babel-runtime/helpers/classCallCheck":11,"babel-runtime/helpers/createClass":12}],98:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(r,"__esModule",{value:!0}),r.ObjectType=r.ChangeType=void 0;var o=e("babel-runtime/core-js/object/keys"),i=n(o),s=e("babel-runtime/helpers/classCallCheck"),a=n(s),c=e("babel-runtime/helpers/createClass"),u=n(c),l=e("../utils/utils.js"),f=function(){function e(t){(0,a["default"])(this,e);var r=this;r._observers=[],r._filters={},t?r._data=(0,l.deepClone)(t):r._data={},r._internalObserve(new d,r._data)}return(0,u["default"])(e,[{key:"observe",value:function(e){this._observers.push(e)}},{key:"find",value:function(e){var t=e.split(".");return this._findWithSplit(t)}},{key:"findBefore",value:function(e){var t={},r=e.split(".");return t.last=r.pop(),t.obj=this._findWithSplit(r),t}},{key:"_findWithSplit",value:function(e){var t=this._data;return e.forEach(function(e){t=t[e]}),t}},{key:"_fireEvent",value:function(e){this._observers.forEach(function(t){t(e)})}},{key:"_isObservable",value:function(e){return e.constructor===Object||e.constructor===Array}},{key:"_internalObserve",value:function(e,t){var r=this;if(r._isObservable(t)){var n=function(t){r._onChanges(e,t)};if(t.constructor===Object){Object.observe(t,n);for(var o in t)r._isObservable(t[o])&&r._internalObserve(e["new"](o),t[o])}else if(t.constructor===Array){Array.observe(t,n);for(var i in t)if(r._isObservable(t[i])){var s=e["new"](new p(t[i],i));r._internalObserve(s,t[i])}}}}},{key:"_onChanges",value:function(e,t){var r=this;for(var n in t){var o=t[n].object,i=void 0;if(o.constructor===Object&&(i=h.OBJECT),o.constructor===Array&&(i=h.ARRAY),"splice"===t[n].type)!function(){var s=t[n].index,a=e["new"](""+s),c=a.toString(),u=t[n].removed.length;if(0!==u){var f=t[n].removed;f.forEach(function(t,n){r._isObservable(t)&&e.removeIndex(s+n)}),r._fireEvent({cType:b.REMOVE,oType:i,field:c,data:u})}var d=t[n].addedCount;if(0!==d){var h=o.slice(s,s+d);h.forEach(function(t,n){if(r._isObservable(t)){var o=e["new"](new p(t,s+n));r._internalObserve(o,t)}}),r._fireEvent({cType:b.ADD,oType:i,field:c,data:(0,l.deepClone)(h)})}s!==o.length-1&&e.reIndexFrom(o)}();else{var s=e["new"](t[n].name),a=s.toString();if(-1!==a.indexOf("Symbol"))continue;var c=o[t[n].name];"update"===t[n].type&&this._fireEvent({cType:b.UPDATE,oType:i,field:a,data:(0,l.deepClone)(c)}),"add"===t[n].type&&(this._internalObserve(s,c),this._fireEvent({cType:b.ADD,oType:i,field:a,data:(0,l.deepClone)(c)})),"delete"===t[n].type&&this._fireEvent({cType:b.REMOVE,oType:i,field:a})}}}},{key:"data",get:function(){return this._data}}]),e}(),d=function(){function e(){(0,a["default"])(this,e),this._path=[],this._observables={}}return(0,u["default"])(e,[{key:"removeIndex",value:function(e){delete this._observables[e]}},{key:"reIndexFrom",value:function(e){var t=this;(0,i["default"])(this._observables).forEach(function(r){var n=t._observables[r],o=e.indexOf(n.obj);n.idx!=o&&(n.idx=o,delete t._observables[r],t._observables[o]=n)})}},{key:"new",value:function(e){e.constructor==p&&(this._observables[e.idx]=e);var t=this.clone();return t._path.push(e),t}},{key:"clone",value:function(){var t=new e;return this._path.forEach(function(e){t._path.push(e)}),t}},{key:"toString",value:function(){var e="";return this._path.forEach(function(t,r){0===r?e=t.toString():e+="."+t.toString()}),e}}]),e}(),p=function(){function e(t,r){(0,a["default"])(this,e),this.obj=t,this.idx=r}return(0,u["default"])(e,[{key:"toString",value:function(){return this.idx.toString()}}]),e}(),b=r.ChangeType={UPDATE:"update",ADD:"add",REMOVE:"remove"},h=r.ObjectType={OBJECT:"object",ARRAY:"array"};r["default"]=f},{"../utils/utils.js":100,"babel-runtime/core-js/object/keys":7,"babel-runtime/helpers/classCallCheck":11,"babel-runtime/helpers/createClass":12}],99:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(r,"__esModule",{value:!0});var o=e("babel-runtime/core-js/promise"),i=n(o),s=e("babel-runtime/helpers/classCallCheck"),a=n(s),c=e("babel-runtime/helpers/createClass"),u=n(c),l=e("./DataObjectReporter"),f=n(l),d=e("./DataObjectObserver"),p=n(d),b=e("./DataProvisional"),h=n(b),v=function(){function e(t,r,n){(0,a["default"])(this,e);var o=this;o._owner=t,o._bus=r,o._subURL=n.runtimeURL+"/sm",o._reporters={},o._observers={},o._provisionals={},r.addListener(t,function(e){if(e.from!==t)switch(console.log("Syncher-RCV: ",e),e.type){case"forward":o._onForward(e);break;case"create":o._onRemoteCreate(e);break;case"delete":o._onRemoteDelete(e)}})}return(0,u["default"])(e,[{key:"create",value:function(e,t,r){var n=this;r.reporter=n._owner,r.schema=e;var o={type:"create",from:n._owner,to:n._subURL,body:{schema:e,value:r,authorise:t}};return new i["default"](function(t,i){n._bus.postMessage(o,function(o){if(console.log("create-response: ",o),200===o.body.code){var s=o.body.resource,a=new f["default"](n,s,e,"on",r,o.body.childrenResources);n._reporters[s]=a,t(a)}else i(o.body.desc)})})}},{key:"subscribe",value:function(e,t){var r=this,n={type:"subscribe",from:r._owner,to:r._subURL,body:{schema:e,resource:t}};return new i["default"](function(o,i){r._bus.postMessage(n,function(n){console.log("subscribe-response: ",n);var s=r._provisionals[t];if(delete r._provisionals[t],s&&s._releaseListeners(),n.body.code<200)s=new h["default"](r._owner,t,r._bus,n.body.childrenResources),r._provisionals[t]=s;else if(200===n.body.code){var a=new p["default"](r,t,e,"on",n.body.value,s.children,n.body.version);r._observers[t]=a,o(a),s.apply(a)}else i(n.body.desc)})})}},{key:"onNotification",value:function(e){this._onNotificationHandler=e}},{key:"_onForward",value:function(e){var t=this,r=t._reporters[e.body.to];r._onForward(e)}},{key:"_onRemoteCreate",value:function(e){var t=this,r=e.from.slice(0,-13),n={type:e.type,from:e.body.source,url:r,schema:e.body.schema,value:e.body.value,identity:e.body.identity,ack:function(r){var n=200;r&&(n=r),t._bus.postMessage({id:e.id,type:"response",from:e.to,to:e.from,body:{code:n}})}};t._onNotificationHandler&&(console.log("NOTIFICATION-EVENT: ",n),t._onNotificationHandler(n))}},{key:"_onRemoteDelete",value:function(e){var t=this,r=e.body.resource,n=t._observers[r];if(n){var o={type:e.type,url:r,identity:e.body.identity,ack:function(r){var o=200;r&&(o=r),200===o&&n["delete"](),t._bus.postMessage({id:e.id,type:"response",from:e.to,to:e.from,body:{code:o,source:t._owner}})}};t._onNotificationHandler&&(console.log("NOTIFICATION-EVENT: ",o),t._onNotificationHandler(o))}else t._bus.postMessage({id:e.id,type:"response",from:e.to,to:e.from,body:{code:404,source:t._owner}})}},{key:"owner",get:function(){return this._owner}},{key:"reporters",get:function(){return this._reporters}},{key:"observers",get:function(){return this._observers}}]),e}();r["default"]=v,t.exports=r["default"]},{"./DataObjectObserver":95,"./DataObjectReporter":96,"./DataProvisional":97,"babel-runtime/core-js/promise":9,"babel-runtime/helpers/classCallCheck":11,"babel-runtime/helpers/createClass":12}],100:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function o(e){var t=/([a-zA-Z-]*):\/\/(?:\.)?([-a-zA-Z0-9@:%._\+~#=]{2,256})([-a-zA-Z0-9@:%._\+~#=\/]*)/gi,r="$1,$2,$3",n=e.replace(t,r).split(",");n[0]===e&&(n[0]="https",n[1]=e);var o={type:n[0],domain:n[1],identity:n[2]};return o}function i(e){return e?JSON.parse((0,a["default"])(e)):void 0}Object.defineProperty(r,"__esModule",{value:!0});var s=e("babel-runtime/core-js/json/stringify"),a=n(s);r.divideURL=o,r.deepClone=i},{"babel-runtime/core-js/json/stringify":2}]},{},[92])(92)});
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],3:[function(require,module,exports){
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */

/* More information about these options at jshint.com/docs/options */
/* jshint browser: true, camelcase: true, curly: true, devel: true,
   eqeqeq: true, forin: false, globalstrict: true, node: true,
   quotmark: single, undef: true, unused: strict */
/* global mozRTCIceCandidate, mozRTCPeerConnection, Promise,
mozRTCSessionDescription, webkitRTCPeerConnection, MediaStreamTrack,
MediaStream, RTCIceGatherer, RTCIceTransport, RTCDtlsTransport,
RTCRtpSender, RTCRtpReceiver*/
/* exported trace,requestUserMedia */

'use strict';

var getUserMedia = null;
var attachMediaStream = null;
var reattachMediaStream = null;
var webrtcDetectedBrowser = null;
var webrtcDetectedVersion = null;
var webrtcMinimumVersion = null;
var webrtcUtils = {
  log: function() {
    // suppress console.log output when being included as a module.
    if (typeof module !== 'undefined' ||
        typeof require === 'function' && typeof define === 'function') {
      return;
    }
    console.log.apply(console, arguments);
  },
  extractVersion: function(uastring, expr, pos) {
    var match = uastring.match(expr);
    return match && match.length >= pos && parseInt(match[pos], 10);
  }
};

function trace(text) {
  // This function is used for logging.
  if (text[text.length - 1] === '\n') {
    text = text.substring(0, text.length - 1);
  }
  if (window.performance) {
    var now = (window.performance.now() / 1000).toFixed(3);
    webrtcUtils.log(now + ': ' + text);
  } else {
    webrtcUtils.log(text);
  }
}

if (typeof window === 'object') {
  if (window.HTMLMediaElement &&
    !('srcObject' in window.HTMLMediaElement.prototype)) {
    // Shim the srcObject property, once, when HTMLMediaElement is found.
    Object.defineProperty(window.HTMLMediaElement.prototype, 'srcObject', {
      get: function() {
        // If prefixed srcObject property exists, return it.
        // Otherwise use the shimmed property, _srcObject
        return 'mozSrcObject' in this ? this.mozSrcObject : this._srcObject;
      },
      set: function(stream) {
        if ('mozSrcObject' in this) {
          this.mozSrcObject = stream;
        } else {
          // Use _srcObject as a private property for this shim
          this._srcObject = stream;
          // TODO: revokeObjectUrl(this.src) when !stream to release resources?
          this.src = URL.createObjectURL(stream);
        }
      }
    });
  }
  // Proxy existing globals
  getUserMedia = window.navigator && window.navigator.getUserMedia;
}

// Attach a media stream to an element.
attachMediaStream = function(element, stream) {
  element.srcObject = stream;
};

reattachMediaStream = function(to, from) {
  to.srcObject = from.srcObject;
};

if (typeof window === 'undefined' || !window.navigator) {
  webrtcUtils.log('This does not appear to be a browser');
  webrtcDetectedBrowser = 'not a browser';
} else if (navigator.mozGetUserMedia) {
  webrtcUtils.log('This appears to be Firefox');

  webrtcDetectedBrowser = 'firefox';

  // the detected firefox version.
  webrtcDetectedVersion = webrtcUtils.extractVersion(navigator.userAgent,
      /Firefox\/([0-9]+)\./, 1);

  // the minimum firefox version still supported by adapter.
  webrtcMinimumVersion = 31;

  // Shim for RTCPeerConnection on older versions.
  if (!window.RTCPeerConnection) {
    window.RTCPeerConnection = function(pcConfig, pcConstraints) {
      if (webrtcDetectedVersion < 38) {
        // .urls is not supported in FF < 38.
        // create RTCIceServers with a single url.
        if (pcConfig && pcConfig.iceServers) {
          var newIceServers = [];
          for (var i = 0; i < pcConfig.iceServers.length; i++) {
            var server = pcConfig.iceServers[i];
            if (server.hasOwnProperty('urls')) {
              for (var j = 0; j < server.urls.length; j++) {
                var newServer = {
                  url: server.urls[j]
                };
                if (server.urls[j].indexOf('turn') === 0) {
                  newServer.username = server.username;
                  newServer.credential = server.credential;
                }
                newIceServers.push(newServer);
              }
            } else {
              newIceServers.push(pcConfig.iceServers[i]);
            }
          }
          pcConfig.iceServers = newIceServers;
        }
      }
      return new mozRTCPeerConnection(pcConfig, pcConstraints); // jscs:ignore requireCapitalizedConstructors
    };
    window.RTCPeerConnection.prototype = mozRTCPeerConnection.prototype;

    // wrap static methods. Currently just generateCertificate.
    if (mozRTCPeerConnection.generateCertificate) {
      Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {
        get: function() {
          if (arguments.length) {
            return mozRTCPeerConnection.generateCertificate.apply(null,
                arguments);
          } else {
            return mozRTCPeerConnection.generateCertificate;
          }
        }
      });
    }

    window.RTCSessionDescription = mozRTCSessionDescription;
    window.RTCIceCandidate = mozRTCIceCandidate;
  }

  // getUserMedia constraints shim.
  getUserMedia = function(constraints, onSuccess, onError) {
    var constraintsToFF37 = function(c) {
      if (typeof c !== 'object' || c.require) {
        return c;
      }
      var require = [];
      Object.keys(c).forEach(function(key) {
        if (key === 'require' || key === 'advanced' || key === 'mediaSource') {
          return;
        }
        var r = c[key] = (typeof c[key] === 'object') ?
            c[key] : {ideal: c[key]};
        if (r.min !== undefined ||
            r.max !== undefined || r.exact !== undefined) {
          require.push(key);
        }
        if (r.exact !== undefined) {
          if (typeof r.exact === 'number') {
            r.min = r.max = r.exact;
          } else {
            c[key] = r.exact;
          }
          delete r.exact;
        }
        if (r.ideal !== undefined) {
          c.advanced = c.advanced || [];
          var oc = {};
          if (typeof r.ideal === 'number') {
            oc[key] = {min: r.ideal, max: r.ideal};
          } else {
            oc[key] = r.ideal;
          }
          c.advanced.push(oc);
          delete r.ideal;
          if (!Object.keys(r).length) {
            delete c[key];
          }
        }
      });
      if (require.length) {
        c.require = require;
      }
      return c;
    };
    if (webrtcDetectedVersion < 38) {
      webrtcUtils.log('spec: ' + JSON.stringify(constraints));
      if (constraints.audio) {
        constraints.audio = constraintsToFF37(constraints.audio);
      }
      if (constraints.video) {
        constraints.video = constraintsToFF37(constraints.video);
      }
      webrtcUtils.log('ff37: ' + JSON.stringify(constraints));
    }
    return navigator.mozGetUserMedia(constraints, onSuccess, onError);
  };

  navigator.getUserMedia = getUserMedia;

  // Shim for mediaDevices on older versions.
  if (!navigator.mediaDevices) {
    navigator.mediaDevices = {getUserMedia: requestUserMedia,
      addEventListener: function() { },
      removeEventListener: function() { }
    };
  }
  navigator.mediaDevices.enumerateDevices =
      navigator.mediaDevices.enumerateDevices || function() {
    return new Promise(function(resolve) {
      var infos = [
        {kind: 'audioinput', deviceId: 'default', label: '', groupId: ''},
        {kind: 'videoinput', deviceId: 'default', label: '', groupId: ''}
      ];
      resolve(infos);
    });
  };

  if (webrtcDetectedVersion < 41) {
    // Work around http://bugzil.la/1169665
    var orgEnumerateDevices =
        navigator.mediaDevices.enumerateDevices.bind(navigator.mediaDevices);
    navigator.mediaDevices.enumerateDevices = function() {
      return orgEnumerateDevices().then(undefined, function(e) {
        if (e.name === 'NotFoundError') {
          return [];
        }
        throw e;
      });
    };
  }
} else if (navigator.webkitGetUserMedia && window.webkitRTCPeerConnection) {
  webrtcUtils.log('This appears to be Chrome');

  webrtcDetectedBrowser = 'chrome';

  // the detected chrome version.
  webrtcDetectedVersion = webrtcUtils.extractVersion(navigator.userAgent,
      /Chrom(e|ium)\/([0-9]+)\./, 2);

  // the minimum chrome version still supported by adapter.
  webrtcMinimumVersion = 38;

  // The RTCPeerConnection object.
  window.RTCPeerConnection = function(pcConfig, pcConstraints) {
    // Translate iceTransportPolicy to iceTransports,
    // see https://code.google.com/p/webrtc/issues/detail?id=4869
    if (pcConfig && pcConfig.iceTransportPolicy) {
      pcConfig.iceTransports = pcConfig.iceTransportPolicy;
    }

    var pc = new webkitRTCPeerConnection(pcConfig, pcConstraints); // jscs:ignore requireCapitalizedConstructors
    var origGetStats = pc.getStats.bind(pc);
    pc.getStats = function(selector, successCallback, errorCallback) { // jshint ignore: line
      var self = this;
      var args = arguments;

      // If selector is a function then we are in the old style stats so just
      // pass back the original getStats format to avoid breaking old users.
      if (arguments.length > 0 && typeof selector === 'function') {
        return origGetStats(selector, successCallback);
      }

      var fixChromeStats = function(response) {
        var standardReport = {};
        var reports = response.result();
        reports.forEach(function(report) {
          var standardStats = {
            id: report.id,
            timestamp: report.timestamp,
            type: report.type
          };
          report.names().forEach(function(name) {
            standardStats[name] = report.stat(name);
          });
          standardReport[standardStats.id] = standardStats;
        });

        return standardReport;
      };

      if (arguments.length >= 2) {
        var successCallbackWrapper = function(response) {
          args[1](fixChromeStats(response));
        };

        return origGetStats.apply(this, [successCallbackWrapper, arguments[0]]);
      }

      // promise-support
      return new Promise(function(resolve, reject) {
        if (args.length === 1 && selector === null) {
          origGetStats.apply(self, [
              function(response) {
                resolve.apply(null, [fixChromeStats(response)]);
              }, reject]);
        } else {
          origGetStats.apply(self, [resolve, reject]);
        }
      });
    };

    return pc;
  };
  window.RTCPeerConnection.prototype = webkitRTCPeerConnection.prototype;

  // wrap static methods. Currently just generateCertificate.
  if (webkitRTCPeerConnection.generateCertificate) {
    Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {
      get: function() {
        if (arguments.length) {
          return webkitRTCPeerConnection.generateCertificate.apply(null,
              arguments);
        } else {
          return webkitRTCPeerConnection.generateCertificate;
        }
      }
    });
  }

  // add promise support
  ['createOffer', 'createAnswer'].forEach(function(method) {
    var nativeMethod = webkitRTCPeerConnection.prototype[method];
    webkitRTCPeerConnection.prototype[method] = function() {
      var self = this;
      if (arguments.length < 1 || (arguments.length === 1 &&
          typeof(arguments[0]) === 'object')) {
        var opts = arguments.length === 1 ? arguments[0] : undefined;
        return new Promise(function(resolve, reject) {
          nativeMethod.apply(self, [resolve, reject, opts]);
        });
      } else {
        return nativeMethod.apply(this, arguments);
      }
    };
  });

  ['setLocalDescription', 'setRemoteDescription',
      'addIceCandidate'].forEach(function(method) {
    var nativeMethod = webkitRTCPeerConnection.prototype[method];
    webkitRTCPeerConnection.prototype[method] = function() {
      var args = arguments;
      var self = this;
      return new Promise(function(resolve, reject) {
        nativeMethod.apply(self, [args[0],
            function() {
              resolve();
              if (args.length >= 2) {
                args[1].apply(null, []);
              }
            },
            function(err) {
              reject(err);
              if (args.length >= 3) {
                args[2].apply(null, [err]);
              }
            }]
          );
      });
    };
  });

  // getUserMedia constraints shim.
  var constraintsToChrome = function(c) {
    if (typeof c !== 'object' || c.mandatory || c.optional) {
      return c;
    }
    var cc = {};
    Object.keys(c).forEach(function(key) {
      if (key === 'require' || key === 'advanced' || key === 'mediaSource') {
        return;
      }
      var r = (typeof c[key] === 'object') ? c[key] : {ideal: c[key]};
      if (r.exact !== undefined && typeof r.exact === 'number') {
        r.min = r.max = r.exact;
      }
      var oldname = function(prefix, name) {
        if (prefix) {
          return prefix + name.charAt(0).toUpperCase() + name.slice(1);
        }
        return (name === 'deviceId') ? 'sourceId' : name;
      };
      if (r.ideal !== undefined) {
        cc.optional = cc.optional || [];
        var oc = {};
        if (typeof r.ideal === 'number') {
          oc[oldname('min', key)] = r.ideal;
          cc.optional.push(oc);
          oc = {};
          oc[oldname('max', key)] = r.ideal;
          cc.optional.push(oc);
        } else {
          oc[oldname('', key)] = r.ideal;
          cc.optional.push(oc);
        }
      }
      if (r.exact !== undefined && typeof r.exact !== 'number') {
        cc.mandatory = cc.mandatory || {};
        cc.mandatory[oldname('', key)] = r.exact;
      } else {
        ['min', 'max'].forEach(function(mix) {
          if (r[mix] !== undefined) {
            cc.mandatory = cc.mandatory || {};
            cc.mandatory[oldname(mix, key)] = r[mix];
          }
        });
      }
    });
    if (c.advanced) {
      cc.optional = (cc.optional || []).concat(c.advanced);
    }
    return cc;
  };

  getUserMedia = function(constraints, onSuccess, onError) {
    if (constraints.audio) {
      constraints.audio = constraintsToChrome(constraints.audio);
    }
    if (constraints.video) {
      constraints.video = constraintsToChrome(constraints.video);
    }
    webrtcUtils.log('chrome: ' + JSON.stringify(constraints));
    return navigator.webkitGetUserMedia(constraints, onSuccess, onError);
  };
  navigator.getUserMedia = getUserMedia;

  if (!navigator.mediaDevices) {
    navigator.mediaDevices = {getUserMedia: requestUserMedia,
                              enumerateDevices: function() {
      return new Promise(function(resolve) {
        var kinds = {audio: 'audioinput', video: 'videoinput'};
        return MediaStreamTrack.getSources(function(devices) {
          resolve(devices.map(function(device) {
            return {label: device.label,
                    kind: kinds[device.kind],
                    deviceId: device.id,
                    groupId: ''};
          }));
        });
      });
    }};
  }

  // A shim for getUserMedia method on the mediaDevices object.
  // TODO(KaptenJansson) remove once implemented in Chrome stable.
  if (!navigator.mediaDevices.getUserMedia) {
    navigator.mediaDevices.getUserMedia = function(constraints) {
      return requestUserMedia(constraints);
    };
  } else {
    // Even though Chrome 45 has navigator.mediaDevices and a getUserMedia
    // function which returns a Promise, it does not accept spec-style
    // constraints.
    var origGetUserMedia = navigator.mediaDevices.getUserMedia.
        bind(navigator.mediaDevices);
    navigator.mediaDevices.getUserMedia = function(c) {
      webrtcUtils.log('spec:   ' + JSON.stringify(c)); // whitespace for alignment
      c.audio = constraintsToChrome(c.audio);
      c.video = constraintsToChrome(c.video);
      webrtcUtils.log('chrome: ' + JSON.stringify(c));
      return origGetUserMedia(c);
    };
  }

  // Dummy devicechange event methods.
  // TODO(KaptenJansson) remove once implemented in Chrome stable.
  if (typeof navigator.mediaDevices.addEventListener === 'undefined') {
    navigator.mediaDevices.addEventListener = function() {
      webrtcUtils.log('Dummy mediaDevices.addEventListener called.');
    };
  }
  if (typeof navigator.mediaDevices.removeEventListener === 'undefined') {
    navigator.mediaDevices.removeEventListener = function() {
      webrtcUtils.log('Dummy mediaDevices.removeEventListener called.');
    };
  }

  // Attach a media stream to an element.
  attachMediaStream = function(element, stream) {
    if (webrtcDetectedVersion >= 43) {
      element.srcObject = stream;
    } else if (typeof element.src !== 'undefined') {
      element.src = URL.createObjectURL(stream);
    } else {
      webrtcUtils.log('Error attaching stream to element.');
    }
  };
  reattachMediaStream = function(to, from) {
    if (webrtcDetectedVersion >= 43) {
      to.srcObject = from.srcObject;
    } else {
      to.src = from.src;
    }
  };

} else if (navigator.mediaDevices && navigator.userAgent.match(
    /Edge\/(\d+).(\d+)$/)) {
  webrtcUtils.log('This appears to be Edge');
  webrtcDetectedBrowser = 'edge';

  webrtcDetectedVersion = webrtcUtils.extractVersion(navigator.userAgent,
      /Edge\/(\d+).(\d+)$/, 2);

  // The minimum version still supported by adapter.
  // This is the build number for Edge.
  webrtcMinimumVersion = 10547;

  if (window.RTCIceGatherer) {
    // Generate an alphanumeric identifier for cname or mids.
    // TODO: use UUIDs instead? https://gist.github.com/jed/982883
    var generateIdentifier = function() {
      return Math.random().toString(36).substr(2, 10);
    };

    // The RTCP CNAME used by all peerconnections from the same JS.
    var localCName = generateIdentifier();

    // SDP helpers - to be moved into separate module.
    var SDPUtils = {};

    // Splits SDP into lines, dealing with both CRLF and LF.
    SDPUtils.splitLines = function(blob) {
      return blob.trim().split('\n').map(function(line) {
        return line.trim();
      });
    };

    // Splits SDP into sessionpart and mediasections. Ensures CRLF.
    SDPUtils.splitSections = function(blob) {
      var parts = blob.split('\r\nm=');
      return parts.map(function(part, index) {
        return (index > 0 ? 'm=' + part : part).trim() + '\r\n';
      });
    };

    // Returns lines that start with a certain prefix.
    SDPUtils.matchPrefix = function(blob, prefix) {
      return SDPUtils.splitLines(blob).filter(function(line) {
        return line.indexOf(prefix) === 0;
      });
    };

    // Parses an ICE candidate line. Sample input:
    // candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8 rport 55996"
    SDPUtils.parseCandidate = function(line) {
      var parts;
      // Parse both variants.
      if (line.indexOf('a=candidate:') === 0) {
        parts = line.substring(12).split(' ');
      } else {
        parts = line.substring(10).split(' ');
      }

      var candidate = {
        foundation: parts[0],
        component: parts[1],
        protocol: parts[2].toLowerCase(),
        priority: parseInt(parts[3], 10),
        ip: parts[4],
        port: parseInt(parts[5], 10),
        // skip parts[6] == 'typ'
        type: parts[7]
      };

      for (var i = 8; i < parts.length; i += 2) {
        switch (parts[i]) {
          case 'raddr':
            candidate.relatedAddress = parts[i + 1];
            break;
          case 'rport':
            candidate.relatedPort = parseInt(parts[i + 1], 10);
            break;
          case 'tcptype':
            candidate.tcpType = parts[i + 1];
            break;
          default: // Unknown extensions are silently ignored.
            break;
        }
      }
      return candidate;
    };

    // Translates a candidate object into SDP candidate attribute.
    SDPUtils.writeCandidate = function(candidate) {
      var sdp = [];
      sdp.push(candidate.foundation);
      sdp.push(candidate.component);
      sdp.push(candidate.protocol.toUpperCase());
      sdp.push(candidate.priority);
      sdp.push(candidate.ip);
      sdp.push(candidate.port);

      var type = candidate.type;
      sdp.push('typ');
      sdp.push(type);
      if (type !== 'host' && candidate.relatedAddress &&
          candidate.relatedPort) {
        sdp.push('raddr');
        sdp.push(candidate.relatedAddress); // was: relAddr
        sdp.push('rport');
        sdp.push(candidate.relatedPort); // was: relPort
      }
      if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {
        sdp.push('tcptype');
        sdp.push(candidate.tcpType);
      }
      return 'candidate:' + sdp.join(' ');
    };

    // Parses an rtpmap line, returns RTCRtpCoddecParameters. Sample input:
    // a=rtpmap:111 opus/48000/2
    SDPUtils.parseRtpMap = function(line) {
      var parts = line.substr(9).split(' ');
      var parsed = {
        payloadType: parseInt(parts.shift(), 10) // was: id
      };

      parts = parts[0].split('/');

      parsed.name = parts[0];
      parsed.clockRate = parseInt(parts[1], 10); // was: clockrate
      parsed.numChannels = parts.length === 3 ? parseInt(parts[2], 10) : 1; // was: channels
      return parsed;
    };

    // Generate an a=rtpmap line from RTCRtpCodecCapability or RTCRtpCodecParameters.
    SDPUtils.writeRtpMap = function(codec) {
      var pt = codec.payloadType;
      if (codec.preferredPayloadType !== undefined) {
        pt = codec.preferredPayloadType;
      }
      return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate +
          (codec.numChannels !== 1 ? '/' + codec.numChannels : '') + '\r\n';
    };

    // Parses an ftmp line, returns dictionary. Sample input:
    // a=fmtp:96 vbr=on;cng=on
    // Also deals with vbr=on; cng=on
    SDPUtils.parseFmtp = function(line) {
      var parsed = {};
      var kv;
      var parts = line.substr(line.indexOf(' ') + 1).split(';');
      for (var j = 0; j < parts.length; j++) {
        kv = parts[j].trim().split('=');
        parsed[kv[0].trim()] = kv[1];
      }
      return parsed;
    };

    // Generates an a=ftmp line from RTCRtpCodecCapability or RTCRtpCodecParameters.
    SDPUtils.writeFtmp = function(codec) {
      var line = '';
      var pt = codec.payloadType;
      if (codec.preferredPayloadType !== undefined) {
        pt = codec.preferredPayloadType;
      }
      if (codec.parameters && codec.parameters.length) {
        var params = [];
        Object.keys(codec.parameters).forEach(function(param) {
          params.push(param + '=' + codec.parameters[param]);
        });
        line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\r\n';
      }
      return line;
    };

    // Parses an rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:
    // a=rtcp-fb:98 nack rpsi
    SDPUtils.parseRtcpFb = function(line) {
      var parts = line.substr(line.indexOf(' ') + 1).split(' ');
      return {
        type: parts.shift(),
        parameter: parts.join(' ')
      };
    };
    // Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.
    SDPUtils.writeRtcpFb = function(codec) {
      var lines = '';
      var pt = codec.payloadType;
      if (codec.preferredPayloadType !== undefined) {
        pt = codec.preferredPayloadType;
      }
      if (codec.rtcpFeedback && codec.rtcpFeedback.length) {
        // FIXME: special handling for trr-int?
        codec.rtcpFeedback.forEach(function(fb) {
          lines += 'a=rtcp-fb:' + pt + ' ' + fb.type + ' ' + fb.parameter +
              '\r\n';
        });
      }
      return lines;
    };

    // Parses an RFC 5576 ssrc media attribute. Sample input:
    // a=ssrc:3735928559 cname:something
    SDPUtils.parseSsrcMedia = function(line) {
      var sp = line.indexOf(' ');
      var parts = {
        ssrc: line.substr(7, sp - 7),
      };
      var colon = line.indexOf(':', sp);
      if (colon > -1) {
        parts.attribute = line.substr(sp + 1, colon - sp - 1);
        parts.value = line.substr(colon + 1);
      } else {
        parts.attribute = line.substr(sp + 1);
      }
      return parts;
    };

    // Extracts DTLS parameters from SDP media section or sessionpart.
    // FIXME: for consistency with other functions this should only
    //   get the fingerprint line as input. See also getIceParameters.
    SDPUtils.getDtlsParameters = function(mediaSection, sessionpart) {
      var lines = SDPUtils.splitLines(mediaSection);
      lines = lines.concat(SDPUtils.splitLines(sessionpart)); // Search in session part, too.
      var fpLine = lines.filter(function(line) {
        return line.indexOf('a=fingerprint:') === 0;
      })[0].substr(14);
      // Note: a=setup line is ignored since we use the 'auto' role.
      var dtlsParameters = {
        role: 'auto',
        fingerprints: [{
          algorithm: fpLine.split(' ')[0],
          value: fpLine.split(' ')[1]
        }]
      };
      return dtlsParameters;
    };

    // Serializes DTLS parameters to SDP.
    SDPUtils.writeDtlsParameters = function(params, setupType) {
      var sdp = 'a=setup:' + setupType + '\r\n';
      params.fingerprints.forEach(function(fp) {
        sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\r\n';
      });
      return sdp;
    };
    // Parses ICE information from SDP media section or sessionpart.
    // FIXME: for consistency with other functions this should only
    //   get the ice-ufrag and ice-pwd lines as input.
    SDPUtils.getIceParameters = function(mediaSection, sessionpart) {
      var lines = SDPUtils.splitLines(mediaSection);
      lines = lines.concat(SDPUtils.splitLines(sessionpart)); // Search in session part, too.
      var iceParameters = {
        usernameFragment: lines.filter(function(line) {
          return line.indexOf('a=ice-ufrag:') === 0;
        })[0].substr(12),
        password: lines.filter(function(line) {
          return line.indexOf('a=ice-pwd:') === 0;
        })[0].substr(10)
      };
      return iceParameters;
    };

    // Serializes ICE parameters to SDP.
    SDPUtils.writeIceParameters = function(params) {
      return 'a=ice-ufrag:' + params.usernameFragment + '\r\n' +
          'a=ice-pwd:' + params.password + '\r\n';
    };

    // Parses the SDP media section and returns RTCRtpParameters.
    SDPUtils.parseRtpParameters = function(mediaSection) {
      var description = {
        codecs: [],
        headerExtensions: [],
        fecMechanisms: [],
        rtcp: []
      };
      var lines = SDPUtils.splitLines(mediaSection);
      var mline = lines[0].split(' ');
      for (var i = 3; i < mline.length; i++) { // find all codecs from mline[3..]
        var pt = mline[i];
        var rtpmapline = SDPUtils.matchPrefix(
            mediaSection, 'a=rtpmap:' + pt + ' ')[0];
        if (rtpmapline) {
          var codec = SDPUtils.parseRtpMap(rtpmapline);
          var fmtps = SDPUtils.matchPrefix(
              mediaSection, 'a=fmtp:' + pt + ' ');
          // Only the first a=fmtp:<pt> is considered.
          codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};
          codec.rtcpFeedback = SDPUtils.matchPrefix(
              mediaSection, 'a=rtcp-fb:' + pt + ' ')
            .map(SDPUtils.parseRtcpFb);
          description.codecs.push(codec);
        }
      }
      // FIXME: parse headerExtensions, fecMechanisms and rtcp.
      return description;
    };

    // Generates parts of the SDP media section describing the capabilities / parameters.
    SDPUtils.writeRtpDescription = function(kind, caps) {
      var sdp = '';

      // Build the mline.
      sdp += 'm=' + kind + ' ';
      sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.
      sdp += ' UDP/TLS/RTP/SAVPF ';
      sdp += caps.codecs.map(function(codec) {
        if (codec.preferredPayloadType !== undefined) {
          return codec.preferredPayloadType;
        }
        return codec.payloadType;
      }).join(' ') + '\r\n';

      sdp += 'c=IN IP4 0.0.0.0\r\n';
      sdp += 'a=rtcp:9 IN IP4 0.0.0.0\r\n';

      // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.
      caps.codecs.forEach(function(codec) {
        sdp += SDPUtils.writeRtpMap(codec);
        sdp += SDPUtils.writeFtmp(codec);
        sdp += SDPUtils.writeRtcpFb(codec);
      });
      // FIXME: add headerExtensions, fecMechanismş and rtcp.
      sdp += 'a=rtcp-mux\r\n';
      return sdp;
    };

    SDPUtils.writeSessionBoilerplate = function() {
      // FIXME: sess-id should be an NTP timestamp.
      return 'v=0\r\n' +
          'o=thisisadapterortc 8169639915646943137 2 IN IP4 127.0.0.1\r\n' +
          's=-\r\n' +
          't=0 0\r\n';
    };

    SDPUtils.writeMediaSection = function(transceiver, caps, type, stream) {
      var sdp = SDPUtils.writeRtpDescription(transceiver.kind, caps);

      // Map ICE parameters (ufrag, pwd) to SDP.
      sdp += SDPUtils.writeIceParameters(
          transceiver.iceGatherer.getLocalParameters());

      // Map DTLS parameters to SDP.
      sdp += SDPUtils.writeDtlsParameters(
          transceiver.dtlsTransport.getLocalParameters(),
          type === 'offer' ? 'actpass' : 'active');

      sdp += 'a=mid:' + transceiver.mid + '\r\n';

      if (transceiver.rtpSender && transceiver.rtpReceiver) {
        sdp += 'a=sendrecv\r\n';
      } else if (transceiver.rtpSender) {
        sdp += 'a=sendonly\r\n';
      } else if (transceiver.rtpReceiver) {
        sdp += 'a=recvonly\r\n';
      } else {
        sdp += 'a=inactive\r\n';
      }

      // FIXME: for RTX there might be multiple SSRCs. Not implemented in Edge yet.
      if (transceiver.rtpSender) {
        var msid = 'msid:' + stream.id + ' ' +
            transceiver.rtpSender.track.id + '\r\n';
        sdp += 'a=' + msid;
        sdp += 'a=ssrc:' + transceiver.sendSsrc + ' ' + msid;
      }
      // FIXME: this should be written by writeRtpDescription.
      sdp += 'a=ssrc:' + transceiver.sendSsrc + ' cname:' +
          localCName + '\r\n';
      return sdp;
    };

    // Gets the direction from the mediaSection or the sessionpart.
    SDPUtils.getDirection = function(mediaSection, sessionpart) {
      // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.
      var lines = SDPUtils.splitLines(mediaSection);
      for (var i = 0; i < lines.length; i++) {
        switch (lines[i]) {
          case 'a=sendrecv':
          case 'a=sendonly':
          case 'a=recvonly':
          case 'a=inactive':
            return lines[i].substr(2);
        }
      }
      if (sessionpart) {
        return SDPUtils.getDirection(sessionpart);
      }
      return 'sendrecv';
    };

    // ORTC defines an RTCIceCandidate object but no constructor.
    // Not implemented in Edge.
    if (!window.RTCIceCandidate) {
      window.RTCIceCandidate = function(args) {
        return args;
      };
    }
    // ORTC does not have a session description object but
    // other browsers (i.e. Chrome) that will support both PC and ORTC
    // in the future might have this defined already.
    if (!window.RTCSessionDescription) {
      window.RTCSessionDescription = function(args) {
        return args;
      };
    }

    window.RTCPeerConnection = function(config) {
      var self = this;

      this.onicecandidate = null;
      this.onaddstream = null;
      this.onremovestream = null;
      this.onsignalingstatechange = null;
      this.oniceconnectionstatechange = null;
      this.onnegotiationneeded = null;
      this.ondatachannel = null;

      this.localStreams = [];
      this.remoteStreams = [];
      this.getLocalStreams = function() { return self.localStreams; };
      this.getRemoteStreams = function() { return self.remoteStreams; };

      this.localDescription = new RTCSessionDescription({
        type: '',
        sdp: ''
      });
      this.remoteDescription = new RTCSessionDescription({
        type: '',
        sdp: ''
      });
      this.signalingState = 'stable';
      this.iceConnectionState = 'new';

      this.iceOptions = {
        gatherPolicy: 'all',
        iceServers: []
      };
      if (config && config.iceTransportPolicy) {
        switch (config.iceTransportPolicy) {
          case 'all':
          case 'relay':
            this.iceOptions.gatherPolicy = config.iceTransportPolicy;
            break;
          case 'none':
            // FIXME: remove once implementation and spec have added this.
            throw new TypeError('iceTransportPolicy "none" not supported');
        }
      }
      if (config && config.iceServers) {
        // Edge does not like
        // 1) stun:
        // 2) turn: that does not have all of turn:host:port?transport=udp
        // 3) an array of urls
        config.iceServers.forEach(function(server) {
          if (server.urls) {
            var url;
            if (typeof(server.urls) === 'string') {
              url = server.urls;
            } else {
              url = server.urls[0];
            }
            if (url.indexOf('transport=udp') !== -1) {
              self.iceServers.push({
                username: server.username,
                credential: server.credential,
                urls: url
              });
            }
          }
        });
      }

      // per-track iceGathers, iceTransports, dtlsTransports, rtpSenders, ...
      // everything that is needed to describe a SDP m-line.
      this.transceivers = [];

      // since the iceGatherer is currently created in createOffer but we
      // must not emit candidates until after setLocalDescription we buffer
      // them in this array.
      this._localIceCandidatesBuffer = [];
    };

    window.RTCPeerConnection.prototype._emitBufferedCandidates = function() {
      var self = this;
      // FIXME: need to apply ice candidates in a way which is async but in-order
      this._localIceCandidatesBuffer.forEach(function(event) {
        if (self.onicecandidate !== null) {
          self.onicecandidate(event);
        }
      });
      this._localIceCandidatesBuffer = [];
    };

    window.RTCPeerConnection.prototype.addStream = function(stream) {
      // Clone is necessary for local demos mostly, attaching directly
      // to two different senders does not work (build 10547).
      this.localStreams.push(stream.clone());
      this._maybeFireNegotiationNeeded();
    };

    window.RTCPeerConnection.prototype.removeStream = function(stream) {
      var idx = this.localStreams.indexOf(stream);
      if (idx > -1) {
        this.localStreams.splice(idx, 1);
        this._maybeFireNegotiationNeeded();
      }
    };

    // Determines the intersection of local and remote capabilities.
    window.RTCPeerConnection.prototype._getCommonCapabilities =
        function(localCapabilities, remoteCapabilities) {
      var commonCapabilities = {
        codecs: [],
        headerExtensions: [],
        fecMechanisms: []
      };
      localCapabilities.codecs.forEach(function(lCodec) {
        for (var i = 0; i < remoteCapabilities.codecs.length; i++) {
          var rCodec = remoteCapabilities.codecs[i];
          if (lCodec.name.toLowerCase() === rCodec.name.toLowerCase() &&
              lCodec.clockRate === rCodec.clockRate &&
              lCodec.numChannels === rCodec.numChannels) {
            // push rCodec so we reply with offerer payload type
            commonCapabilities.codecs.push(rCodec);

            // FIXME: also need to determine intersection between
            // .rtcpFeedback and .parameters
            break;
          }
        }
      });

      localCapabilities.headerExtensions.forEach(function(lHeaderExtension) {
        for (var i = 0; i < remoteCapabilities.headerExtensions.length; i++) {
          var rHeaderExtension = remoteCapabilities.headerExtensions[i];
          if (lHeaderExtension.uri === rHeaderExtension.uri) {
            commonCapabilities.headerExtensions.push(rHeaderExtension);
            break;
          }
        }
      });

      // FIXME: fecMechanisms
      return commonCapabilities;
    };

    // Create ICE gatherer, ICE transport and DTLS transport.
    window.RTCPeerConnection.prototype._createIceAndDtlsTransports =
        function(mid, sdpMLineIndex) {
      var self = this;
      var iceGatherer = new RTCIceGatherer(self.iceOptions);
      var iceTransport = new RTCIceTransport(iceGatherer);
      iceGatherer.onlocalcandidate = function(evt) {
        var event = {};
        event.candidate = {sdpMid: mid, sdpMLineIndex: sdpMLineIndex};

        var cand = evt.candidate;
        // Edge emits an empty object for RTCIceCandidateComplete‥
        if (!cand || Object.keys(cand).length === 0) {
          // polyfill since RTCIceGatherer.state is not implemented in Edge 10547 yet.
          if (iceGatherer.state === undefined) {
            iceGatherer.state = 'completed';
          }

          // Emit a candidate with type endOfCandidates to make the samples work.
          // Edge requires addIceCandidate with this empty candidate to start checking.
          // The real solution is to signal end-of-candidates to the other side when
          // getting the null candidate but some apps (like the samples) don't do that.
          event.candidate.candidate =
              'candidate:1 1 udp 1 0.0.0.0 9 typ endOfCandidates';
        } else {
          // RTCIceCandidate doesn't have a component, needs to be added
          cand.component = iceTransport.component === 'RTCP' ? 2 : 1;
          event.candidate.candidate = SDPUtils.writeCandidate(cand);
        }

        var complete = self.transceivers.every(function(transceiver) {
          return transceiver.iceGatherer &&
              transceiver.iceGatherer.state === 'completed';
        });
        // FIXME: update .localDescription with candidate and (potentially) end-of-candidates.
        //     To make this harder, the gatherer might emit candidates before localdescription
        //     is set. To make things worse, gather.getLocalCandidates still errors in
        //     Edge 10547 when no candidates have been gathered yet.

        if (self.onicecandidate !== null) {
          // Emit candidate if localDescription is set.
          // Also emits null candidate when all gatherers are complete.
          if (self.localDescription && self.localDescription.type === '') {
            self._localIceCandidatesBuffer.push(event);
            if (complete) {
              self._localIceCandidatesBuffer.push({});
            }
          } else {
            self.onicecandidate(event);
            if (complete) {
              self.onicecandidate({});
            }
          }
        }
      };
      iceTransport.onicestatechange = function() {
        self._updateConnectionState();
      };

      var dtlsTransport = new RTCDtlsTransport(iceTransport);
      dtlsTransport.ondtlsstatechange = function() {
        self._updateConnectionState();
      };
      dtlsTransport.onerror = function() {
        // onerror does not set state to failed by itself.
        dtlsTransport.state = 'failed';
        self._updateConnectionState();
      };

      return {
        iceGatherer: iceGatherer,
        iceTransport: iceTransport,
        dtlsTransport: dtlsTransport
      };
    };

    // Start the RTP Sender and Receiver for a transceiver.
    window.RTCPeerConnection.prototype._transceive = function(transceiver,
        send, recv) {
      var params = this._getCommonCapabilities(transceiver.localCapabilities,
          transceiver.remoteCapabilities);
      if (send && transceiver.rtpSender) {
        params.encodings = [{
          ssrc: transceiver.sendSsrc
        }];
        params.rtcp = {
          cname: localCName,
          ssrc: transceiver.recvSsrc
        };
        transceiver.rtpSender.send(params);
      }
      if (recv && transceiver.rtpReceiver) {
        params.encodings = [{
          ssrc: transceiver.recvSsrc
        }];
        params.rtcp = {
          cname: transceiver.cname,
          ssrc: transceiver.sendSsrc
        };
        transceiver.rtpReceiver.receive(params);
      }
    };

    window.RTCPeerConnection.prototype.setLocalDescription =
        function(description) {
      var self = this;
      if (description.type === 'offer') {
        if (!this._pendingOffer) {
        } else {
          this.transceivers = this._pendingOffer;
          delete this._pendingOffer;
        }
      } else if (description.type === 'answer') {
        var sections = SDPUtils.splitSections(self.remoteDescription.sdp);
        var sessionpart = sections.shift();
        sections.forEach(function(mediaSection, sdpMLineIndex) {
          var transceiver = self.transceivers[sdpMLineIndex];
          var iceGatherer = transceiver.iceGatherer;
          var iceTransport = transceiver.iceTransport;
          var dtlsTransport = transceiver.dtlsTransport;
          var localCapabilities = transceiver.localCapabilities;
          var remoteCapabilities = transceiver.remoteCapabilities;
          var rejected = mediaSection.split('\n', 1)[0]
              .split(' ', 2)[1] === '0';

          if (!rejected) {
            var remoteIceParameters = SDPUtils.getIceParameters(mediaSection,
                sessionpart);
            iceTransport.start(iceGatherer, remoteIceParameters, 'controlled');

            var remoteDtlsParameters = SDPUtils.getDtlsParameters(mediaSection,
              sessionpart);
            dtlsTransport.start(remoteDtlsParameters);

            // Calculate intersection of capabilities.
            var params = self._getCommonCapabilities(localCapabilities,
                remoteCapabilities);

            // Start the RTCRtpSender. The RTCRtpReceiver for this transceiver
            // has already been started in setRemoteDescription.
            self._transceive(transceiver,
                params.codecs.length > 0,
                false);
          }
        });
      }

      this.localDescription = description;
      switch (description.type) {
        case 'offer':
          this._updateSignalingState('have-local-offer');
          break;
        case 'answer':
          this._updateSignalingState('stable');
          break;
        default:
          throw new TypeError('unsupported type "' + description.type + '"');
      }

      // If a success callback was provided, emit ICE candidates after it has been
      // executed. Otherwise, emit callback after the Promise is resolved.
      var hasCallback = arguments.length > 1 &&
        typeof arguments[1] === 'function';
      if (hasCallback) {
        var cb = arguments[1];
        window.setTimeout(function() {
          cb();
          self._emitBufferedCandidates();
        }, 0);
      }
      var p = Promise.resolve();
      p.then(function() {
        if (!hasCallback) {
          window.setTimeout(self._emitBufferedCandidates.bind(self), 0);
        }
      });
      return p;
    };

    window.RTCPeerConnection.prototype.setRemoteDescription =
        function(description) {
      var self = this;
      var stream = new MediaStream();
      var sections = SDPUtils.splitSections(description.sdp);
      var sessionpart = sections.shift();
      sections.forEach(function(mediaSection, sdpMLineIndex) {
        var lines = SDPUtils.splitLines(mediaSection);
        var mline = lines[0].substr(2).split(' ');
        var kind = mline[0];
        var rejected = mline[1] === '0';
        var direction = SDPUtils.getDirection(mediaSection, sessionpart);

        var transceiver;
        var iceGatherer;
        var iceTransport;
        var dtlsTransport;
        var rtpSender;
        var rtpReceiver;
        var sendSsrc;
        var recvSsrc;
        var localCapabilities;

        // FIXME: ensure the mediaSection has rtcp-mux set.
        var remoteCapabilities = SDPUtils.parseRtpParameters(mediaSection);
        var remoteIceParameters;
        var remoteDtlsParameters;
        if (!rejected) {
          remoteIceParameters = SDPUtils.getIceParameters(mediaSection,
              sessionpart);
          remoteDtlsParameters = SDPUtils.getDtlsParameters(mediaSection,
              sessionpart);
        }
        var mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:')[0].substr(6);

        var cname;
        // Gets the first SSRC. Note that with RTX there might be multiple SSRCs.
        var remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')
            .map(function(line) {
              return SDPUtils.parseSsrcMedia(line);
            })
            .filter(function(obj) {
              return obj.attribute === 'cname';
            })[0];
        if (remoteSsrc) {
          recvSsrc = parseInt(remoteSsrc.ssrc, 10);
          cname = remoteSsrc.value;
        }

        if (description.type === 'offer') {
          var transports = self._createIceAndDtlsTransports(mid, sdpMLineIndex);

          localCapabilities = RTCRtpReceiver.getCapabilities(kind);
          sendSsrc = (2 * sdpMLineIndex + 2) * 1001;

          rtpReceiver = new RTCRtpReceiver(transports.dtlsTransport, kind);

          // FIXME: not correct when there are multiple streams but that is
          // not currently supported in this shim.
          stream.addTrack(rtpReceiver.track);

          // FIXME: look at direction.
          if (self.localStreams.length > 0 &&
              self.localStreams[0].getTracks().length >= sdpMLineIndex) {
            // FIXME: actually more complicated, needs to match types etc
            var localtrack = self.localStreams[0].getTracks()[sdpMLineIndex];
            rtpSender = new RTCRtpSender(localtrack, transports.dtlsTransport);
          }

          self.transceivers[sdpMLineIndex] = {
            iceGatherer: transports.iceGatherer,
            iceTransport: transports.iceTransport,
            dtlsTransport: transports.dtlsTransport,
            localCapabilities: localCapabilities,
            remoteCapabilities: remoteCapabilities,
            rtpSender: rtpSender,
            rtpReceiver: rtpReceiver,
            kind: kind,
            mid: mid,
            cname: cname,
            sendSsrc: sendSsrc,
            recvSsrc: recvSsrc
          };
          // Start the RTCRtpReceiver now. The RTPSender is started in setLocalDescription.
          self._transceive(self.transceivers[sdpMLineIndex],
              false,
              direction === 'sendrecv' || direction === 'sendonly');
        } else if (description.type === 'answer' && !rejected) {
          transceiver = self.transceivers[sdpMLineIndex];
          iceGatherer = transceiver.iceGatherer;
          iceTransport = transceiver.iceTransport;
          dtlsTransport = transceiver.dtlsTransport;
          rtpSender = transceiver.rtpSender;
          rtpReceiver = transceiver.rtpReceiver;
          sendSsrc = transceiver.sendSsrc;
          //recvSsrc = transceiver.recvSsrc;
          localCapabilities = transceiver.localCapabilities;

          self.transceivers[sdpMLineIndex].recvSsrc = recvSsrc;
          self.transceivers[sdpMLineIndex].remoteCapabilities =
              remoteCapabilities;
          self.transceivers[sdpMLineIndex].cname = cname;

          iceTransport.start(iceGatherer, remoteIceParameters, 'controlling');
          dtlsTransport.start(remoteDtlsParameters);

          self._transceive(transceiver,
              direction === 'sendrecv' || direction === 'recvonly',
              direction === 'sendrecv' || direction === 'sendonly');

          if (rtpReceiver &&
              (direction === 'sendrecv' || direction === 'sendonly')) {
            stream.addTrack(rtpReceiver.track);
          } else {
            // FIXME: actually the receiver should be created later.
            delete transceiver.rtpReceiver;
          }
        }
      });

      this.remoteDescription = description;
      switch (description.type) {
        case 'offer':
          this._updateSignalingState('have-remote-offer');
          break;
        case 'answer':
          this._updateSignalingState('stable');
          break;
        default:
          throw new TypeError('unsupported type "' + description.type + '"');
      }
      window.setTimeout(function() {
        if (self.onaddstream !== null && stream.getTracks().length) {
          self.remoteStreams.push(stream);
          window.setTimeout(function() {
            self.onaddstream({stream: stream});
          }, 0);
        }
      }, 0);
      if (arguments.length > 1 && typeof arguments[1] === 'function') {
        window.setTimeout(arguments[1], 0);
      }
      return Promise.resolve();
    };

    window.RTCPeerConnection.prototype.close = function() {
      this.transceivers.forEach(function(transceiver) {
        /* not yet
        if (transceiver.iceGatherer) {
          transceiver.iceGatherer.close();
        }
        */
        if (transceiver.iceTransport) {
          transceiver.iceTransport.stop();
        }
        if (transceiver.dtlsTransport) {
          transceiver.dtlsTransport.stop();
        }
        if (transceiver.rtpSender) {
          transceiver.rtpSender.stop();
        }
        if (transceiver.rtpReceiver) {
          transceiver.rtpReceiver.stop();
        }
      });
      // FIXME: clean up tracks, local streams, remote streams, etc
      this._updateSignalingState('closed');
    };

    // Update the signaling state.
    window.RTCPeerConnection.prototype._updateSignalingState =
        function(newState) {
      this.signalingState = newState;
      if (this.onsignalingstatechange !== null) {
        this.onsignalingstatechange();
      }
    };

    // Determine whether to fire the negotiationneeded event.
    window.RTCPeerConnection.prototype._maybeFireNegotiationNeeded =
        function() {
      // Fire away (for now).
      if (this.onnegotiationneeded !== null) {
        this.onnegotiationneeded();
      }
    };

    // Update the connection state.
    window.RTCPeerConnection.prototype._updateConnectionState =
        function() {
      var self = this;
      var newState;
      var states = {
        'new': 0,
        closed: 0,
        connecting: 0,
        checking: 0,
        connected: 0,
        completed: 0,
        failed: 0
      };
      this.transceivers.forEach(function(transceiver) {
        states[transceiver.iceTransport.state]++;
        states[transceiver.dtlsTransport.state]++;
      });
      // ICETransport.completed and connected are the same for this purpose.
      states.connected += states.completed;

      newState = 'new';
      if (states.failed > 0) {
        newState = 'failed';
      } else if (states.connecting > 0 || states.checking > 0) {
        newState = 'connecting';
      } else if (states.disconnected > 0) {
        newState = 'disconnected';
      } else if (states.new > 0) {
        newState = 'new';
      } else if (states.connecting > 0 || states.completed > 0) {
        newState = 'connected';
      }

      if (newState !== self.iceConnectionState) {
        self.iceConnectionState = newState;
        if (this.oniceconnectionstatechange !== null) {
          this.oniceconnectionstatechange();
        }
      }
    };

    window.RTCPeerConnection.prototype.createOffer = function() {
      var self = this;
      if (this._pendingOffer) {
        throw new Error('createOffer called while there is a pending offer.');
      }
      var offerOptions;
      if (arguments.length === 1 && typeof arguments[0] !== 'function') {
        offerOptions = arguments[0];
      } else if (arguments.length === 3) {
        offerOptions = arguments[2];
      }

      var tracks = [];
      var numAudioTracks = 0;
      var numVideoTracks = 0;
      // Default to sendrecv.
      if (this.localStreams.length) {
        numAudioTracks = this.localStreams[0].getAudioTracks().length;
        numVideoTracks = this.localStreams[0].getVideoTracks().length;
      }
      // Determine number of audio and video tracks we need to send/recv.
      if (offerOptions) {
        // Reject Chrome legacy constraints.
        if (offerOptions.mandatory || offerOptions.optional) {
          throw new TypeError(
              'Legacy mandatory/optional constraints not supported.');
        }
        if (offerOptions.offerToReceiveAudio !== undefined) {
          numAudioTracks = offerOptions.offerToReceiveAudio;
        }
        if (offerOptions.offerToReceiveVideo !== undefined) {
          numVideoTracks = offerOptions.offerToReceiveVideo;
        }
      }
      if (this.localStreams.length) {
        // Push local streams.
        this.localStreams[0].getTracks().forEach(function(track) {
          tracks.push({
            kind: track.kind,
            track: track,
            wantReceive: track.kind === 'audio' ?
                numAudioTracks > 0 : numVideoTracks > 0
          });
          if (track.kind === 'audio') {
            numAudioTracks--;
          } else if (track.kind === 'video') {
            numVideoTracks--;
          }
        });
      }
      // Create M-lines for recvonly streams.
      while (numAudioTracks > 0 || numVideoTracks > 0) {
        if (numAudioTracks > 0) {
          tracks.push({
            kind: 'audio',
            wantReceive: true
          });
          numAudioTracks--;
        }
        if (numVideoTracks > 0) {
          tracks.push({
            kind: 'video',
            wantReceive: true
          });
          numVideoTracks--;
        }
      }

      var sdp = SDPUtils.writeSessionBoilerplate();
      var transceivers = [];
      tracks.forEach(function(mline, sdpMLineIndex) {
        // For each track, create an ice gatherer, ice transport, dtls transport,
        // potentially rtpsender and rtpreceiver.
        var track = mline.track;
        var kind = mline.kind;
        var mid = generateIdentifier();

        var transports = self._createIceAndDtlsTransports(mid, sdpMLineIndex);

        var localCapabilities = RTCRtpSender.getCapabilities(kind);
        var rtpSender;
        var rtpReceiver;

        // generate an ssrc now, to be used later in rtpSender.send
        var sendSsrc = (2 * sdpMLineIndex + 1) * 1001;
        if (track) {
          rtpSender = new RTCRtpSender(track, transports.dtlsTransport);
        }

        if (mline.wantReceive) {
          rtpReceiver = new RTCRtpReceiver(transports.dtlsTransport, kind);
        }

        transceivers[sdpMLineIndex] = {
          iceGatherer: transports.iceGatherer,
          iceTransport: transports.iceTransport,
          dtlsTransport: transports.dtlsTransport,
          localCapabilities: localCapabilities,
          remoteCapabilities: null,
          rtpSender: rtpSender,
          rtpReceiver: rtpReceiver,
          kind: kind,
          mid: mid,
          sendSsrc: sendSsrc,
          recvSsrc: null
        };
        var transceiver = transceivers[sdpMLineIndex];
        sdp += SDPUtils.writeMediaSection(transceiver,
            transceiver.localCapabilities, 'offer', self.localStreams[0]);
      });

      this._pendingOffer = transceivers;
      var desc = new RTCSessionDescription({
        type: 'offer',
        sdp: sdp
      });
      if (arguments.length && typeof arguments[0] === 'function') {
        window.setTimeout(arguments[0], 0, desc);
      }
      return Promise.resolve(desc);
    };

    window.RTCPeerConnection.prototype.createAnswer = function() {
      var self = this;
      var answerOptions;
      if (arguments.length === 1 && typeof arguments[0] !== 'function') {
        answerOptions = arguments[0];
      } else if (arguments.length === 3) {
        answerOptions = arguments[2];
      }

      var sdp = SDPUtils.writeSessionBoilerplate();
      this.transceivers.forEach(function(transceiver) {
        // Calculate intersection of capabilities.
        var commonCapabilities = self._getCommonCapabilities(
            transceiver.localCapabilities,
            transceiver.remoteCapabilities);

        sdp += SDPUtils.writeMediaSection(transceiver, commonCapabilities,
            'answer', self.localStreams[0]);
      });

      var desc = new RTCSessionDescription({
        type: 'answer',
        sdp: sdp
      });
      if (arguments.length && typeof arguments[0] === 'function') {
        window.setTimeout(arguments[0], 0, desc);
      }
      return Promise.resolve(desc);
    };

    window.RTCPeerConnection.prototype.addIceCandidate = function(candidate) {
      var mLineIndex = candidate.sdpMLineIndex;
      if (candidate.sdpMid) {
        for (var i = 0; i < this.transceivers.length; i++) {
          if (this.transceivers[i].mid === candidate.sdpMid) {
            mLineIndex = i;
            break;
          }
        }
      }
      var transceiver = this.transceivers[mLineIndex];
      if (transceiver) {
        var cand = Object.keys(candidate.candidate).length > 0 ?
            SDPUtils.parseCandidate(candidate.candidate) : {};
        // Ignore Chrome's invalid candidates since Edge does not like them.
        if (cand.protocol === 'tcp' && cand.port === 0) {
          return;
        }
        // Ignore RTCP candidates, we assume RTCP-MUX.
        if (cand.component !== '1') {
          return;
        }
        // A dirty hack to make samples work.
        if (cand.type === 'endOfCandidates') {
          cand = {};
        }
        transceiver.iceTransport.addRemoteCandidate(cand);
      }
      if (arguments.length > 1 && typeof arguments[1] === 'function') {
        window.setTimeout(arguments[1], 0);
      }
      return Promise.resolve();
    };

    window.RTCPeerConnection.prototype.getStats = function() {
      var promises = [];
      this.transceivers.forEach(function(transceiver) {
        ['rtpSender', 'rtpReceiver', 'iceGatherer', 'iceTransport',
            'dtlsTransport'].forEach(function(method) {
          if (transceiver[method]) {
            promises.push(transceiver[method].getStats());
          }
        });
      });
      var cb = arguments.length > 1 && typeof arguments[1] === 'function' &&
          arguments[1];
      return new Promise(function(resolve) {
        var results = {};
        Promise.all(promises).then(function(res) {
          res.forEach(function(result) {
            Object.keys(result).forEach(function(id) {
              results[id] = result[id];
            });
          });
          if (cb) {
            window.setTimeout(cb, 0, results);
          }
          resolve(results);
        });
      });
    };
  }
} else {
  webrtcUtils.log('Browser does not appear to be WebRTC-capable');
}

// Polyfill ontrack on browsers that don't yet have it
if (typeof window === 'object' && window.RTCPeerConnection && !('ontrack' in
    window.RTCPeerConnection.prototype)) {
  Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {
    get: function() { return this._ontrack; },
    set: function(f) {
      var self = this;
      if (this._ontrack) {
        this.removeEventListener('track', this._ontrack);
        this.removeEventListener('addstream', this._ontrackpoly);
      }
      this.addEventListener('track', this._ontrack = f);
      this.addEventListener('addstream', this._ontrackpoly = function(e) {
        if (webrtcDetectedBrowser === 'chrome') {
          // onaddstream does not fire when a track is added to an existing stream.
          // but stream.onaddtrack is implemented so we use thたt
          e.stream.addEventListener('addtrack', function(te) {
            var event = new Event('track');
            event.track = te.track;
            event.receiver = {track: te.track};
            event.streams = [e.stream];
            self.dispatchEvent(event);
          });
        }
        e.stream.getTracks().forEach(function(track) {
          var event = new Event('track');
          event.track = track;
          event.receiver = {track: track};
          event.streams = [e.stream];
          this.dispatchEvent(event);
        }.bind(this));
      }.bind(this));
    }
  });
}

// Returns the result of getUserMedia as a Promise.
function requestUserMedia(constraints) {
  return new Promise(function(resolve, reject) {
    getUserMedia(constraints, resolve, reject);
  });
}

var webrtcTesting = {};
try {
  Object.defineProperty(webrtcTesting, 'version', {
    set: function(version) {
      webrtcDetectedVersion = version;
    }
  });
} catch (e) {}

if (typeof module !== 'undefined') {
  var RTCPeerConnection;
  var RTCIceCandidate;
  var RTCSessionDescription;
  if (typeof window !== 'undefined') {
    RTCPeerConnection = window.RTCPeerConnection;
    RTCIceCandidate = window.RTCIceCandidate;
    RTCSessionDescription = window.RTCSessionDescription;
  }
  module.exports = {
    RTCPeerConnection: RTCPeerConnection,
    RTCIceCandidate: RTCIceCandidate,
    RTCSessionDescription: RTCSessionDescription,
    getUserMedia: getUserMedia,
    attachMediaStream: attachMediaStream,
    reattachMediaStream: reattachMediaStream,
    webrtcDetectedBrowser: webrtcDetectedBrowser,
    webrtcDetectedVersion: webrtcDetectedVersion,
    webrtcMinimumVersion: webrtcMinimumVersion,
    webrtcTesting: webrtcTesting,
    webrtcUtils: webrtcUtils
    //requestUserMedia: not exposed on purpose.
    //trace: not exposed on purpose.
  };
} else if ((typeof require === 'function') && (typeof define === 'function')) {
  // Expose objects and functions when RequireJS is doing the loading.
  define([], function() {
    return {
      RTCPeerConnection: window.RTCPeerConnection,
      RTCIceCandidate: window.RTCIceCandidate,
      RTCSessionDescription: window.RTCSessionDescription,
      getUserMedia: getUserMedia,
      attachMediaStream: attachMediaStream,
      reattachMediaStream: reattachMediaStream,
      webrtcDetectedBrowser: webrtcDetectedBrowser,
      webrtcDetectedVersion: webrtcDetectedVersion,
      webrtcMinimumVersion: webrtcMinimumVersion,
      webrtcTesting: webrtcTesting,
      webrtcUtils: webrtcUtils
      //requestUserMedia: not exposed on purpose.
      //trace: not exposed on purpose.
    };
  });
}

},{}],4:[function(require,module,exports){
'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value" in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();require('webrtc-adapter-test');var _EventEmitter2=require('../utils/EventEmitter');var _EventEmitter3=_interopRequireDefault(_EventEmitter2);var _connection=require('./connection');var _connection2=_interopRequireDefault(_connection);var _peer=require('./peer');var _peer2=_interopRequireDefault(_peer);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;} /**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/ /* jshint undef: true */ /* globals RTCPeerConnection */ /* globals RTCSessionDescription */ /* globals RTCIceCandidate */var ConnectionController=function(_EventEmitter){_inherits(ConnectionController,_EventEmitter);function ConnectionController(syncher,domain,configuration){_classCallCheck(this,ConnectionController);if(!syncher)throw new Error('The syncher is a needed parameter');if(!domain)throw new Error('The domain is a needed parameter');if(!configuration)throw new Error('The configuration is a needed parameter');var _this2=_possibleConstructorReturn(this,Object.getPrototypeOf(ConnectionController).call(this));var _this=_this2;_this.syncher=syncher;_this.mode='offer';_this._objectDescURL='hyperty-catalogue://'+domain+'/.well-known/dataschemas/FakeDataSchema';console.info(configuration);console.info(configuration);_this.mediaConstraints=configuration.mediaConstraints;_this.configuration=configuration.webrtc; // Prepare the PeerConnection
var peerConnection=new RTCPeerConnection(_this.configuration);peerConnection.addEventListener('signalingstatechange',function(event){console.info('signalingstatechange',event.currentTarget.signalingState);if(event.currentTarget.signalingState==='have-local-offer'){_this.trigger('controller:state:change',_this.mode);}if(event.currentTarget.signalingState==='have-remote-offer'){_this.mode='answer';_this.trigger('controller:state:change',_this.mode);}});peerConnection.addEventListener('iceconnectionstatechange',function(event){console.info('iceconnectionstatechange',event.currentTarget.iceConnectionState);var data=_this._dataObjectReporter.data;if(data.hasOwnProperty('connection')){data.connection.status=event.currentTarget.iceConnectionState;}});peerConnection.addEventListener('icecandidate',function(event){if(!event.candidate)return;var icecandidate={type:'candidate',candidate:event.candidate.candidate,sdpMid:event.candidate.sdpMid,sdpMLineIndex:event.candidate.sdpMLineIndex};var data=_this._dataObjectReporter.data;if(_this.mode==='offer'){data.connection.ownerPeer.iceCandidates.push(icecandidate);}else {data.peer.iceCandidates.push(icecandidate);}}); // Add stream to PeerConnection
peerConnection.addEventListener('addstream',function(event){console.info('Add Stream: ',event);_this.trigger('stream:added',event);});_this.peerConnection=peerConnection;return _this2;}_createClass(ConnectionController,[{key:'changePeerInformation',value:function changePeerInformation(dataObjectObserver){var _this=this;var data=dataObjectObserver.data;var isOwner=data.hasOwnProperty('connection');var peerData=isOwner?data.connection.ownerPeer:data.peer;console.info('Peer Data:',JSON.stringify(peerData));if(peerData.hasOwnProperty('connectionDescription')){_this.processPeerInformation(peerData.connectionDescription);}if(peerData.hasOwnProperty('iceCandidates')){peerData.iceCandidates.forEach(function(ice){_this.processPeerInformation(ice);});}dataObjectObserver.onChange('*',function(event){console.info('Observer on change message: ',event);_this.processPeerInformation(event.data);});}},{key:'processPeerInformation',value:function processPeerInformation(data){var _this=this;console.info(JSON.stringify(data));if(data.type==='offer'||data.type==='answer'){console.info('Process Connection Description: ',data.sdp);_this.peerConnection.setRemoteDescription(new RTCSessionDescription(data),_this.remoteDescriptionSuccess,_this.remoteDescriptionError);}if(data.type==='candidate'){console.info('Process Ice Candidate: ',data);_this.peerConnection.addIceCandidate(new RTCIceCandidate({candidate:data.candidate}),_this.remoteDescriptionSuccess,_this.remoteDescriptionError);}}},{key:'remoteDescriptionSuccess',value:function remoteDescriptionSuccess(){console.info('remote success');}},{key:'remoteDescriptionError',value:function remoteDescriptionError(error){console.error('error: ',error);}},{key:'createOffer',value:function createOffer(){var _this=this;_this.peerConnection.createOffer(function(description){_this.onLocalSessionCreated(description);},_this.infoError,_this.mediaConstraints);}},{key:'createAnswer',value:function createAnswer(){var _this=this;_this.peerConnection.createAnswer(function(description){_this.onLocalSessionCreated(description);},_this.infoError);}},{key:'onLocalSessionCreated',value:function onLocalSessionCreated(description){var _this=this;_this.peerConnection.setLocalDescription(description,function(){var data=_this._dataObjectReporter.data;var sdpConnection={sdp:description.sdp,type:description.type};if(_this.mode==='offer'){data.connection.ownerPeer.connectionDescription=sdpConnection;}else {data.peer.connectionDescription=sdpConnection;}},_this.infoError);}},{key:'infoError',value:function infoError(err){console.error(err.toString(),err);} /**
   * Used to accept an incoming connection request.
   * @method accept
   * @return {Promise}
   */},{key:'accept',value:function accept(stream){ // TODO: Pass argument options as a stream, because is specific of implementation;
var _this=this;var syncher=_this.syncher;console.log('Remote Peer Information: ',_this._remotePeerInformation);var remotePeer=_this._remotePeerInformation.from;return new Promise(function(resolve,reject){try{console.info('------------------------ Syncher Create ---------------------- \n');syncher.create(_this._objectDescURL,[remotePeer],{}).then(function(dataObjectReporter){console.info('2. Return the Data Object Reporter ',dataObjectReporter);_this.stream=stream;_this.dataObjectReporter=dataObjectReporter;resolve('accepted');}).catch(function(reason){reject(reason);});}catch(e){reject('error accepting connection');}});} /**
  * Used to decline an incoming connection request.
  * @method decline
  * @return {Promise}
  */},{key:'decline',value:function decline(){var _this=this;var syncher=_this.syncher;return new Promise(function(resolve,reject){try{console.log('syncher: ',syncher);resolve('Declined');}catch(e){reject(e);}});} /**
   * Used to close an existing connection instance.
   * @method disconnect
   * @return {Promise}
   */},{key:'disconnect',value:function disconnect(){ // TODO: optimize the disconnect function
var _this=this;return new Promise(function(resolve,reject){try{_this.peerConnection.close();resolve(true);}catch(e){reject('error disconnecting connection');}});} /**
   * Used to add/invite new peers on an existing connection instance (for multiparty connections).
   * @method addPeer
   * @return {Promise}
   */},{key:'addPeer',value:function addPeer(){} /**
   * Used to remove a peer from an existing connection instance.
   * @method removePeer
   * @return {Promise}
   */},{key:'removePeer',value:function removePeer(){} // Peer Actions
},{key:'disableMic',value:function disableMic(){var _this=this;return new Promise(function(resolve,reject){try{var localStream=_this.peerConnection.getLocalStreams()[0];var audioTrack=localStream.getAudioTracks()[0];audioTrack.enabled=audioTrack.enabled?false:true;resolve(audioTrack.enabled);}catch(e){reject(e);}});}},{key:'disableCam',value:function disableCam(){var _this=this;return new Promise(function(resolve,reject){try{var localStream=_this.peerConnection.getLocalStreams()[0];var videoTrack=localStream.getVideoTracks()[0];videoTrack.enabled=videoTrack.enabled?false:true;resolve(videoTrack.enabled);}catch(e){reject(e);}});}},{key:'mute',value:function mute(){var _this=this;return new Promise(function(resolve,reject){try{var remoteStream=_this.peerConnection.getRemoteStreams()[0];var audioTrack=remoteStream.getAudioTracks()[0];audioTrack.enabled=audioTrack.enabled?false:true;resolve(audioTrack.enabled);}catch(e){reject(e);}});}},{key:'stream',set:function set(mediaStream){if(!mediaStream)throw new Error('The mediaStream is a needed parameter');var _this=this;console.info('set stream: ',mediaStream);_this.peerConnection.addStream(mediaStream);}},{key:'getLocalStreams',get:function get(){var _this=this;return _this.peerConnection.getLocalStreams();}},{key:'getRemoteStreams',get:function get(){var _this=this;return _this.peerConnection.getRemoteStreams();} /**
   * Set Remote peer information, like Hyperty.
   * @param  {Object} remotePeerInformation information about the peer;
   */},{key:'remotePeerInformation',set:function set(remotePeerInformation){var _this=this;_this._remotePeerInformation=remotePeerInformation;} /**
   * Get information relative to the Remote Peer;
   * @return {Object} remotePeerInformation;
   */,get:function get(){var _this=this;return _this._remotePeerInformation;} /**
  * Set the dataObject in the controller
  * @param {ConnectionDataObject} dataObject - have all information about the syncher object;
  */},{key:'dataObjectReporter',set:function set(dataObjectReporter){if(!dataObjectReporter)throw new Error('The Data Object Reporter is a needed parameter');var _this=this;_this._dataObjectReporter=dataObjectReporter;var data=_this._dataObjectReporter.data;dataObjectReporter.onSubscription(function(event){event.accept();});if(_this.mode==='offer'){data.connection=_connection2.default;_this.createOffer();}else {data.peer=_peer2.default;_this.createAnswer();}console.debug(_this._dataObjectReporter);} /**
  * return the dataObject in the controller
  * @return {ConnectionDataObject} dataObject
  */,get:function get(){var _this=this;return _this._dataObjectReporter;} /**
  * Set the dataObject in the controller
  * @param {ConnectionDataObject} dataObject - have all information about the syncher object;
  */},{key:'dataObjectObserver',set:function set(dataObjectObserver){if(!dataObjectObserver)throw new Error('The Data Object Observer is a needed parameter');var _this=this;_this._dataObjectObserver=dataObjectObserver;_this.changePeerInformation(dataObjectObserver);} /**
  * return the dataObject in the controller
  * @return {ConnectionDataObject} dataObject
  */,get:function get(){var _this=this;return _this._dataObjectObserver;}}]);return ConnectionController;}(_EventEmitter3.default);exports.default=ConnectionController;module.exports=exports['default'];

},{"../utils/EventEmitter":8,"./connection":6,"./peer":7,"webrtc-adapter-test":3}],5:[function(require,module,exports){
'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value" in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();exports.default=activate;var _HypertyDiscovery=require('service-framework/dist/HypertyDiscovery');var _HypertyDiscovery2=_interopRequireDefault(_HypertyDiscovery);var _Syncher=require('service-framework/dist/Syncher');var _EventEmitter2=require('../utils/EventEmitter');var _EventEmitter3=_interopRequireDefault(_EventEmitter2);var _utils=require('../utils/utils');var _ConnectionController=require('./ConnectionController');var _ConnectionController2=_interopRequireDefault(_ConnectionController);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;} /**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/ /* jshint undef: true */ // Service Framework
// Utils
// Internals
/**
* Hyperty Connector;
* @author Vitor Silva [vitor-t-silva@telecom.pt]
* @version 0.1.0
*/var HypertyConnector=function(_EventEmitter){_inherits(HypertyConnector,_EventEmitter); /**
  * Create a new Hyperty Connector
  * @param  {Syncher} syncher - Syncher provided from the runtime core
  */function HypertyConnector(hypertyURL,bus,configuration){_classCallCheck(this,HypertyConnector);if(!hypertyURL)throw new Error('The hypertyURL is a needed parameter');if(!bus)throw new Error('The MiniBus is a needed parameter');if(!configuration)throw new Error('The configuration is a needed parameter');var _this2=_possibleConstructorReturn(this,Object.getPrototypeOf(HypertyConnector).call(this,hypertyURL,bus,configuration));var _this=_this2;_this._hypertyURL=hypertyURL;_this._bus=bus;_this._configuration=configuration;_this._domain=(0,_utils.divideURL)(hypertyURL).domain;_this._objectDescURL='hyperty-catalogue://'+_this._domain+'/.well-known/dataschemas/FakeDataSchema';_this._controllers={};_this.hypertyDiscovery=new _HypertyDiscovery2.default(hypertyURL,bus);var syncher=new _Syncher.Syncher(hypertyURL,bus,configuration);syncher.onNotification(function(event){_this._onNotification(event);});_this._syncher=syncher;return _this2;}_createClass(HypertyConnector,[{key:'_onNotification',value:function _onNotification(event){var _this=this;console.info('------------ Acknowledges the Reporter ------------ \n');event.ack();console.info('------------------------ END ---------------------- \n');if(_this._controllers[event.from]){_this._autoSubscribe(event);}else {_this._autoAccept(event);}}},{key:'_autoSubscribe',value:function _autoSubscribe(event){var _this=this;var syncher=_this._syncher;console.info('---------------- Syncher Auto Subscribe ---------------- \n');console.info('Subscribe URL Object ',event,syncher);syncher.subscribe(_this._objectDescURL,event.url).then(function(dataObjectObserver){console.info('1. Return Subscribe Data Object Observer',dataObjectObserver);console.log(_this._controllers);_this._controllers[event.from].dataObjectObserver=dataObjectObserver;}).catch(function(reason){console.error(reason);});}},{key:'_autoAccept',value:function _autoAccept(event){var _this=this;var syncher=_this._syncher;console.info('----------- Syncher Subscribe (Auto Accept) ------------- \n');console.info('Subscribe URL Object ',event,syncher);syncher.subscribe(_this._objectDescURL,event.url).then(function(dataObjectObserver){console.info('1. Return Subscribe Data Object Observer',dataObjectObserver);var connectionController=new _ConnectionController2.default(syncher,_this._domain,_this._configuration);connectionController.remotePeerInformation=event;connectionController.dataObjectObserver=dataObjectObserver;_this.trigger('connector:connected',connectionController);_this.trigger('have:notification',event);console.info('------------------------ END ---------------------- \n');}).catch(function(reason){console.error(reason);});} /**
  * Establish connection with other client identifier
  * @param  {HypertyURL} HypertyURL - Define the identifier of the other component
  * @param  {Object} options - Object with options to improve the connect
  */},{key:'connect',value:function connect(hypertyURL,stream){ // TODO: Pass argument options as a stream, because is specific of implementation;
// TODO: CHange the hypertyURL for a list of URLS
var _this=this;var syncher=_this._syncher;return new Promise(function(resolve,reject){var connectionController=void 0;console.info('------------------------ Syncher Create ---------------------- \n');syncher.create(_this._objectDescURL,[hypertyURL],{}).then(function(dataObjectReporter){console.info('1. Return Create Data Object Reporter',dataObjectReporter);connectionController=new _ConnectionController2.default(syncher,_this._domain,_this._configuration);connectionController.stream=stream;connectionController.dataObjectReporter=dataObjectReporter;_this._controllers[hypertyURL]=connectionController;resolve(connectionController);console.info('--------------------------- END --------------------------- \n');}).catch(function(reason){console.error(reason);reject(reason);});});}}]);return HypertyConnector;}(_EventEmitter3.default);function activate(hypertyURL,bus,configuration){return {name:'HypertyConnector',instance:new HypertyConnector(hypertyURL,bus,configuration)};}module.exports=exports['default'];

},{"../utils/EventEmitter":8,"../utils/utils":9,"./ConnectionController":4,"service-framework/dist/HypertyDiscovery":1,"service-framework/dist/Syncher":2}],6:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:true}); /**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/ // dataObjectReporter.data = {
//    status : "connected",
//    owner : "hyperty://example.com/alicehy",
//    peer : "connection://example.com/alice/bob27012016",
//    ownerPeer : {
//          connectionDescription: {
//             sdp: 's4dfaf1sa3f1asd5f4sdafa',
//             type: 'offer'
//          },
//          iceCandidates: [{
//              type: 'candidate',
//              candidate: event.candidate.candidate,
//              sdpMid: event.candidate.sdpMid,
//              sdpMLineIndex: event.candidate.sdpMLineIndex
//            },
//            {
//              type: 'candidate',
//              candidate: event.candidate.candidate,
//              sdpMid: event.candidate.sdpMid,
//              sdpMLineIndex: event.candidate.sdpMLineIndex
//            },
//            .....
//        ]
//      }
//  }
var connection={name:'',status:"connected",owner:"hyperty://example.com/alicehy",peer:"connection://example.com/alice/bob27012016",ownerPeer:{connectionDescription:{},iceCandidates:[]}};exports.default=connection;module.exports=exports['default'];

},{}],7:[function(require,module,exports){
'use strict';Object.defineProperty(exports,"__esModule",{value:true}); /**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/var peer={name:'',connectionDescription:{},iceCandidates:[]};exports.default=peer;module.exports=exports['default'];

},{}],8:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:true});var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value" in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}} /**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/ /**
 * EventEmitter
 * All classes which extends this, can have addEventListener and trigger events;
 */var EventEmitter=function(){function EventEmitter(){_classCallCheck(this,EventEmitter);}_createClass(EventEmitter,[{key:"addEventListener", /**
   * addEventListener listen for an eventType
   * @param  {string}         eventType - listening for this type of event
   * @param  {Function}       cb        - callback function will be executed when the event it is invoked
   */value:function addEventListener(eventType,cb){var _this=this;_this[eventType]=cb;} /**
   * Invoke the eventType
   * @param  {string} eventType - event will be invoked
   * @param  {object} params - parameters will be passed to the addEventListener
   */},{key:"trigger",value:function trigger(eventType,params){var _this=this;if(_this[eventType]){_this[eventType](params);}}}]);return EventEmitter;}();exports.default=EventEmitter;module.exports=exports['default'];

},{}],9:[function(require,module,exports){
'use strict';Object.defineProperty(exports,"__esModule",{value:true});exports.divideURL=divideURL;exports.deepClone=deepClone;exports.getConfig=getConfig;exports.getUserMedia=getUserMedia;exports.serialize=serialize;exports.getTemplate=getTemplate; /**
 * Copyright 2016 PT Inovação e Sistemas SA
 * Copyright 2016 INESC-ID
 * Copyright 2016 QUOBIS NETWORKS SL
 * Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
 * Copyright 2016 ORANGE SA
 * Copyright 2016 Deutsche Telekom AG
 * Copyright 2016 Apizee
 * Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 **/ // jshint browser:true, jquery: true
// jshint varstmt: true
/* global Handlebars */ /**
 * Support module with some functions will be useful
 * @module utils
 */ /**
 * @typedef divideURL
 * @type Object
 * @property {string} type The type of URL
 * @property {string} domain The domain of URL
 * @property {string} identity The identity of URL
 */ /**
 * Divide an url in type, domain and identity
 * @param  {URL.URL} url - url address
 * @return {divideURL} the result of divideURL
 */function divideURL(url){ // let re = /([a-zA-Z-]*)?:\/\/(?:\.)?([-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b)*(\/[\/\d\w\.-]*)*(?:[\?])*(.+)*/gi;
var re=/([a-zA-Z-]*):\/\/(?:\.)?([-a-zA-Z0-9@:%._\+~#=]{2,256})([-a-zA-Z0-9@:%._\+~#=\/]*)/gi;var subst='$1,$2,$3';var parts=url.replace(re,subst).split(','); // If the url has no protocol, the default protocol set is https
if(parts[0]===url){parts[0]='https';parts[1]=url;}var result={type:parts[0],domain:parts[1],identity:parts[2]};return result;} /**
 * Make a COPY of the original data
 * @param  {Object}  obj - object to be cloned
 * @return {Object}
 */function deepClone(obj){ //TODO: simple but inefficient JSON deep clone...
if(obj)return JSON.parse(JSON.stringify(obj));} /**
 * Get the configuration from an json file;
 * @param  {JSONObject} jsonFile
 * @return {object}
 */function getConfig(JSONObject){console.log('production');return JSONObject['production'];} /**
 * Get WebRTC API resources
 * @param  {Object}     options Object containing the information that resources will be used (camera, mic, resolution, etc);
 * @return {Promise}
 */function getUserMedia(constraints){return new Promise(function(resolve,reject){navigator.mediaDevices.getUserMedia(constraints).then(function(mediaStream){resolve(mediaStream);}).catch(function(reason){reject(reason);});});}function serialize(){$.fn.serializeObject=function(){var o={};var a=this.serializeArray();$.each(a,function(){if(o[this.name]!==undefined){if(!o[this.name].push){o[this.name]=[o[this.name]];}o[this.name].push(this.value||'');}else {o[this.name]=this.value||'';}});return o;};$.fn.serializeObjectArray=function(){var o={};var a=this.serializeArray();$.each(a,function(){if(o[this.name]!==undefined){if(!o[this.name].push){o[this.name]=[o[this.name]];}o[this.name].push(this.value||'');}else {if(!o[this.name])o[this.name]=[];o[this.name].push(this.value||'');}});return o;};}function getTemplate(path,script){return new Promise(function(resolve,reject){if(Handlebars.templates===undefined||Handlebars.templates[name]===undefined){Handlebars.templates={};}else {resolve(Handlebars.templates[name]);}var templateFile=$.ajax({url:path+'.hbs',success:function success(data){Handlebars.templates[name]=Handlebars.compile(data);},fail:function fail(reason){return reason;}});var scriptFile=$.getScript(script);var requests=[];if(path)requests.push(templateFile);if(script)requests.push(scriptFile);Promise.all(requests).then(function(result){resolve(Handlebars.templates[name]);}).catch(function(reason){reject(reason);});});}

},{}]},{},[5])(5)
});",
      "sourceCodeClassname": "HypertyConnector",
      "encoding": "base64",
      "signature": ""
    },
    "cguid": 10001,
    "type": "Hyperties",
    "version": "0.1",
    "description": "Description of HypertyConnector",
    "objectName": "HypertyConnector",
    "configuration": {},
    "sourcePackageURL": "/sourcePackage",
    "language": "javascript",
    "signature": "",
    "messageSchemas": "",
    "dataObjects": [],
    "accessControlPolicy": "somePolicy"
  }
}
